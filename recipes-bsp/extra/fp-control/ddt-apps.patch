diff -Naur sh4-apps/tools/fp_control/Adb_Box.c apps/tools/fp_control/Adb_Box.c
--- sh4-apps/tools/fp_control/Adb_Box.c	2019-02-10 00:00:07.504796252 +0100
+++ apps/tools/fp_control/Adb_Box.c	2019-02-10 00:00:17.275527475 +0100
@@ -19,7 +19,7 @@
  *
  */
 
-/* ******************* includes ************************ */
+/******************** includes ************************ */
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -36,7 +36,7 @@
 
 static int setText(Context_t *context, char *theText);
 
-/* ******************* constants ************************ */
+/******************** constants ************************ */
 
 #define cVFD_DEVICE "/dev/vfd"
 
@@ -62,10 +62,10 @@
 void setAdb_BoxTime(time_t theGMTTime, char *destString)
 {
 	/* from u-boot adb_box */
-	struct	tm *now_tm;
+	struct tm *now_tm;
 	now_tm = gmtime(&theGMTTime);
 	printf("Set Time (UTC): %02d:%02d:%02d %02d-%02d-%04d\n",
-		   now_tm->tm_hour, now_tm->tm_min, now_tm->tm_sec, now_tm->tm_mday, now_tm->tm_mon + 1, now_tm->tm_year + 1900);
+	       now_tm->tm_hour, now_tm->tm_min, now_tm->tm_sec, now_tm->tm_mday, now_tm->tm_mon + 1, now_tm->tm_year + 1900);
 	double mjd = modJulianDate(now_tm);
 	int mjd_int = mjd;
 	destString[0] = (mjd_int >> 8);
@@ -77,14 +77,14 @@
 
 unsigned long getAdb_BoxTime(char *adb_boxTimeString)
 {
-	unsigned int    mjd     = ((adb_boxTimeString[1] & 0xFF) * 256) + (adb_boxTimeString[2] & 0xFF);
-	unsigned long   epoch   = ((mjd - 40587) * 86400);
-	unsigned int    hour    = adb_boxTimeString[3] & 0xFF;
-	unsigned int    min     = adb_boxTimeString[4] & 0xFF;
-	unsigned int    sec     = adb_boxTimeString[5] & 0xFF;
+	unsigned int mjd = ((adb_boxTimeString[1] & 0xFF) * 256) + (adb_boxTimeString[2] & 0xFF);
+	unsigned long epoch = ((mjd - 40587) * 86400);
+	unsigned int hour = adb_boxTimeString[3] & 0xFF;
+	unsigned int min = adb_boxTimeString[4] & 0xFF;
+	unsigned int sec = adb_boxTimeString[5] & 0xFF;
 	epoch += (hour * 3600 + min * 60 + sec);
 	printf("MJD = %d epoch = %ld, time = %02d:%02d:%02d\n", mjd,
-		   epoch, hour, min, sec);
+	       epoch, hour, min, sec);
 	return epoch;
 }
 
@@ -96,18 +96,20 @@
 	int vFd;
 	printf("%s\n", __func__);
 	vFd = open(cVFD_DEVICE, O_RDWR);
+
 	if (vFd < 0)
 	{
 		fprintf(stderr, "Cannot open %s\n", cVFD_DEVICE);
 		perror("");
 	}
+
 	((Model_t *)context->m)->private = private;
 	memset(private, 0, sizeof(tADB_BOXPrivate));
 	checkConfig(&private->display, &private->display_custom, &private->timeFormat, &private->wakeupDecrement);
 	return vFd;
 }
 
-static int usage(Context_t *context, char *prg_name, char *cmd_name)
+static int usage(Context_t *context, char *prg_name)
 {
 	fprintf(stderr, "%s: not implemented\n", __func__);
 	return -1;
@@ -118,11 +120,13 @@
 	struct adb_box_ioctl_data vData;
 	printf("%s\n", __func__);
 	setAdb_BoxTime(*theGMTTime, vData.u.time.time);
+
 	if (ioctl(context->fd, VFDSETTIME, &vData) < 0)
 	{
 		perror("setTime: ");
 		return -1;
 	}
+
 	return 0;
 }
 
@@ -130,12 +134,14 @@
 {
 	char fp_time[8];
 	fprintf(stderr, "Waiting for current time from fp...\n");
+
 	/* front controller time */
 	if (ioctl(context->fd, VFDGETTIME, &fp_time) < 0)
 	{
 		perror("getTime: ");
 		return -1;
 	}
+
 	/* if we get the fp time */
 	if (fp_time[0] != '\0')
 	{
@@ -148,6 +154,7 @@
 		fprintf(stderr, "Error reading time from fp\n");
 		*theGMTTime = 0;
 	}
+
 	return 0;
 }
 
@@ -157,10 +164,12 @@
 	time_t curTime;
 	time_t wakeupTime;
 	struct tm *ts;
+//	tADB_BOXPrivate *private = (tADB_BOXPrivate *)((Model_t *)context->m)->private;
 	time(&curTime);
 	ts = localtime(&curTime);
 	fprintf(stderr, "Current Time: %02d:%02d:%02d %02d-%02d-%04d\n",
-			ts->tm_hour, ts->tm_min, ts->tm_sec, ts->tm_mday, ts->tm_mon + 1, ts->tm_year + 1900);
+		ts->tm_hour, ts->tm_min, ts->tm_sec, ts->tm_mday, ts->tm_mon + 1, ts->tm_year + 1900);
+
 	if (theGMTTime == NULL)
 	{
 		wakeupTime = read_timers_utc(curTime);
@@ -174,6 +183,7 @@
 		/* nothing to do for e2 */
 		fprintf(stderr, "no e2 timer found clearing fp wakeup time, Goodbye...\n");
 		vData.u.standby.time[0] = '\0';
+
 		if (ioctl(context->fd, VFDSTANDBY, &vData) < 0)
 		{
 			perror("standby: ");
@@ -185,14 +195,17 @@
 		unsigned long diff;
 		char fp_time[8];
 		fprintf(stderr, "Waiting for current time from fp ...\n");
+
 		/* front controller time */
 		if (ioctl(context->fd, VFDGETTIME, &fp_time) < 0)
 		{
 			perror("gettime: ");
 			return -1;
 		}
+
 		/* difference from now to wake up */
 		diff = (unsigned long int) wakeupTime - curTime;
+
 		/* if we get the fp time */
 		if (fp_time[0] != '\0')
 		{
@@ -205,18 +218,21 @@
 			fprintf(stderr, "Error reading time, assuming localtime\n");
 			/* noop current time already set */
 		}
+
 		wakeupTime = curTime + diff;
 		setAdb_BoxTime(wakeupTime, vData.u.standby.time);
+
 		if (ioctl(context->fd, VFDSTANDBY, &vData) < 0)
 		{
 			perror("standby: ");
 			return -1;
 		}
 	}
+
 	return 0;
 }
 
-static int getWTime(Context_t *context, time_t *theGMTTime)
+static int getTimer(Context_t *context, time_t *theGMTTime)
 {
 	fprintf(stderr, "%s: not implemented\n", __func__);
 	return -1;
@@ -225,6 +241,7 @@
 static int shutdown(Context_t *context, time_t *shutdownTimeGMT)
 {
 	time_t curTime;
+
 	/* shutdown immediately */
 	if (*shutdownTimeGMT == -1)
 	{
@@ -233,14 +250,18 @@
 	while (1)
 	{
 		time(&curTime);
+
 		/*printf("curTime = %d, shutdown %d\n", curTime, *shutdownTimeGMT);*/
+
 		if (curTime >= *shutdownTimeGMT)
 		{
 			/* set most recent e2 timer and bye bye */
 			return (setTimer(context, NULL));
 		}
+
 		usleep(100000);
 	}
+
 	return -1;
 }
 
@@ -248,9 +269,11 @@
 {
 	time_t curTime;
 	struct adb_box_ioctl_data vData;
+
 	while (1)
 	{
 		time(&curTime);
+
 		if (curTime >= *rebootTimeGMT)
 		{
 			if (ioctl(context->fd, VFDREBOOT, &vData) < 0)
@@ -259,8 +282,10 @@
 				return -1;
 			}
 		}
+
 		usleep(100000);
 	}
+
 	return 0;
 }
 
@@ -268,28 +293,31 @@
 {
 	time_t curTime;
 	int sleep = 1;
-	int vFd = 0;
+	int vFd;
 	fd_set rfds;
 	struct timeval tv;
 	int retval;
 	struct tm *ts;
 	char output[cMAXCharsADB_BOX + 1];
 	tADB_BOXPrivate *private = (tADB_BOXPrivate *)((Model_t *)context->m)->private;
-#if 0
+//#if 0
 	printf("%s\n", __func__);
-	vFd = open(cRC_DEVICE, O_RDWR);
+//	vFd = open(cRC_DEVICE, O_RDWR);
+
 	if (vFd < 0)
 	{
-		fprintf(stderr, "Cannot open %s\n", cRC_DEVICE);
+//		fprintf(stderr, "Cannot open %s\n", cRC_DEVICE);
 		perror("");
 		return -1;
 	}
-#endif
+
 	printf("%s 1\n", __func__);
+
 	while (sleep)
 	{
 		time(&curTime);
 		ts = localtime(&curTime);
+
 		if (curTime >= *wakeUpGMT)
 		{
 			sleep = 0;
@@ -301,23 +329,27 @@
 			tv.tv_sec = 0;
 			tv.tv_usec = 100000;
 			retval = select(vFd + 1, &rfds, NULL, NULL, &tv);
+
 			if (retval > 0)
 			{
 				sleep = 0;
 			}
 		}
+
 		if (private->display)
 		{
 			strftime(output, cMAXCharsADB_BOX + 1, private->timeFormat, ts);
 			setText(context, output);
 		}
 	}
+
+//#endif
 	return 0;
 }
 
 static int setText(Context_t *context, char *theText)
 {
-	char vHelp[cMAXCharsADB_BOX + 1];
+	char vHelp[128];
 	strncpy(vHelp, theText, cMAXCharsADB_BOX);
 	vHelp[cMAXCharsADB_BOX] = '\0';
 	/* printf("%s, %d\n", vHelp, strlen(vHelp));*/
@@ -330,20 +362,40 @@
 	struct adb_box_ioctl_data vData;
 	vData.u.led.led_nr = which;
 	vData.u.led.on = on;
+
 	if (ioctl(context->fd, VFDSETLED, &vData) < 0)
 	{
 		perror("setLed: ");
 		return -1;
 	}
+
 	return 0;
 }
 
 static int setIcon(Context_t *context, int which, int on)
 {
-	struct adb_box_ioctl_data vData;
+	char icon = which;
+
+	struct
+	{
+		unsigned char start;
+		unsigned char data[64];
+		unsigned char length;
+	} data;
+
+	data.start = 0x00;
+	data.data[0] = icon;
+	data.data[4] = on;
+	data.length = 5;
+
+	if (ioctl(context->fd, VFDICONDISPLAYONOFF, &data) < 0)
+#if 0
+		struct adb_box_ioctl_data vData;
 	vData.u.icon.icon_nr = which;
 	vData.u.icon.on = on;
+
 	if (ioctl(context->fd, VFDICONDISPLAYONOFF, &vData) < 0)
+#endif
 	{
 		perror("setIcon: ");
 		return -1;
@@ -354,20 +406,29 @@
 static int setBrightness(Context_t *context, int brightness)
 {
 	struct adb_box_ioctl_data vData;
+
 	if (brightness < 0 || brightness > 7)
 	{
 		return -1;
 	}
 	vData.u.brightness.level = brightness;
 	printf("%d\n", context->fd);
+
 	if (ioctl(context->fd, VFDBRIGHTNESS, &vData) < 0)
 	{
 		perror("setBrightness: ");
 		return -1;
 	}
+
 	return 0;
 }
 
+static int setPwrLed(Context_t *context, int brightness)
+{
+	fprintf(stderr, "%s: not implemented\n", __func__);
+	return -1;
+}
+
 static int setLight(Context_t *context, int on)
 {
 	if (on)
@@ -384,6 +445,7 @@
 static int Exit(Context_t *context)
 {
 	tADB_BOXPrivate *private = (tADB_BOXPrivate *)((Model_t *)context->m)->private;
+
 	if (context->fd > 0)
 	{
 		close(context->fd);
@@ -395,44 +457,40 @@
 static int Clear(Context_t *context)
 {
 	struct adb_box_ioctl_data vData;
+
 	if (ioctl(context->fd, VFDDISPLAYCLR, &vData) < 0)
 	{
 		perror("Clear: ");
 		return -1;
 	}
+
 	return 0;
 }
 
 Model_t Adb_Box_model =
 {
-	.Name             = "B4Team ADB_BOX frontpanel control utility",
-	.Type             = Adb_Box,
-	.Init             = init,
-	.Clear            = Clear,
-	.Usage            = usage,
-	.SetTime          = setTime,
-	.GetTime          = getTime,
-	.SetTimer         = setTimer,
-	.GetWTime         = getWTime,
-	.SetWTime         = NULL,
-	.Shutdown         = shutdown,
-	.Reboot           = reboot,
-	.Sleep            = Sleep,
-	.SetText          = setText,
-	.SetLed           = setLed,
-	.SetIcon          = setIcon,
-	.SetBrightness    = setBrightness,
-	.GetWakeupReason  = NULL,
-	.SetLight         = setLight,
-	.SetLedBrightness = NULL,
-	.GetVersion       = NULL,
-	.SetRF            = NULL,
-	.SetFan           = NULL,
-	.GetWakeupTime    = NULL,
-	.SetDisplayTime   = NULL,
-	.SetTimeMode      = NULL,
-#if defined MODEL_SPECIFIC
-	.ModelSpecific    = NULL,
-#endif
-	.Exit             = Exit
+	.Name                      = "B4Team mod j00zek nBOX and sagemcom8X frontpanel control utility",
+	.Type                      = Adb_Box,
+	.Init                      = init,
+	.Clear                     = Clear,
+	.Usage                     = usage,
+	.SetTime                   = setTime,
+	.GetTime                   = getTime,
+	.SetTimer                  = setTimer,
+	.GetTimer                  = getTimer,
+	.Shutdown                  = shutdown,
+	.Reboot                    = reboot,
+	.Sleep                     = Sleep,
+	.SetText                   = setText,
+	.SetLed                    = setLed,
+	.SetIcon                   = setIcon,
+	.SetBrightness             = setBrightness,
+	.SetPwrLed                 = setPwrLed,
+	.SetLight                  = setLight,
+	.Exit                      = Exit,
+	.SetLedBrightness          = NULL,
+	.GetVersion                = NULL,
+	.SetRF                     = NULL,
+	.SetFan                    = NULL,
+	.private                   = NULL
 };
diff -Naur sh4-apps/tools/fp_control/Cnbox.c apps/tools/fp_control/Cnbox.c
--- sh4-apps/tools/fp_control/Cnbox.c	2019-02-10 00:00:07.504796252 +0100
+++ apps/tools/fp_control/Cnbox.c	2019-02-10 00:00:17.275527475 +0100
@@ -19,7 +19,7 @@
  *
  */
 
-/* ******************* includes ************************ */
+/******************** includes ************************ */
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -38,7 +38,7 @@
 static int setText(Context_t *context, char *theText);
 static int Clear(Context_t *context);
 
-/* ******************* constants ************************ */
+/******************** constants ************************ */
 
 #define cVFD_DEVICE "/dev/vfd"
 #define cEVENT_DEVICE "/dev/input/event0"
@@ -57,16 +57,20 @@
 
 /* ******************* helper/misc functions ****************** */
 
+static void setMode(int fd)
+{
+}
+
 unsigned long getCnboxTime(char *nuvotonTimeString)
 {
-	unsigned int    mjd     = ((nuvotonTimeString[0] & 0xFF) * 256) + (nuvotonTimeString[1] & 0xFF);
-	unsigned long   epoch   = ((mjd - 40587) * 86400);
-	unsigned int    hour    = nuvotonTimeString[2] & 0xFF;
-	unsigned int    min     = nuvotonTimeString[3] & 0xFF;
-	unsigned int    sec     = nuvotonTimeString[4] & 0xFF;
+	unsigned int mjd = ((nuvotonTimeString[0] & 0xFF) * 256) + (nuvotonTimeString[1] & 0xFF);
+	unsigned long epoch = ((mjd - 40587) * 86400);
+	unsigned int hour = nuvotonTimeString[2] & 0xFF;
+	unsigned int min = nuvotonTimeString[3] & 0xFF;
+	unsigned int sec = nuvotonTimeString[4] & 0xFF;
 	epoch += (hour * 3600 + min * 60 + sec);
 	printf("MJD = %d epoch = %ld, time = %02d:%02d:%02d\n", mjd,
-		   epoch, hour, min, sec);
+	       epoch, hour, min, sec);
 	return epoch;
 }
 
@@ -80,7 +84,7 @@
 	struct tm *now_tm;
 	now_tm = gmtime(&theTime);
 	printf("Set Time (UTC): %02d:%02d:%02d %02d-%02d-%04d\n",
-		   now_tm->tm_hour, now_tm->tm_min, now_tm->tm_sec, now_tm->tm_mday, now_tm->tm_mon + 1, now_tm->tm_year + 1900);
+	       now_tm->tm_hour, now_tm->tm_min, now_tm->tm_sec, now_tm->tm_mday, now_tm->tm_mon + 1, now_tm->tm_year + 1900);
 	double mjd = modJulianDate(now_tm);
 	int mjd_int = mjd;
 	destString[0] = (mjd_int >> 8);
@@ -97,18 +101,20 @@
 	tCnboxPrivate *private = malloc(sizeof(tCnboxPrivate));
 	int vFd;
 	vFd = open(cVFD_DEVICE, O_RDWR);
+
 	if (vFd < 0)
 	{
 		fprintf(stderr, "Cannot open %s\n", cVFD_DEVICE);
 		perror("");
 	}
+
 	((Model_t *)context->m)->private = private;
 	memset(private, 0, sizeof(tCnboxPrivate));
 	checkConfig(&private->display, &private->display_custom, &private->timeFormat, &private->wakeupDecrement);
 	return vFd;
 }
 
-static int usage(Context_t *context, char *prg_name, char *cmd_name)
+static int usage(Context_t *context, char *prg_name)
 {
 	fprintf(stderr, "%s: not implemented\n", __func__);
 	return -1;
@@ -118,11 +124,13 @@
 {
 	struct cnbox_ioctl_data vData;
 	vData.u.time.localTime = *theGMTTime;
+
 	if (ioctl(context->fd, VFDSETTIME, &vData) < 0)
 	{
 		perror("setTime: ");
 		return -1;
 	}
+
 	return 0;
 }
 
@@ -130,12 +138,14 @@
 {
 	char fp_time[8];
 	fprintf(stderr, "Waiting for current time from fp...\n");
+
 	/* front controller time */
 	if (ioctl(context->fd, VFDGETTIME, &fp_time) < 0)
 	{
 		perror("getTime: ");
 		return -1;
 	}
+
 	/* if we get the fp time */
 	if (fp_time[0] != '\0')
 	{
@@ -148,6 +158,7 @@
 		fprintf(stderr, "Error reading time from fp\n");
 		*theGMTTime = 0;
 	}
+
 	return 0;
 }
 
@@ -159,31 +170,32 @@
 	time_t wakeupTime;
 	struct tm *ts;
 	struct tm *tsw;
+//	tCnboxPrivate *private = (tCnboxPrivate *)((Model_t *)context->m)->private;
 	time(&curTime);
 	ts = localtime(&curTime);
 	fprintf(stderr, "Current Time: %02d:%02d:%02d %02d-%02d-%04d\n",
-			ts->tm_hour, ts->tm_min, ts->tm_sec, ts->tm_mday, ts->tm_mon + 1, ts->tm_year + 1900);
+		ts->tm_hour, ts->tm_min, ts->tm_sec, ts->tm_mday, ts->tm_mon + 1, ts->tm_year + 1900);
+
 	if (theGMTTime == NULL)
-	{
 		wakeupTime = read_timers_utc(curTime);
-	}
 	else
-	{
 		wakeupTime = *theGMTTime;
-	}
+
 	tsw = localtime(&wakeupTime);
 	printf("wakeup Time: %02d:%02d:%02d %02d-%02d-%04d\n",
-		   tsw->tm_hour, tsw->tm_min, tsw->tm_sec, tsw->tm_mday, tsw->tm_mon + 1, tsw->tm_year + 1900);
+	       tsw->tm_hour, tsw->tm_min, tsw->tm_sec, tsw->tm_mday, tsw->tm_mon + 1, tsw->tm_year + 1900);
 	tsw = localtime(&curTime);
 	printf("current Time: %02d:%02d:%02d %02d-%02d-%04d\n",
-		   tsw->tm_hour, tsw->tm_min, tsw->tm_sec, tsw->tm_mday, tsw->tm_mon + 1, tsw->tm_year + 1900);
+	       tsw->tm_hour, tsw->tm_min, tsw->tm_sec, tsw->tm_mday, tsw->tm_mon + 1, tsw->tm_year + 1900);
+
 	//check --> WakupTime is set and larger curTime and no larger than a year in the future (gost)
-	if ((wakeupTime <= 0) || (curTime > wakeupTime) || (curTime < (wakeupTime-25920000)))
-	//if ((wakeupTime <= 0) || (wakeupTime == LONG_MAX))
+	if ((wakeupTime <= 0) || (curTime > wakeupTime) || (curTime < (wakeupTime - 25920000)))
+		//if ((wakeupTime <= 0) || (wakeupTime == LONG_MAX))
 	{
 		/* nothing to do for e2 */
 		fprintf(stderr, "no e2 timer found clearing fp wakeup time ... good bye ...\n");
 		vData.u.standby.localTime = 0;
+
 		if (ioctl(context->fd, VFDSTANDBY, &vData) < 0)
 		{
 			perror("standBy: ");
@@ -193,38 +205,45 @@
 	else
 	{
 		unsigned long diff;
-		char    fp_time[8];
+		char fp_time[8];
 		fprintf(stderr, "Waiting for current time from fp...\n");
+
 		/* front controller time */
 		if (ioctl(context->fd, VFDGETTIME, &fp_time) < 0)
 		{
 			perror("getTime: ");
 			return -1;
 		}
+
 		/* difference from now to wake up */
 		diff = (unsigned long int) wakeupTime - curTime;
+
 		/* if we get the fp time */
 		if (fp_time[0] != '\0')
 		{
 			fprintf(stderr, "Success reading time from fp\n");
 			/* current front controller time */
 			curTimeFP = (time_t) getCnboxTime(fp_time);
+
 			/* set FP-Time if curTime > or < 12h (gost)*/
 			if (((curTimeFP - curTime) > 43200) || ((curTime - curTimeFP) > 43200))
 			{
 				setTime(context, &curTime);
 				curTimeFP = curTime;
 			}
+
 			tsw = gmtime(&curTimeFP);
 			printf("fp_time (UTC): %02d:%02d:%02d %02d-%02d-%04d\n",
-				   tsw->tm_hour, tsw->tm_min, tsw->tm_sec, tsw->tm_mday, tsw->tm_mon + 1, tsw->tm_year + 1900);
+			       tsw->tm_hour, tsw->tm_min, tsw->tm_sec, tsw->tm_mday, tsw->tm_mon + 1, tsw->tm_year + 1900);
 		}
 		else
 		{
 			fprintf(stderr, "Error reading time, assuming localtime\n");
 			/* noop current time already set */
 		}
+
 		wakeupTime = curTimeFP + diff;
+
 //		setCnboxTime(wakeupTime, vData.u.standby.time);
 		if (ioctl(context->fd, VFDSTANDBY, &vData) < 0)
 		{
@@ -232,10 +251,11 @@
 			return -1;
 		}
 	}
+
 	return 0;
 }
 
-static int getWTime(Context_t *context, time_t *theGMTTime)
+static int getTimer(Context_t *context, time_t *theGMTTime)
 {
 	fprintf(stderr, "%s: not implemented\n", __func__);
 	return -1;
@@ -247,19 +267,21 @@
 
 	/* shutdown immediately */
 	if (*shutdownTimeGMT == -1)
-	{
 		return (setTimer(context, NULL));
-	}
+
 	while (1)
 	{
 		time(&curTime);
+
 		if (curTime >= *shutdownTimeGMT)
 		{
 			/* set most recent e2 timer and bye bye */
 			return (setTimer(context, NULL));
 		}
+
 		usleep(100000);
 	}
+
 	return -1;
 }
 
@@ -267,9 +289,11 @@
 {
 	time_t curTime;
 	struct cnbox_ioctl_data vData;
+
 	while (1)
 	{
 		time(&curTime);
+
 		if (curTime >= *rebootTimeGMT)
 		{
 			if (ioctl(context->fd, VFDREBOOT, &vData) < 0)
@@ -278,8 +302,10 @@
 				return -1;
 			}
 		}
+
 		usleep(100000);
 	}
+
 	return 0;
 }
 
@@ -296,16 +322,19 @@
 	struct input_event ev[64];
 	tCnboxPrivate *private = (tCnboxPrivate *)((Model_t *)context->m)->private;
 	vFd = open(cEVENT_DEVICE, O_RDWR);
+
 	if (vFd < 0)
 	{
 		fprintf(stderr, "Cannot open %s\n", cEVENT_DEVICE);
 		perror("");
 		return -1;
 	}
+
 	while (sleep)
 	{
 		time(&curTime);
 		ts = localtime(&curTime);
+
 		if (curTime >= *wakeUpGMT)
 		{
 			sleep = 0;
@@ -317,13 +346,16 @@
 			tv.tv_sec = 0;
 			tv.tv_usec = 100000;
 			retval = select(vFd + 1, &rfds, NULL, NULL, &tv);
+
 			if (retval > 0)
 			{
 				rd = read(vFd, ev, sizeof(struct input_event) * 64);
+
 				if (rd < (int) sizeof(struct input_event))
 				{
 					continue;
 				}
+
 				for (i = 0; i < rd / sizeof(struct input_event); i++)
 				{
 					if (ev[i].type == EV_SYN)
@@ -335,25 +367,25 @@
 					else
 					{
 						if (ev[i].code == 116)
-						{
 							sleep = 0;
-						}
 					}
 				}
 			}
 		}
+
 		if (private->display)
 		{
 			strftime(output, cMAXCharsCnbox + 1, private->timeFormat, ts);
 			setText(context, output);
 		}
 	}
+
 	return 0;
 }
 
 static int setText(Context_t *context, char *theText)
 {
-	char vHelp[cMAXCharsCnbox + 1];
+	char vHelp[128];
 	strncpy(vHelp, theText, cMAXCharsCnbox);
 	vHelp[cMAXCharsCnbox] = '\0';
 	/* printf("%s, %d\n", vHelp, strlen(vHelp));*/
@@ -366,55 +398,53 @@
 	return 0;
 }
 
+static int setPwrLed(Context_t *context, int pwrled)
+{
+	return 0;
+}
+
 static int Exit(Context_t *context)
 {
 	tCnboxPrivate *private = (tCnboxPrivate *)((Model_t *)context->m)->private;
+
 	if (context->fd > 0)
-	{
 		close(context->fd);
-	}
+
 	free(private);
 	exit(1);
 }
 
 static int Clear(Context_t *context)
 {
-//	int i;
+	int i;
 	setText(context, "        ");
 	return 0;
 }
 
 Model_t CNBOX_model =
 {
-	.Name             = "CreNova Micom frontpanel control utility",
-	.Type             = CNBox,
-	.Init             = init,
-	.Clear            = Clear,
-	.Usage            = usage,
-	.SetTime          = setTime,
-	.GetTime          = getTime,
-	.SetTimer         = setTimer,
-	.GetWTime         = getWTime,
-	.SetWTime         = NULL,
-	.Shutdown         = shutdown,
-	.Reboot           = reboot,
-	.Sleep            = Sleep,
-	.SetText          = setText,
-	.SetLed           = setLed,
-	.SetIcon          = NULL,
-	.SetBrightness    = NULL,
-	.GetWakeupReason  = NULL,
-	.SetLight         = NULL,
-	.SetLedBrightness = NULL,
-	.GetVersion       = NULL,
-	.SetRF            = NULL,
-	.SetFan           = NULL,
-	.GetWakeupTime    = NULL,
-	.SetDisplayTime   = NULL,
-	.SetTimeMode      = NULL,
-#if defined MODEL_SPECIFIC
-	.ModelSpecific    = NULL,
-#endif
-	.Exit             = Exit
+	.Name                      = "CreNova Micom frontpanel control utility",
+	.Type                      = CNBox,
+	.Init                      = init,
+	.Clear                     = Clear,
+	.Usage                     = usage,
+	.SetTime                   = setTime,
+	.GetTime                   = getTime,
+	.SetTimer                  = setTimer,
+	.GetTimer                  = getTimer,
+	.Shutdown                  = shutdown,
+	.Reboot                    = reboot,
+	.Sleep                     = Sleep,
+	.SetText                   = setText,
+	.SetLed                    = NULL,
+	.SetIcon                   = NULL,
+	.SetBrightness             = NULL,
+	.SetPwrLed                 = NULL,
+	.SetLight                  = NULL,
+	.Exit                      = Exit,
+	.SetLedBrightness          = NULL,
+	.GetVersion                = NULL,
+	.SetRF                     = NULL,
+	.SetFan                    = NULL,
+	.private                   = NULL
 };
-
diff -Naur sh4-apps/tools/fp_control/configure.ac apps/tools/fp_control/configure.ac
--- sh4-apps/tools/fp_control/configure.ac	2019-02-10 00:00:07.507796169 +0100
+++ apps/tools/fp_control/configure.ac	2019-02-10 00:00:17.277527420 +0100
@@ -1,14 +1,12 @@
 AC_INIT([fp_control],[1.0],[],[fp_control])
-AC_PREREQ(2.53)
-
 AM_INIT_AUTOMAKE
-
-AC_PROG_CC
-AC_PROG_CXX
-
 m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])
 m4_ifdef([LT_INIT], [LT_INIT], [AC_PROG_LIBTOOL])
 AC_CONFIG_MACRO_DIR([m4])
+AC_CONFIG_HEADERS([config.h])
+
+AC_PROG_CC
+AC_PROG_CXX
 
 AC_CHECK_LIB(pthread, pthread_create, [LIBS="$LIBS -lpthread"])
 
diff -Naur sh4-apps/tools/fp_control/Cuberevo.c apps/tools/fp_control/Cuberevo.c
--- sh4-apps/tools/fp_control/Cuberevo.c	2019-02-10 00:00:07.505796224 +0100
+++ apps/tools/fp_control/Cuberevo.c	2019-02-10 00:00:17.275527475 +0100
@@ -19,7 +19,7 @@
  *
  */
 
-/* ******************* includes ************************ */
+/******************** includes ************************ */
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -41,7 +41,7 @@
 static int getVersion(Context_t *context, int *version);
 static int setDisplayTime(Context_t *context, int on);
 
-/* ******************* constants ************************ */
+/******************** constants ************************ */
 
 #define cVFD_DEVICE "/dev/vfd"
 #define cEVENT_DEVICE "/dev/input/event0"
@@ -66,6 +66,7 @@
 {
 	struct micom_ioctl_data micom;
 	micom.u.mode.compat = 1;
+
 	if (ioctl(fd, VFDSETMODE, &micom) < 0)
 	{
 		perror("setMode: ");
@@ -84,6 +85,7 @@
 #else
 	now_tm = localtime(&theGMTTime);
 #endif
+
 	if (seconds)
 	{
 		sprintf(tmpString, "%02d%02d%02d%02d%02d%02d",
@@ -92,23 +94,23 @@
 	}
 	else
 	{
-		sprintf(tmpString, "%02d%02d%02d%02d%02d", 
-			now_tm->tm_year-100, now_tm->tm_mon+1, now_tm->tm_mday, now_tm->tm_hour, now_tm->tm_min);
+		sprintf(tmpString, "%02d%02d%02d%02d%02d",
+			now_tm->tm_year - 100, now_tm->tm_mon + 1, now_tm->tm_mday, now_tm->tm_hour, now_tm->tm_min);
 		strncpy(destString, tmpString, 10);
 	}
 }
 
-static time_t getMicomTime(char* micomTimeString)
+static time_t getMicomTime(char *micomTimeString)
 {
 	char convertTime[128];
-	unsigned int    year, month, day;
-	unsigned int    hour, min, sec;
+	unsigned int year, month, day;
+	unsigned int hour, min, sec;
 	struct tm the_tm;
 	time_t convertedTime;
 	sprintf(convertTime, "%02x %02x %02x %02x %02x %02x\n",
-			micomTimeString[0], micomTimeString[1],
-			micomTimeString[2], micomTimeString[3],
-			micomTimeString[4], micomTimeString[5]);
+		micomTimeString[0], micomTimeString[1],
+		micomTimeString[2], micomTimeString[3],
+		micomTimeString[4], micomTimeString[5]);
 	sscanf(convertTime, "%d %d %d %d %d %d", &sec, &min, &hour, &day, &month, &year);
 	the_tm.tm_year = year + 100;
 	the_tm.tm_mon  = month - 1;
@@ -124,9 +126,9 @@
 	{
 		struct tm *wrong_tz_time_utc_tm;
 		struct tm *wrong_tz_time_local_tm;
-		wrong_tz_time_utc_tm = gmtime(&convertedTime);  //16:00:00
-		wrong_tz_time_local_tm = localtime(&convertedTime);  //18:00:00
-		convertedTime -= difftime(mktime(wrong_tz_time_local_tm), mktime(wrong_tz_time_utc_tm)); // -> local = 16:00:00 / utc = 14:00:00
+		wrong_tz_time_utc_tm = gmtime(&convertedTime); //16:00:00
+		wrong_tz_time_local_tm = localtime(&convertedTime); //18:00:00
+		convertedTime -= difftime(mktime(&wrong_tz_time_local_tm), mktime(&wrong_tz_time_utc_tm)); // -> local = 16:00:00 / utc = 14:00:00
 	}
 #endif
 	return convertedTime;
@@ -140,18 +142,20 @@
 	int vFd;
 	printf("%s\n", __func__);
 	vFd = open(cVFD_DEVICE, O_RDWR);
+
 	if (vFd < 0)
 	{
 		fprintf(stderr, "Cannot open %s\n", cVFD_DEVICE);
 		perror("");
 	}
+
 	((Model_t *)context->m)->private = private;
 	memset(private, 0, sizeof(tCUBEREVOPrivate));
 	checkConfig(&private->display, &private->display_custom, &private->timeFormat, &private->wakeupDecrement);
 	return vFd;
 }
 
-static int usage(Context_t *context, char *prg_name, char *cmd_name)
+static int usage(Context_t *context, char *prg_name)
 {
 	fprintf(stderr, "%s: not implemented\n", __func__);
 	return -1;
@@ -159,17 +163,19 @@
 
 static int setTime(Context_t *context, time_t *theGMTTime)
 {
-	struct	micom_ioctl_data vData;
+	struct micom_ioctl_data vData;
 	printf("%s ->\n", __func__);
 	setMicomTime(*theGMTTime, vData.u.time.time, 1);
 	fprintf(stderr, "Setting current Fp Time to: %s (mtime)\n", vData.u.time.time);
 #if 1
+
 	if (ioctl(context->fd, VFDSETTIME, &vData) < 0)
 	{
 		perror("setTime: ");
 		printf("%s <- -1\n", __func__);
 		return -1;
 	}
+
 #endif
 	printf("%s <- 0\n", __func__);
 	return 0;
@@ -177,10 +183,11 @@
 
 static int getTime(Context_t *context, time_t *theGMTTime)
 {
-	struct	micom_ioctl_data vData;
+	struct micom_ioctl_data vData;
 	printf("%s ->\n", __func__);
 	fprintf(stderr, "Getting current fp time...\n");
 #if 1
+
 	/* front controller time */
 	if (ioctl(context->fd, VFDGETTIME, &vData) < 0)
 	{
@@ -188,6 +195,7 @@
 		printf("%s <- -1\n", __func__);
 		return -1;
 	}
+
 #else
 	strncpy(vData.u.get_time.time, "111017182540", 12);
 #endif
@@ -202,12 +210,15 @@
 {
 	struct micom_ioctl_data vData;
 	fprintf(stderr, "Waiting for current wakeup-time from fp...\n");
+
 	/* front controller wake-up time */
 	if (ioctl(context->fd, VFDGETWAKEUPTIME, &vData) < 0)
 	{
 		perror("getWakeupTime: ");
 		return -1;
 	}
+
+	/* current front controller time */
 	*theGMTTime = (time_t)getMicomTime(vData.u.wakeup_time.time);
 	return 0;
 }
@@ -215,35 +226,34 @@
 static int setTimer(Context_t *context, time_t *theGMTTime)
 {
 	struct micom_ioctl_data vData;
-	time_t curTime    = 0;
-	time_t curTimeFp  = 0;
+	time_t curTime = 0;
+	time_t curTimeFp = 0;
 	time_t wakeupTime = 0;
 	struct tm *ts;
 	struct tm *tsFp;
 	struct tm *tsWakeupTime;
+	tCUBEREVOPrivate *private = (tCUBEREVOPrivate *)((Model_t *)context->m)->private;
 	printf("%s ->\n", __func__);
 	// Get current Frontpanel time
 	getTime(context, &curTimeFp);
 	tsFp = gmtime(&curTimeFp);
-	fprintf(stderr, "Current Fp Time:     %02d:%02d:%02d %02d-%02d-%04d (UTC)\n",
-			tsFp->tm_hour, tsFp->tm_min, tsFp->tm_sec,
-			tsFp->tm_mday, tsFp->tm_mon + 1, tsFp->tm_year + 1900);
+	fprintf(stderr, "Current Fp Time: %02d:%02d:%02d %02d-%02d-%04d (UTC)\n",
+		tsFp->tm_hour, tsFp->tm_min, tsFp->tm_sec,
+		tsFp->tm_mday, tsFp->tm_mon + 1, tsFp->tm_year + 1900);
 	// Get current Linux time
 	time(&curTime);
 	ts = gmtime(&curTime);
-	fprintf(stderr, "Current Linux Time:  %02d:%02d:%02d %02d-%02d-%04d (UTC)\n",
-			ts->tm_hour, ts->tm_min, ts->tm_sec,
-			ts->tm_mday, ts->tm_mon + 1, ts->tm_year + 1900);
+	fprintf(stderr, "Current Linux Time: %02d:%02d:%02d %02d-%02d-%04d (UTC)\n",
+		ts->tm_hour, ts->tm_min, ts->tm_sec,
+		ts->tm_mday, ts->tm_mon + 1, ts->tm_year + 1900);
 	// Set current Linux time as new current Frontpanel time
 	setTime(context, &curTime);
+
 	if (theGMTTime == NULL)
-	{
 		wakeupTime = read_timers_utc(curTime);
-	}
 	else
-	{
 		wakeupTime = *theGMTTime;
-	}
+
 	if ((wakeupTime == 0) || (wakeupTime == LONG_MAX))
 	{
 		/* clear timer */
@@ -254,27 +264,30 @@
 		// Print wakeup time
 		tsWakeupTime = gmtime(&wakeupTime);
 		fprintf(stderr, "Planned Wakeup Time: %02d:%02d:%02d %02d-%02d-%04d (UTC)\n",
-				tsWakeupTime->tm_hour, tsWakeupTime->tm_min, tsWakeupTime->tm_sec,
-				tsWakeupTime->tm_mday, tsWakeupTime->tm_mon + 1, tsWakeupTime->tm_year + 1900);
+			tsWakeupTime->tm_hour, tsWakeupTime->tm_min, tsWakeupTime->tm_sec,
+			tsWakeupTime->tm_mday, tsWakeupTime->tm_mon + 1, tsWakeupTime->tm_year + 1900);
 		setMicomTime(wakeupTime, vData.u.standby.time, 0);
 		fprintf(stderr, "Setting planned fp wakeup time to = %s (mtime)\n",
-				vData.u.standby.time);
+			vData.u.standby.time);
 	}
+
 	fprintf(stderr, "Entering deep standby, goodbye...\n");
 	fflush(stdout);
 	fflush(stderr);
 	sleep(2);
+
 	if (ioctl(context->fd, VFDSTANDBY, &vData) < 0)
 	{
 		perror("standby: ");
 		printf("%s <- -1\n", __func__);
 		return -1;
 	}
+
 	printf("%s <- 0\n", __func__);
 	return 0;
 }
 
-static int getWTime(Context_t *context, time_t *theGMTTime)
+static int getTimer(Context_t *context, time_t *theGMTTime)
 {
 	fprintf(stderr, "%s: not implemented\n", __func__);
 	return -1;
@@ -283,22 +296,26 @@
 static int shutdown(Context_t *context, time_t *shutdownTimeGMT)
 {
 	time_t curTime;
+
 	/* shutdown immediately */
 	if (*shutdownTimeGMT == -1)
-	{
 		return (setTimer(context, NULL));
-	}
+
 	while (1)
 	{
 		time(&curTime);
+
 		/*printf("curTime = %d, shutdown %d\n", curTime, *shutdownTimeGMT);*/
+
 		if (curTime >= *shutdownTimeGMT)
 		{
 			/* set most recent e2 timer and bye bye */
 			return (setTimer(context, NULL));
 		}
+
 		usleep(100000);
 	}
+
 	return -1;
 }
 
@@ -306,9 +323,11 @@
 {
 	time_t curTime;
 	struct micom_ioctl_data vData;
+
 	while (1)
 	{
 		time(&curTime);
+
 		if (curTime >= *rebootTimeGMT)
 		{
 			if (ioctl(context->fd, VFDREBOOT, &vData) < 0)
@@ -317,8 +336,10 @@
 				return -1;
 			}
 		}
+
 		usleep(100000);
 	}
+
 	return 0;
 }
 
@@ -336,15 +357,18 @@
 	tCUBEREVOPrivate *private = (tCUBEREVOPrivate *)((Model_t *)context->m)->private;
 	printf("%s\n", __func__);
 	vFd = open(cEVENT_DEVICE, O_RDWR);
+
 	if (vFd < 0)
 	{
 		fprintf(stderr, "cannot open %s\n", cEVENT_DEVICE);
 		perror("");
 		return -1;
 	}
+
 	Clear(context); /* clear display */
 	setIcon(context, 1, 1); /* show standby icon */
 	getVersion(context, &version);
+
 	/* 4char vfd's ? */
 	if ((version == 3) && (private->display))
 	{
@@ -355,10 +379,12 @@
 	{
 		setDisplayTime(context, 0);
 	}
+
 	while (sleep)
 	{
 		time(&curTime);
 		ts = localtime(&curTime);
+
 		if (curTime >= *wakeUpGMT)
 		{
 			sleep = 0;
@@ -370,13 +396,16 @@
 			tv.tv_sec = 0;
 			tv.tv_usec = 100000;
 			retval = select(vFd + 1, &rfds, NULL, NULL, &tv);
+
 			if (retval > 0)
 			{
 				rd = read(vFd, ev, sizeof(struct input_event) * 64);
+
 				if (rd < (int) sizeof(struct input_event))
 				{
 					continue;
 				}
+
 				for (i = 0; i < rd / sizeof(struct input_event); i++)
 				{
 					if (ev[i].type == EV_SYN)
@@ -388,13 +417,12 @@
 					else
 					{
 						if (ev[i].code == 116)
-						{
 							sleep = 0;
-						}
 					}
 				}
 			}
 		}
+
 		if ((private->display) && (version != 3))
 		{
 			/* show soft time with user format */
@@ -402,18 +430,19 @@
 			setText(context, output);
 		}
 	}
+
 	Clear(context); /* clear display */
 	setIcon(context, 1, 0); /* unshow standby icon */
+
 	if (version == 3)
-	{
 		setDisplayTime(context, 0);
-	}
+
 	return 0;
 }
 
 static int setText(Context_t *context, char *theText)
 {
-	char vHelp[cMAXCharsCuberevo + 1];
+	char vHelp[128];
 	strncpy(vHelp, theText, cMAXCharsCuberevo);
 	vHelp[cMAXCharsCuberevo] = '\0';
 	/* printf("%s, %d\n", vHelp, strlen(vHelp)); */
@@ -427,11 +456,13 @@
 	vData.u.led.led_nr = which;
 	vData.u.led.on = on;
 	setMode(context->fd);
+
 	if (ioctl(context->fd, VFDSETLED, &vData) < 0)
 	{
 		perror("setLed: ");
 		return -1;
 	}
+
 	return 0;
 }
 
@@ -440,11 +471,13 @@
 	struct micom_ioctl_data vData;
 	vData.u.rf.on = on;
 	setMode(context->fd);
+
 	if (ioctl(context->fd, VFDSETRF, &vData) < 0)
 	{
 		perror("setRFModulator: ");
 		return -1;
 	}
+
 	return 0;
 }
 
@@ -453,11 +486,13 @@
 	struct micom_ioctl_data vData;
 	vData.u.display_time.on = on;
 	setMode(context->fd);
+
 	if (ioctl(context->fd, VFDSETDISPLAYTIME, &vData) < 0)
 	{
 		perror("setDisplayTime: ");
 		return -1;
 	}
+
 	return 0;
 }
 
@@ -466,11 +501,13 @@
 	struct micom_ioctl_data vData;
 	vData.u.fan.on = on;
 	setMode(context->fd);
+
 	if (ioctl(context->fd, VFDSETFAN, &vData) < 0)
 	{
 		perror("setFan: ");
 		return -1;
 	}
+
 	return 0;
 }
 
@@ -479,42 +516,43 @@
 	struct micom_ioctl_data vData;
 	vData.u.time_mode.twentyFour = twentyFour;
 	setMode(context->fd);
+
 	if (ioctl(context->fd, VFDSETTIMEMODE, &vData) < 0)
 	{
 		perror("setTimeMode: ");
 		return -1;
 	}
+
 	return 0;
 }
 
 static int setBrightness(Context_t *context, int brightness)
 {
 	struct micom_ioctl_data vData;
+
 	if (brightness < 0 || brightness > 7)
-	{
 		return -1;
-	}
+
 	vData.u.brightness.level = brightness;
 	setMode(context->fd);
 	printf("%d\n", context->fd);
+
 	if (ioctl(context->fd, VFDBRIGHTNESS, &vData) < 0)
 	{
 		perror("setBrightness: ");
 		return -1;
 	}
+
 	return 0;
 }
 
 static int setLight(Context_t *context, int on)
 {
 	if (on)
-	{
 		setBrightness(context, 7);
-	}
 	else
-	{
 		setBrightness(context, 0);
-	}
+
 	return 0;
 }
 
@@ -527,20 +565,19 @@
 {
 	struct micom_ioctl_data vData;
 	fprintf(stderr, "Waiting for wakeupmode from fp...\n");
+
 	/* front controller data */
 	if (ioctl(context->fd, VFDGETWAKEUPMODE, &vData) < 0)
 	{
 		perror("getWakeupReason: ");
 		return -1;
 	}
+
 	if ((vData.u.status.status & 0xff) == 0x02)
-	{
 		*reason = TIMER;
-	}
 	else
-	{
 		*reason = NONE;
-	}
+
 	printf("Reason = 0x%x\n", *reason);
 	return 0;
 }
@@ -549,12 +586,14 @@
 {
 	struct micom_ioctl_data micom;
 	fprintf(stderr, "waiting on version from fp ...\n");
+
 	/* front controller time */
-	if (ioctl(context->fd, VFDGETVERSION_1, &micom) < 0)
+	if (ioctl(context->fd, VFDGETVERSION, &micom) < 0)
 	{
 		perror("getVersion: ");
 		return -1;
 	}
+
 	*version = micom.u.version.version;
 	printf("micom version = %d\n", micom.u.version.version);
 	return 0;
@@ -563,10 +602,10 @@
 static int Exit(Context_t *context)
 {
 	tCUBEREVOPrivate *private = (tCUBEREVOPrivate *)((Model_t *)context->m)->private;
+
 	if (context->fd > 0)
-	{
 		close(context->fd);
-	}
+
 	free(private);
 	exit(1);
 }
@@ -575,29 +614,33 @@
 {
 	struct vfd_ioctl_data data;
 	data.start = 0;
+
 	if (ioctl(context->fd, VFDDISPLAYWRITEONOFF, &data) < 0)
 	{
 		perror("Clear: ");
 		return -1;
 	}
+
 	return 0;
 }
 
 static int setLedBrightness(Context_t *context, int brightness)
 {
 	struct micom_ioctl_data vData;
+
 	if (brightness < 0 || brightness > 0xff)
-	{
 		return -1;
-	}
+
 	vData.u.brightness.level = brightness;
 	setMode(context->fd);
 	printf("%d\n", context->fd);
+
 	if (ioctl(context->fd, VFDLEDBRIGHTNESS, &vData) < 0)
 	{
 		perror("setLedBrightness: ");
 		return -1;
 	}
+
 	return 0;
 }
 
@@ -607,44 +650,44 @@
 	vData.u.icon.icon_nr = which;
 	vData.u.icon.on = on;
 	setMode(context->fd);
+
 	if (ioctl(context->fd, VFDICONDISPLAYONOFF, &vData) < 0)
 	{
 		perror("setIcon: ");
 		return -1;
 	}
+
 	return 0;
 }
 
 Model_t Cuberevo_model =
 {
-	.Name             = "CUBEREVO frontpanel control utility",
-	.Type             = Cuberevo,
-	.Init             = init,
-	.Clear            = Clear,
-	.Usage            = usage,
-	.SetTime          = setTime,
-	.GetTime          = getTime,
-	.SetTimer         = setTimer,
-	.GetWTime         = getWTime,
-	.SetWTime         = NULL,
-	.Shutdown         = shutdown,
-	.Reboot           = reboot,
-	.Sleep            = Sleep,
-	.SetText          = setText,
-	.SetLed           = setLed,
-	.SetIcon          = setIcon,
-	.SetBrightness    = setBrightness,
-	.GetWakeupReason  = getWakeupReason,
-	.SetLight         = setLight,
-	.SetLedBrightness = setLedBrightness,
-	.GetVersion       = getVersion,
-	.SetRF            = setRFModulator,
-	.SetFan           = setFan,
-	.GetWakeupTime    = getWakeupTime,
-	.SetDisplayTime   = setDisplayTime,
-	.SetTimeMode      = setTimeMode,
-#if defined MODEL_SPECIFIC
-	.ModelSpecific    = NULL,
-#endif
-	.Exit             = Exit
+	.Name                      = "CUBEREVO frontpanel control utility",
+	.Type                      = Cuberevo,
+	.Init                      = init,
+	.Clear                     = Clear,
+	.Usage                     = NULL,
+	.SetTime                   = setTime,
+	.GetTime                   = getTime,
+	.SetTimer                  = setTimer,
+	.GetTimer                  = getTimer,
+	.Shutdown                  = shutdown,
+	.Reboot                    = reboot,
+	.Sleep                     = Sleep,
+	.SetText                   = setText,
+	.SetLed                    = setLed,
+	.SetIcon                   = setIcon,
+	.SetBrightness             = setBrightness,
+	.SetPwrLed                 = NULL,
+	.GetWakeupReason           = getWakeupReason,
+	.SetLight                  = setLight,
+	.Exit                      = Exit,
+	.SetLedBrightness          = setLedBrightness,
+	.GetVersion                = getVersion,
+	.SetRF                     = setRFModulator,
+	.SetFan                    = setFan,
+	.GetWakeupTime             = getWakeupTime,
+	.SetDisplayTime            = setDisplayTime,
+	.SetTimeMode               = setTimeMode,
+	.private                   = NULL
 };
diff -Naur sh4-apps/tools/fp_control/Cuberevo.h apps/tools/fp_control/Cuberevo.h
--- sh4-apps/tools/fp_control/Cuberevo.h	2019-02-10 00:00:07.505796224 +0100
+++ apps/tools/fp_control/Cuberevo.h	2019-02-10 00:00:17.275527475 +0100
@@ -3,7 +3,7 @@
 
 /* ioctl numbers ->hacky */
 #define VFDBRIGHTNESS         0xc0425a03
-#define VFDPWRLED             0xc0425a04 /* added by zeroone, also used in fp_control/global.h ; set PowerLed Brightness on Fortis*/
+#define VFDPWRLED             0xc0425a04 /* added by zeroone, also used in fp_control/global.h ; set PowerLed Brightness on HDBOX*/
 #define VFDDRIVERINIT         0xc0425a08
 #define VFDICONDISPLAYONOFF   0xc0425a0a
 #define VFDDISPLAYWRITEONOFF  0xc0425a05
@@ -21,7 +21,7 @@
 #define VFDSETMODE            0xc0425aff
 
 #define VFDGETWAKEUPTIME      0xc0425b00
-#define VFDGETVERSION_1       0xc0425b01
+#define VFDGETVERSION         0xc0425b01
 #define VFDSETDISPLAYTIME     0xc0425b02
 #define VFDSETTIMEMODE        0xc0425b03
 
diff -Naur sh4-apps/tools/fp_control/Fortis.c apps/tools/fp_control/Fortis.c
--- sh4-apps/tools/fp_control/Fortis.c	2019-02-10 00:00:07.505796224 +0100
+++ apps/tools/fp_control/Fortis.c	2019-02-10 00:00:17.275527475 +0100
@@ -17,19 +17,9 @@
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
  *
- *****************************************************************************
- *
- * Changes
- *
- * Date     By              Description
- * --------------------------------------------------------------------------
- * 20130930 Audioniek       Fortis specific usage added.
- * 20170103 Audioniek       VFDTEST (-ms command) fixed.
- * 20170127 Audioniek       Get version fixed.
- *
- ****************************************************************************/
+ */
 
-/* ******************* includes ************************ */
+/******************** includes ************************ */
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -41,7 +31,6 @@
 #include <limits.h>
 #include <sys/ioctl.h>
 #include <linux/input.h>
-#include <math.h>
 
 #include "global.h"
 #include "Fortis.h"
@@ -49,64 +38,13 @@
 static int setText(Context_t *context, char *theText);
 static int Clear(Context_t *context);
 static int setIcon(Context_t *context, int which, int on);
-//extern int gmt_offset;
 
-/* ******************* constants ************************ */
+/******************** constants ************************ */
 
 #define cVFD_DEVICE "/dev/vfd"
-#define cRTC_OFFSET_FILE "/proc/stb/fp/rtc_offset"
 #define cEVENT_DEVICE "/dev/input/event0"
 
 #define cMAXCharsFortis 12
-#define VFDGETWAKEUPTIME        0xc0425b03 // added by audioniek
-
-typedef struct
-{
-	char *arg;
-	char *arg_long;
-	char *arg_description;
-} tArgs;
-
-tArgs vSArgs[] =
-{
-	{ "-e", "  --setTimer         * ", "Args: [time date]  Format: HH:MM:SS dd-mm-YYYY" },
-	{ "", "                         ", "      No arg: Set the most recent timer from e2 or neutrino" },
-	{ "", "                         ", "      to the frontcontroller and shutdown" },
-	{ "", "                         ", "      Arg time date: Set frontcontroller wake up time to" },
-	{ "", "                         ", "      time, shutdown, and wake up at given time" },
-	{ "-d", "  --shutdown         * ", "Args: None or [time date]  Format: HH:MM:SS dd-mm-YYYY" },
-	{ "", "                         ", "      No arg: Shut down immediately" },
-	{ "", "                         ", "      Arg time date: Shut down at given time/date" },
-	{ "-r", "  --reboot           * ", "Args: None" },
-	{ "", "                         ", "      No arg: Reboot immediately" },
-	{ "", "                         ", "      Arg time date: Reboot at given time/date" },
-	{ "-g", "  --getTime          *  ", "Args: None        Display currently set frontprocessor time" },
-	{ "-gs", " --getTimeAndSet    * ", "Args: None" },
-	{ "", "                         ", "      Set system time to current frontprocessor time" },
-	{ "", "                         ", "      WARNING: system date will be 01-01-1970!" },
-	{ "-gw", " --getWTime         * ", "Args: None        Get the current frontcontroller wake up time" },
-	{ "-st", " --setWakeTime      * ", "Args: time date   Format: HH:MM:SS dd-mm-YYYY" },
-	{ "", "                         ", "      Set the frontcontroller wake up time" },
-	{ "-s", "  --setTime          * ", "Args: time date   Format: HH:MM:SS dd-mm-YYYY" },
-	{ "", "                         ", "      Set the frontprocessor time" },
-	{ "-sst", "--setSystemTime    * ", "Args: None        Set front processor time to system time" },
-	{ "-p", "  --sleep            * ", "Args: time date   Format: HH:MM:SS dd-mm-YYYY" },
-	{ "", "                         ", "      Reboot receiver via fp at given time" },
-	{ "-t", "  --settext            ", "Args: text        Set text to frontpanel" },
-	{ "-l", "  --setLed             ", "Args: LED# int    LED#: int=brightness (0..31)" },
-	{ "-i", "  --setIcon            ", "Args: icon# 1|0   Set an icon on or off" },
-	{ "-b", "  --setBrightness      ", "Arg : 0..7        Set display brightness" },
-	{ "-w", "  --getWakeupReason    ", "Args: None        Get the wake up reason" },
-	{ "-L", "  --setLight           ", "Arg : 0|1         Set display on/off" },
-	{ "-c", "  --clear              ", "Args: None        Clear display, all icons and LEDs off" },
-	{ "-v", "  --version            ", "Args: None        Get version info from frontprocessor" },
-	{ "-tm", " --time_mode          ", "Args: 0/1         Set time mode" },
-#if defined MODEL_SPECIFIC
-	{ "-ms", " --model_specific     ", "Args: int1 [int2] [int3] ... [int16]   (note: input in hex)" },
-	{ "", "                         ", "                  Model specific test function" },
-#endif
-	{ NULL, NULL, NULL }
-};
 
 typedef struct
 {
@@ -123,23 +61,23 @@
 static void setMode(int fd)
 {
 	struct nuvoton_ioctl_data nuvoton;
-
 	nuvoton.u.mode.compat = 1;
+
 	if (ioctl(fd, VFDSETMODE, &nuvoton) < 0)
 	{
 		perror("Set compatibility mode");
 	}
 }
 
-unsigned long calcGetNuvotonTime(char *nuvotonTimeString)
+unsigned long getNuvotonTime(char *nuvotonTimeString)
 {
-	unsigned int    mjd     = ((nuvotonTimeString[0] & 0xFF) * 256) + (nuvotonTimeString[1] & 0xFF);
-	unsigned long   epoch   = ((mjd - 40587) * 86400);
-	unsigned int    hour    = nuvotonTimeString[2] & 0xFF;
-	unsigned int    min     = nuvotonTimeString[3] & 0xFF;
-	unsigned int    sec     = nuvotonTimeString[4] & 0xFF;
-
+	unsigned int mjd = ((nuvotonTimeString[0] & 0xFF) * 256) + (nuvotonTimeString[1] & 0xFF);
+	unsigned long epoch = ((mjd - 40587) * 86400);
+	unsigned int hour = nuvotonTimeString[2] & 0xFF;
+	unsigned int min = nuvotonTimeString[3] & 0xFF;
+	unsigned int sec = nuvotonTimeString[4] & 0xFF;
 	epoch += (hour * 3600 + min * 60 + sec);
+	printf("MJD = %d epoch = %ld, time = %02d:%02d:%02d\n", mjd, epoch, hour, min, sec);
 	return epoch;
 }
 
@@ -148,15 +86,15 @@
  * julian date). mjd is relative to gmt so theTime
  * must be in GMT/UTC.
  */
-void calcSetNuvotonTime(time_t theTime, char *destString)
+void setNuvotonTime(time_t theTime, char *destString)
 {
 	struct tm *now_tm;
-	int mjd;
-
 	now_tm = gmtime(&theTime);
-	mjd = (int)modJulianDate(now_tm);
-	destString[0] = (mjd >> 8);
-	destString[1] = (mjd & 0xff);
+	printf("Set Time (UTC): %02d:%02d:%02d %02d-%02d-%04d\n", now_tm->tm_hour, now_tm->tm_min, now_tm->tm_sec, now_tm->tm_mday, now_tm->tm_mon + 1, now_tm->tm_year + 1900);
+	double mjd = modJulianDate(now_tm);
+	int mjd_int = mjd;
+	destString[0] = (mjd_int >> 8);
+	destString[1] = (mjd_int & 0xff);
 	destString[2] = now_tm->tm_hour;
 	destString[3] = now_tm->tm_min;
 	destString[4] = now_tm->tm_sec;
@@ -168,313 +106,201 @@
 {
 	tFortisPrivate *private = malloc(sizeof(tFortisPrivate));
 	int vFd;
-
 	vFd = open(cVFD_DEVICE, O_RDWR);
+
 	if (vFd < 0)
 	{
 		fprintf(stderr, "Cannot open %s\n", cVFD_DEVICE);
 		perror("");
 	}
+
 	((Model_t *)context->m)->private = private;
 	memset(private, 0, sizeof(tFortisPrivate));
 	checkConfig(&private->display, &private->display_custom, &private->timeFormat, &private->wakeupDecrement);
 	return vFd;
 }
 
-static int usage(Context_t *context, char *prg_name, char *cmd_name)
+static int usage(Context_t *context, char *prg_name)
 {
-	int i;
-
-	fprintf(stderr, "Usage:\n\n");
-	fprintf(stderr, "%s argument [optarg1] [optarg2]\n", prg_name);
-	for (i = 0; ; i++)
-	{
-		if (vSArgs[i].arg == NULL)
-		{
-			break;
-		}
-		if ((cmd_name == NULL) || (strcmp(cmd_name, vSArgs[i].arg) == 0) || (strstr(vSArgs[i].arg_long, cmd_name) != NULL))
-		{
-			fprintf(stderr, "%s   %s   %s\n", vSArgs[i].arg, vSArgs[i].arg_long, vSArgs[i].arg_description);
-		}
-	}
-	fprintf(stderr, "Options marked * should be the only calling argument.\n");
-	return 0;
+	fprintf(stderr, "%s: not implemented\n", __func__);
+	return -1;
 }
 
 static int setTime(Context_t *context, time_t *theGMTTime)
 {
-	// -s command
 	struct nuvoton_ioctl_data vData;
+	setNuvotonTime(*theGMTTime, vData.u.time.time);
 
-	calcSetNuvotonTime(*theGMTTime, vData.u.time.time);
 	if (ioctl(context->fd, VFDSETTIME, &vData) < 0)
 	{
 		perror("Set time");
 		return -1;
 	}
-	return 0;
-}
-
-static int setSTime(Context_t *context, time_t *theGMTTime)
-{
-	// -sst command
-	time_t curTime;
-	char fp_time[8];
-	time_t curTimeFP;
-	struct tm *ts_gmt;
-	int gmt_offset;
-	int proc_fs;
-	FILE *proc_fs_file;
-
-	time(&curTime); // get system time in UTC
-	ts_gmt = gmtime(&curTime);
-	gmt_offset = get_GMT_offset(*ts_gmt);
-	printf("Current system time: %02d:%02d:%02d %02d-%02d-%04d (local)\n", ts_gmt->tm_hour + (gmt_offset / 3600), ts_gmt->tm_min, ts_gmt->tm_sec,
-		ts_gmt->tm_mday, ts_gmt->tm_mon + 1, ts_gmt->tm_year + 1900);
-	curTime += gmt_offset;
-	setTime(context, &curTime); // set fp clock to local time
-
-	/* Read fp time back */
-	if (ioctl(context->fd, VFDGETTIME, &fp_time) < 0)
-	{
-		perror("Gettime");
-		return -1;
-	}
-	curTimeFP = (time_t)calcGetNuvotonTime(fp_time);
-	ts_gmt = gmtime(&curTimeFP);
-	printf("Front panel time set to: %02d:%02d:%02d %02d-%02d-%04d (local)\n", ts_gmt->tm_hour, ts_gmt->tm_min, ts_gmt->tm_sec,
-		ts_gmt->tm_mday, ts_gmt->tm_mon + 1, ts_gmt->tm_year + 1900);
-
-	// write UTC offset to /proc/stb/fp/rtc_offset
-	proc_fs_file = fopen(cRTC_OFFSET_FILE, "w");
-	if (proc_fs_file == NULL)
-	{
-		perror("Open rtc_offset");
-		return -1;
-	}
-	proc_fs = fprintf(proc_fs_file, "%d", gmt_offset);
-	if (proc_fs < 0)
-	{
-		perror("Write rtc_offset");
-		return -1;
-	}
-	fclose(proc_fs_file);
-	printf("Note: /proc/stb/fp/rtc_offset set to: %+d seconds.\n", gmt_offset);
 
 	return 0;
 }
 
 static int getTime(Context_t *context, time_t *theGMTTime)
 {
-	// -g command
 	char fp_time[8];
+	fprintf(stderr, "waiting on current time from fp ...\n");
 
+	/* front controller time */
 	if (ioctl(context->fd, VFDGETTIME, &fp_time) < 0)
 	{
 		perror("Get time");
 		return -1;
 	}
+
 	/* if we get the fp time */
 	if (fp_time[0] != '\0')
 	{
-		*theGMTTime = (time_t)calcGetNuvotonTime(fp_time);
+		fprintf(stderr, "success reading time from fp\n");
+		/* current front controller time */
+		*theGMTTime = (time_t) getNuvotonTime(fp_time);
 	}
 	else
 	{
 		fprintf(stderr, "Error reading time from fp\n");
 		*theGMTTime = 0;
 	}
+
 	return 0;
 }
 
 static int setTimer(Context_t *context, time_t *theGMTTime)
 {
-	// -e command, OK
+	struct nuvoton_ioctl_data vData;
 	time_t curTime;
-	time_t curTimeFP = 0;
+	time_t curTimeFP;
 	time_t wakeupTime;
-	struct tm *ts_gmt;
-	int gmt_offset;
+	struct tm *ts;
 	struct tm *tsw;
-	struct nuvoton_ioctl_data vData;
+//	tFortisPrivate *private = (tFortisPrivate *)((Model_t *)context->m)->private;
+	time(&curTime);
+	ts = localtime(&curTime);
+	fprintf(stderr, "Current Time: %02d:%02d:%02d %02d-%02d-%04d\n",
+		ts->tm_hour, ts->tm_min, ts->tm_sec, ts->tm_mday, ts->tm_mon + 1, ts->tm_year + 1900);
+
+	if (theGMTTime == NULL)
+		wakeupTime = read_timers_utc(curTime);
+	else
+		wakeupTime = *theGMTTime;
 
-	time(&curTime); // get system time in UTC
-	ts_gmt = gmtime(&curTime);
-	gmt_offset = get_GMT_offset(*ts_gmt);
-	printf("Current system time: %02d:%02d:%02d %02d-%02d-%04d (local)\n", ts_gmt->tm_hour + (gmt_offset / 3600), ts_gmt->tm_min, ts_gmt->tm_sec,
-		ts_gmt->tm_mday, ts_gmt->tm_mon + 1, ts_gmt->tm_year + 1900);
+	tsw = localtime(&wakeupTime);
+	printf("wakeup Time: %02d:%02d:%02d %02d-%02d-%04d\n",
+	       tsw->tm_hour, tsw->tm_min, tsw->tm_sec, tsw->tm_mday, tsw->tm_mon + 1, tsw->tm_year + 1900);
+	tsw = localtime(&curTime);
+	printf("current Time: %02d:%02d:%02d %02d-%02d-%04d\n",
+	       tsw->tm_hour, tsw->tm_min, tsw->tm_sec, tsw->tm_mday, tsw->tm_mon + 1, tsw->tm_year + 1900);
+
+	//check --> WakupTime is set and larger curTime and no larger than a year in the future (gost)
+	if ((wakeupTime <= 0) || (curTime > wakeupTime) || (curTime < (wakeupTime - 25920000)))
+		//if ((wakeupTime <= 0) || (wakeupTime == LONG_MAX))
+	{
+		/* nothing to do for e2 */
+//		fprintf(stderr, "no e2 timer found clearing fp wakeup time ... good bye ...\n");
+//		vData.u.standby.time[0] = '\0';
+		fprintf(stderr, "no timer found ... good bye ...\n");
+		setNuvotonTime(wakeupTime, vData.u.standby.time);
 
-	if (theGMTTime == NULL) // -e no argument = shutdown until next e2/neutrino timer
-	{
-		wakeupTime = read_timers_utc(curTime); //get current 1st timer
-		wakeupTime += gmt_offset; // timers are stored in UTC
+		if (ioctl(context->fd, VFDSTANDBY, &vData) < 0)
+		{
+			perror("Standby");
+			return -1;
+		}
 	}
 	else
 	{
-		wakeupTime = *theGMTTime; //get specified time (assumed local)
-	}
-	curTime += gmt_offset;
-	// check --> wakeupTime is set and larger than curTime and no larger than 300 days in the future
-	// check --> there is no timer set
-	if ((wakeupTime <= 0) || ((wakeupTime == LONG_MAX)) || (curTime > wakeupTime) || (curTime < (wakeupTime - 25920000)))
-	{
-		/* shut down immedately */
-		printf("No timers set or 1st timer more than 300 days ahead,\nor all timer(s) in the past.\n");
-//		wakeupTime = read_fake_timer_utc(curTime) = gmt_offset; //Set wake up time to max. in the future
-		wakeupTime = LONG_MAX;
-	}
-	else // wake up time valid and in the coming 300 days
-	{
 		unsigned long diff;
 		char fp_time[8];
+		fprintf(stderr, "waiting on current time from fp ...\n");
 
-		/* Determine difference between system time and wake up time */
-		diff = (unsigned long int) wakeupTime - curTime;
-
-		/* Check if front panel clock is set properly */
+		/* front controller time */
 		if (ioctl(context->fd, VFDGETTIME, &fp_time) < 0)
 		{
 			perror("Gettime");
 			return -1;
 		}
 
+		/* difference from now to wake up */
+		diff = (unsigned long int) wakeupTime - curTime;
+
+		/* if we get the fp time */
 		if (fp_time[0] != '\0')
 		{
-			curTimeFP = (time_t)calcGetNuvotonTime(fp_time);
-			/* set FP-Time if system time is more than 1 hour off */
-			if (((curTimeFP - curTime) > 3600) || ((curTime - curTimeFP) > 3600))
+			fprintf(stderr, "success reading time from fp\n");
+			/* current front controller time */
+			curTimeFP = (time_t) getNuvotonTime(fp_time);
+
+			/* set FP-Time if curTime > or < 12h (gost)*/
+			if (((curTimeFP - curTime) > 43200) || ((curTime - curTimeFP) > 43200))
 			{
-				printf("Time difference between fp and system: %+d seconds.\n", (int)(curTimeFP - curTime));
-				setTime(context, &curTime); // sync fp clock
+				setTime(context, &curTime);
 				curTimeFP = curTime;
-				ts_gmt = gmtime(&curTimeFP);
-				printf("Front panel time corrected, set to: %02d:%02d:%02d %02d-%02d-%04d (local)\n",
-					ts_gmt->tm_hour, ts_gmt->tm_min, ts_gmt->tm_sec, ts_gmt->tm_mday, ts_gmt->tm_mon + 1, ts_gmt->tm_year + 1900);
 			}
+
+			tsw = gmtime(&curTimeFP);
+			printf("fp_time (UTC): %02d:%02d:%02d %02d-%02d-%04d\n", tsw->tm_hour, tsw->tm_min, tsw->tm_sec, tsw->tm_mday, tsw->tm_mon + 1, tsw->tm_year + 1900);
 		}
 		else
 		{
-			fprintf(stderr, "Error reading front panel time... using system time.\n");
-			curTimeFP = curTime;
+			fprintf(stderr, "error reading time ... assuming localtime\n");
+			/* noop current time already set */
 		}
+
 		wakeupTime = curTimeFP + diff;
-	}
+		setNuvotonTime(wakeupTime, vData.u.standby.time);
 
-	tsw = gmtime(&wakeupTime);
-	printf("Wake up Time: %02d:%02d:%02d %02d-%02d-%04d (local)\n", tsw->tm_hour, tsw->tm_min,
-		tsw->tm_sec, tsw->tm_mday, tsw->tm_mon + 1, tsw->tm_year + 1900);
-	calcSetNuvotonTime(wakeupTime, vData.u.standby.time);
-	sleep(1);
-	if (ioctl(context->fd, VFDSTANDBY, &vData) < 0)
-	{
-		perror("Shut down");
-		return -1;
+		if (ioctl(context->fd, VFDSTANDBY, &vData) < 0)
+		{
+			perror("Shut down until wake up time");
+			return -1;
+		}
 	}
-	return 0;
-}
 
-static int getWTime(Context_t *context, time_t *theGMTTime)
-{
-	//-gw command: VFDGETWAKEUPTIME not supported by older nuvotons
-	char fp_time[5];
-	time_t iTime;
-
-	/* front controller wake up time */
-	if (ioctl(context->fd, VFDGETWAKEUPTIME, &fp_time) < 0)
-	{
-		perror("Get wakeup time");
-		return -1;
-	}
-	/* if we get the fp wakeup time */
-	if (fp_time[0] != '\0')
-	{
-		iTime = (time_t)calcGetNuvotonTime(fp_time);
-		*theGMTTime = iTime;
-	}
-	else
-	{
-		fprintf(stderr, "Error reading wake up time from frontprocessor\n");
-		*theGMTTime = 0;
-		return -1;
-	}
 	return 0;
 }
 
-static int setWTime(Context_t *context, time_t *theGMTTime)
+static int getTimer(Context_t *context, time_t *theGMTTime)
 {
-	//-st command
-	struct nuvoton_ioctl_data vData;
-	struct tm *swtm;
-	int gmt_offset;
-	time_t wakeupTime;
-	int proc_fs;
-	FILE *proc_fs_file;
-
-	wakeupTime = *theGMTTime;
-	swtm = gmtime(&wakeupTime);
-	gmt_offset= get_GMT_offset(*swtm);
-	printf("Setting wake up time to %02d:%02d:%02d %02d-%02d-%04d (local, seconds ignored)\n", swtm->tm_hour + (gmt_offset / 3600),
-		swtm->tm_min, swtm->tm_sec, swtm->tm_mday, swtm->tm_mon + 1, swtm->tm_year + 1900);
-	wakeupTime += gmt_offset;
-
-	calcSetNuvotonTime(wakeupTime, vData.u.standby.time);
-	if (ioctl(context->fd, VFDSETPOWERONTIME, &vData) < 0)
-	{
-		perror("Set wake up time");
-		return -1;
-	}
-
-	// write UTC offset to /proc/stb/fp/rtc_offset
-	proc_fs_file = fopen(cRTC_OFFSET_FILE, "w");
-	if (proc_fs_file == NULL)
-	{
-		perror("Open rtc_offset");
-		return -1;
-	}
-	proc_fs = fprintf(proc_fs_file, "%d", gmt_offset);
-	if (proc_fs < 0)
-	{
-		perror("Write rtc_offset");
-		return -1;
-	}
-	fclose(proc_fs_file);
-	printf("Note: /proc/stb/fp/rtc_offset set to: %+d seconds.\n", gmt_offset);
-	return 0;
+	fprintf(stderr, "%s: not implemented\n", __func__);
+	return -1;
 }
 
 static int shutdown(Context_t *context, time_t *shutdownTimeGMT)
 {
-	// -d command to check
 	time_t curTime;
 
-	/* shutdown immediately */
+	/* shutdown immediate */
 	if (*shutdownTimeGMT == -1)
-	{
 		return (setTimer(context, NULL));
-	}
+
 	while (1)
 	{
 		time(&curTime);
+
 		if (curTime >= *shutdownTimeGMT)
 		{
 			/* set most recent e2 timer and shut down */
 			return (setTimer(context, NULL));
 		}
+
 		usleep(100000);
 	}
+
 	return -1;
 }
 
 static int reboot(Context_t *context, time_t *rebootTimeGMT)
 {
-	//-r command to check
 	time_t curTime;
 	struct nuvoton_ioctl_data vData;
 
 	while (1)
 	{
 		time(&curTime);
+
 		if (curTime >= *rebootTimeGMT)
 		{
 			if (ioctl(context->fd, VFDREBOOT, &vData) < 0)
@@ -483,39 +309,38 @@
 				return -1;
 			}
 		}
+
 		usleep(100000);
 	}
+
 	return 0;
 }
 
 static int Sleep(Context_t *context, time_t *wakeUpGMT)
 {
-	// -p command, to be checked
 	time_t curTime;
-	int gmt_offset;
-	struct tm *ts;
 	int sleep = 1;
+	int vFd;
 	fd_set rfds;
 	struct timeval tv;
-	int vFd;
 	int retval, i, rd;
+	struct tm *ts;
 	char output[cMAXCharsFortis + 1];
 	struct input_event ev[64];
-
 	tFortisPrivate *private = (tFortisPrivate *)((Model_t *)context->m)->private;
 	vFd = open(cEVENT_DEVICE, O_RDWR);
+
 	if (vFd < 0)
 	{
 		fprintf(stderr, "Cannot open %s\n", cEVENT_DEVICE);
 		perror("");
 		return -1;
 	}
+
 	while (sleep)
 	{
-		time(&curTime);  // get system time (UTC)
-		ts = gmtime(&curTime);
-		gmt_offset = get_GMT_offset(*ts);
-		curTime += gmt_offset;
+		time(&curTime);
+		ts = localtime(&curTime);
 
 		if (curTime >= *wakeUpGMT)
 		{
@@ -528,13 +353,16 @@
 			tv.tv_sec = 0;
 			tv.tv_usec = 100000;
 			retval = select(vFd + 1, &rfds, NULL, NULL, &tv);
+
 			if (retval > 0)
 			{
 				rd = read(vFd, ev, sizeof(struct input_event) * 64);
+
 				if (rd < (int) sizeof(struct input_event))
 				{
 					continue;
 				}
+
 				for (i = 0; i < rd / sizeof(struct input_event); i++)
 				{
 					if (ev[i].type == EV_SYN)
@@ -546,293 +374,160 @@
 					else
 					{
 						if (ev[i].code == 116)
-						{
 							sleep = 0;
-						}
 					}
 				}
 			}
 		}
+
 		if (private->display)
 		{
 			strftime(output, cMAXCharsFortis + 1, private->timeFormat, ts);
 			setText(context, output);
 		}
 	}
+
 	return 0;
 }
 
 static int setText(Context_t *context, char *theText)
 {
-	// -t command to check
 	char vHelp[128];
-
-//	strncpy(vHelp, theText, cMAXCharsFortis);
-	strncpy(vHelp, theText, 64);
-//	vHelp[cMAXCharsFortis] = '\0';
-	vHelp[64] = '\0';
+	strncpy(vHelp, theText, cMAXCharsFortis);
+	vHelp[cMAXCharsFortis] = '\0';
 	write(context->fd, vHelp, strlen(vHelp));
 	return 0;
 }
 
-static int setLed(Context_t *context, int which, int level)
+static int setLed(Context_t *context, int which, int on)
 {
-	// -l command, OK
 	struct nuvoton_ioctl_data vData;
-
-	if (level < 0 || level > 31)
-	{
-		printf("Illegal brightness level %d (valid is 0..31)\n", level);
-		return 0;
-	}
-
-	if (which < 8)
-	{
-		if (which < 0)
-		{
-			printf("Illegal LED number %d (valid is 0..7)\n", which);
-			return 0;
-		}
-		else
-		{
-			vData.u.led.led_nr = 1 << which; //LED# is bitwise in Fortis
-		}
-	}
-	else // allow more than one led to be set at once
-	{
-		vData.u.led.led_nr = which;
-	}
-
-	vData.u.led.on = level;
+	vData.u.led.led_nr = which;
+	vData.u.led.on = on;
 	setMode(context->fd);
+
 	if (ioctl(context->fd, VFDSETLED, &vData) < 0)
 	{
 		perror("SetLED");
 		return -1;
 	}
-	usleep(100000); //allow frontprocessor to keep up
+
 	return 0;
 }
 
 static int setIcon(Context_t *context, int which, int on)
 {
-	// -i command, OK
 	struct nuvoton_ioctl_data vData;
-
 	vData.u.icon.icon_nr = which;
 	vData.u.icon.on = on;
 	setMode(context->fd);
+
 	if (ioctl(context->fd, VFDICONDISPLAYONOFF, &vData) < 0)
 	{
 		perror("Set icon");
 		return -1;
 	}
+
 	return 0;
 }
 
 static int setBrightness(Context_t *context, int brightness)
 {
-	//-b command, OK
 	struct nuvoton_ioctl_data vData;
 
 	if (brightness < 0 || brightness > 7)
-	{
-		printf("Illegal brightness level %d (valid is 0..7)\n", brightness);
 		return -1;
-	}
+
 	vData.u.brightness.level = brightness;
 	setMode(context->fd);
+
 	if (ioctl(context->fd, VFDBRIGHTNESS, &vData) < 0)
 	{
 		perror("Set VFD brightness");
 		return -1;
 	}
+
 	return 0;
 }
 
 static int Clear(Context_t *context)
 {
-	// -c command, OK
 	int i;
-	int led_nr;
+	setText(context, "            ");
+	setBrightness(context, 7);
 
-	setText(context, "            ");  //show no text
-	led_nr = 1;
-	for (i = 0; i <= 7; i++)
-	{
-		setLed(context, led_nr, 0); //all leds off
-	}
-	for (i = 1; i < 40; i++) //all icons off
-	{
+	for (i = 1; i <= 6 ; i++)
+		setLed(context, i, 0);
+
+	for (i = 1; i <= 16 ; i++)
 		setIcon(context, i, 0);
-	}
+
 	return 0;
 }
 
-static int setLight(Context_t *context, int on)
+static int setPwrLed(Context_t *context, int pwrled)
 {
-	// -L command, OK
 	struct nuvoton_ioctl_data vData;
 
-	vData.u.light.onoff = on;
-//	setMode(context->fd);
-	if (ioctl(context->fd, VFDDISPLAYWRITEONOFF, &vData) < 0)
-	{
-		perror("Set light");
+	if (pwrled < 0 || pwrled > 15)
 		return -1;
-	}
-	return 0;
-}
 
-static int getWakeupReason(Context_t *context, eWakeupReason *reason)
-{
-	//-w command, OK
-	int mode = -1;
+	vData.u.pwrled.level = pwrled;
 
-	if (ioctl(context->fd, VFDGETWAKEUPMODE, &mode) < 0)
+	if (ioctl(context->fd, VFDPWRLED, &vData) < 0)
 	{
-		perror("Get wakeup reason");
+		perror("setpwrled: ");
 		return -1;
 	}
-	if (mode != '\0')  /* if we get a fp wake up reason */
-	{
-		*reason = mode & 0xff; //get LS byte
-	}
-	else
-	{
-		fprintf(stderr, "Error reading wakeup mode from frontprocessor\n");
-		*reason = 0;  //echo unknown
-	}
-	return 0;
-}
 
-static int getVersion(Context_t *context, int *version)
-{
-	//-v command
-	int fp_version;
-	int resellerID;
-
-	if (ioctl(context->fd, VFDGETVERSION, &fp_version, &resellerID) < 0) // get version info
-	{
-		perror("Get version info");
-		return -1;
-	}
-	if (fp_version != '\0')  /* if the version info is OK */
-	{
-		*version = fp_version;
-	}
-	else
-	{
-		*version = -1;
-	}
-	if (resellerID != '\0')  /* if the reseller info is OK */
-	{
-		printf("Reseller ID is %08X\n", resellerID);
-	}
-	else
-	{
-		printf("Reseller ID is unknown\n");
-	}
 	return 0;
 }
 
-static int setTimeMode(Context_t *context, int timemode)
+static int setLight(Context_t *context, int on)
 {
-	// -tm command, OK
-	struct nuvoton_ioctl_data vData;
+	if (on)
+		setBrightness(context, 7);
+	else
+		setBrightness(context, 0);
 
-	vData.u.timemode.timemode = timemode;
-//	setMode(context->fd);
-	if (ioctl(context->fd, VFDSETTIMEFORMAT, &vData) < 0)
-	{
-		perror("Set time mode");
-		return -1;
-	}
 	return 0;
 }
 
-#if defined MODEL_SPECIFIC
-static int modelSpecific(Context_t *context, char len, char *data)
-{
-	//-ms command
-	int i, res;
-	char testdata[18];
-
-	testdata[0] = len; // set length
-	
-	printf("nuvoton ioctl: VFDTEST (0x%08x) SOP CMD=", VFDTEST);
-	for (i = 0; i < len; i++)
-	{
-		testdata[i + 1] = data[i];
-		printf("0x%02x ", data[i] & 0xff);
-	}
-	printf("EOP\n");
-
-	memset(data, 0, 9);
-
-//	setMode(context->fd); //set mode 1
-
-	res = (ioctl(context->fd, VFDTEST, &testdata) < 0);
-
-	if (res < 0)
-	{
-		perror("Model specific");
-		return -1;
-	}
-	else
-	{
-		for (i = 0; i < ((testdata[1] == 1) ? 11 : 2); i++)
-		{
-			data[i] = testdata[i]; //return values
-		}
-	}
-	return testdata[0];
-}
-#endif
-
 static int Exit(Context_t *context)
 {
 	tFortisPrivate *private = (tFortisPrivate *)((Model_t *)context->m)->private;
 
 	if (context->fd > 0)
-	{
 		close(context->fd);
-	}
+
 	free(private);
-	return 1;
+	exit(1);
 }
 
 Model_t Fortis_model =
 {
-	.Name             = "Fortis frontpanel control utility",
-	.Type             = Fortis,
-	.Init             = init,
-	.Clear            = Clear,
-	.Usage            = usage,
-	.SetTime          = setTime,
-	.GetTime          = getTime,
-	.SetTimer         = setTimer,
-	.GetWTime         = getWTime,
-	.SetWTime         = setWTime,
-	.SetSTime         = setSTime,
-	.Shutdown         = shutdown,
-	.Reboot           = reboot,
-	.Sleep            = Sleep,
-	.SetText          = setText,
-	.SetLed           = setLed,
-	.SetIcon          = setIcon,
-	.SetBrightness    = setBrightness,
-	.GetWakeupReason  = getWakeupReason,
-	.SetLight         = setLight,
-	.SetLedBrightness = NULL,
-	.GetVersion       = getVersion,
-	.SetRF            = NULL,
-	.SetFan           = NULL,
-	.GetWakeupTime    = getWTime,
-	.SetDisplayTime   = NULL,
-	.SetTimeMode      = setTimeMode,
-#if defined MODEL_SPECIFIC
-	.ModelSpecific    = modelSpecific,
-#endif
-	.Exit             = Exit
+	.Name =                    "Fortis frontpanel control utility",
+	.Type =                    Fortis,
+	.Init =                    init,
+	.Clear =                   Clear,
+	.Usage =                   usage,
+	.SetTime =                 setTime,
+	.GetTime =                 getTime,
+	.SetTimer =                setTimer,
+	.GetTimer =                getTimer,
+	.Shutdown =                shutdown,
+	.Reboot =                  reboot,
+	.Sleep =                   Sleep,
+	.SetText =                 setText,
+	.SetLed =                  setLed,
+	.SetIcon =                 setIcon,
+	.SetBrightness =           setBrightness,
+	.SetPwrLed =               setPwrLed,
+	.SetLight =                setLight,
+	.Exit =                    Exit,
+	.SetLedBrightness =        NULL,
+	.GetVersion =              NULL,
+	.SetRF =                   NULL,
+	.SetFan =                  NULL,
+	.private =                 NULL
 };
diff -Naur sh4-apps/tools/fp_control/Fortis.h apps/tools/fp_control/Fortis.h
--- sh4-apps/tools/fp_control/Fortis.h	2019-02-10 00:00:07.505796224 +0100
+++ apps/tools/fp_control/Fortis.h	2019-02-10 00:00:17.275527475 +0100
@@ -1,6 +1,10 @@
 #ifndef __fortis__
 #define __fortis__
 
+#define VFDGETVERSION    0xc0425af7
+#define VFDGETWAKEUPTIME 0xc0425b03
+#define VFDSETTIMEMODE   0xc0425b04
+
 struct set_brightness_s
 {
 	int level;
@@ -18,14 +22,13 @@
 	int on;
 };
 
-struct set_light_s
+struct set_pwrled_s
 {
-	int onoff;
+	int level;
 };
 
 /* time must be given as follows:
- * time[0] = mjd high
- * time[1] = mjd low
+ * time[0] & time[1] = mjd ???
  * time[2] = hour
  * time[3] = min
  * time[4] = sec
@@ -49,18 +52,6 @@
 	int compat; /* 0 = compatibility mode to vfd driver; 1 = nuvoton mode */
 };
 
-struct set_timemode_s
-{
-	char timemode;
-};
-
-#if defined MODEL_SPECIFIC
-struct modelspecific_s
-{
-	char data[19]; //the bytes to send, and returned
-};
-#endif
-
 struct nuvoton_ioctl_data
 {
 	union
@@ -68,14 +59,10 @@
 		struct set_icon_s icon;
 		struct set_led_s led;
 		struct set_brightness_s brightness;
-		struct set_light_s light;
+		struct set_pwrled_s pwrled;
 		struct set_mode_s mode;
 		struct set_standby_s standby;
 		struct set_time_s time;
-		struct set_timemode_s timemode;
-#if defined MODEL_SPECIFIC
-		struct modelspecific_s modelspecific;
-#endif
 	} u;
 };
 
diff -Naur sh4-apps/tools/fp_control/fp_control.c apps/tools/fp_control/fp_control.c
--- sh4-apps/tools/fp_control/fp_control.c	2019-02-10 00:00:07.507796169 +0100
+++ apps/tools/fp_control/fp_control.c	2019-02-10 00:00:17.277527420 +0100
@@ -19,6 +19,12 @@
  *
  */
 
+/*
+ * added:
+ * powerLed intensity adjustment
+ * by zeroone
+ */
+
 #include <fcntl.h>
 #include <stdio.h>
 #include <stdlib.h>
@@ -34,10 +40,12 @@
 ////////////////////////////////////////////////////////////////////////////////////////////////////
 ////////////////////////////////////////////////////////////////////////////////////////////////////
 
-/* Software version of fp_control, please increase on every change */
-static const char *sw_version = "1.09Audioniek 20171024.1";
+/* software version of fp_control. please increase on every change */
+static const char *sw_version = "1.04";
+
 static eWakeupReason reason = 0;
 
+
 typedef struct
 {
 	char *arg;
@@ -45,104 +53,82 @@
 	char *arg_description;
 } tArgs;
 
-time_t *theGMTTime;
-//int gmt_offset;
-char vName[129] = "Unknown";
-int Vdisplay = 0; //
-int Vdisplay_custom = 0;
-char *VtimeFormat = "Unknown";
-int Vwakeup = 5 * 60; //default wakeup decrement in minutes
-const char *wakeupreason[8] = { "Unknown", "Power on", "From deep standby", "Timer", "Power switch", "Unknown", "Unknown", "Unknown" };
-
 tArgs vArgs[] =
 {
-	{ "-e", "  --setTimer         * ", "Args: None or [time date] in format HH:MM:SS dd-mm-YYYY \
-\n\tSet the most recent timer from e2 or neutrino to the frontcontroller and standby \
-\n\tSet the current frontcontroller wake-up time" 
+	{
+		"-e",  " --setTimer         ", "Args: No arguments or [time date] Format: HH:MM:SS dd-mm-YYYY \
+		\n\tSet the most recent timer from e2 or neutrino to the frontcontroller and standby \
+		\n\tSet the current frontcontroller wake-up time"
 	},
-	{ "-d", "  --shutDown         * ", "Args: [time date] Format: HH:MM:SS dd-mm-YYYY\n\tMimics shutdown command. Shutdown receiver via fc at given time." },
-	{ "-g", "  --getTime          * ", "Args: No arguments\n\tReturn current set frontcontroller time" },
-	{ "-gs", " --getTimeAndSet    * ", "Args: No arguments\n\tSet system time to current frontcontroller time" },
-	{ "-gw", " --getWakeupTime    * ", "Args: No arguments\n\tReturn current wakeup time" },
-	{ "-s", "  --setTime          * ", "Args: time date Format: HH:MM:SS dd-mm-YYYY\n\tSet the frontcontroller time" },
-	{ "-sst", "--setSystemTime    * ", "Args: No arguments\n\tSet the frontcontroller time equal to system time" },
-	{ "-gt", " --getWakeTime      * ", "Args: No arguments\n\tGet the frontcontroller wake up time" },
-	{ "-st", " --setWakeTime      * ", "Args: time date Format: HH:MM:SS dd-mm-YYYY\n\tSet the frontcontroller wake up time" },
-	{ "-r", "  --reboot           * ", "Args: time date Format: HH:MM:SS dd-mm-YYYY\n\tReboot receiver via fc at given time" },
-	{ "-p", "  --sleep            * ", "Args: time date Format: HH:MM:SS dd-mm-YYYY\n\tReboot receiver via fc at given time" },
-	{ "-t", "  --settext            ", "Arg : text\n\tSet text to frontpanel." },
-	{ "-l", "  --setLed             ", "Args: led on\n\tSet a led on or off" },
-	{ "-i", "  --setIcon            ", "Args: icon on\n\tSet an icon on or off" },
-	{ "-b", "  --setBrightness      ", "Arg : brightness 0..7\n\tSet display brightness" },
-	{ "-led", " --setLedBrightness   ", "Arg : brightness\n\tSet LED brightness" },
-	{ "-w", "  --getWakeupReason  * ", "Args: No arguments\n\tGet the wake-up reason" },
-	{ "-L", "  --setLight           ", "Arg : 0/1\n\tSet light" },
-	{ "-c", "  --clear              ", "Args: No arguments\n\tClear display, all icons and leds off" },
-	{ "-v", "  --version            ", "Args: No arguments\n\tGet version from fc" },
-	{ "-sf", " --setFan             ", "Arg : 0/1\n\tSet fan on/off" },
-	{ "-sr", " --setRF              ", "Arg : 0/1\n\tSet rf modulator on/off" },
-	{ "-dt", " --display_time       ", "Arg : 0/1\n\tSet time display on/off" },
-	{ "-tm", " --time_mode          ", "Arg : 0/1\n\tSet 12 or 24 hour time mode" },
-	{ "-V", "  --verbose            ", "Args: None\n\tVerbose operation" },
-#if defined MODEL_SPECIFIC
-	{ "-ms", " --set_model_specific ", "Args: int\n\tModel specific set function (note: hex input)" },
-#endif
+	{ "-d",  " --shutdown         ", "Args: [time date] Format: HH:MM:SS dd-mm-YYYY\n\tMimics shutdown command. Shutdown receiver via fc at given time." },
+	{ "-g",  " --getTime          ", "Args: No arguments\n\tReturn current set frontcontroller time" },
+	{ "-gs", " --getTimeAndSet    ", "Args: No arguments\n\tSet system time to current frontcontroller time" },
+	{ "-gw", " --getWakeupTime    ", "Args: No arguments\n\tReturn current wakeup time" },
+	{ "-s",  " --setTime          ", "Args: time date Format: HH:MM:SS dd-mm-YYYY\n\tSet the current frontcontroller time" },
+	{ "-gt", " --getTimer         ", "Args: No arguments\n\tGet the current frontcontroller wake-up time" },
+	{ "-r",  " --reboot           ", "Args: time date Format: HH:MM:SS dd-mm-YYYY\n\tReboot receiver via fc at given time" },
+	{ "-p",  " --sleep            ", "Args: time date Format: HH:MM:SS dd-mm-YYYY\n\tReboot receiver via fc at given time" },
+	{ "-t",  " --settext          ", "Args: text\n\tSet text to frontpanel." },
+	{ "-l",  " --setLed           ", "Args: led on\n\tSet a led on or off" },
+	{ "-i",  " --setIcon          ", "Args: icon on\n\tSet an icon on or off" },
+	{ "-b",  " --setBrightness    ", "Args: brightness\n\tSet display brightness" },
+	{ "-P",  " --setPwrLed        ", "Args: 0..15\n\tSet PowerLed brightness" },
+	{ "-w",  " --getWakeupReason  ", "Args: No arguments\n\tGet the wake-up reason" },
+	{ "-L",  " --setLight         ", "Args: 0/1\n\tSet light" },
+	{ "-c",  " --clear            ", "Args: No argumens\n\tClear display, all icons and leds off" },
+	{ "-v",  " --version          ", "Args: No argumens\n\tGet version from fc" },
+	{ "-sf", " --setFan           ", "Args: 0/1\n\tset fan on/off" },
+	{ "-sr", " --setRF            ", "Args: 0/1\n\tset rf modulator on/off" },
+	{ "-dt", " --display_timer    ", "Args: 0/1\n\tset display time on/off" },
+	{ "-tm", " --time_mode        ", "Args: 0/1\n\ttoggle 12/24 hour mode" },
 	{ NULL, NULL, NULL }
 };
 
+const char *wakeupreason[8] = { "unknown", "poweron", "standby", "timer", "powerswitch", "unknown", "unknown", "unknown" };
 
-int usage(Context_t *context, char *prg, char *cmd)
+void usage(Context_t *context, char *prg, char *cmd)
 {
 	/* let the model print out what it can handle in reality */
-	if ((((Model_t *)context->m)->Usage == NULL)
-	|| (((Model_t *)context->m)->Usage(context, prg, cmd) < 0))
+	if ((((Model_t *)context->m)->Usage == NULL) || (((Model_t *)context->m)->Usage(context, prg) < 0))
 	{
 		int i;
 		/* or printout a default usage */
 		fprintf(stderr, "General usage:\n\n");
 		fprintf(stderr, "%s argument [optarg1] [optarg2]\n", prg);
+
 		for (i = 0; ; i++)
 		{
 			if (vArgs[i].arg == NULL)
-			{
 				break;
-			}
+
 			if ((cmd == NULL) || (strcmp(cmd, vArgs[i].arg) == 0) || (strstr(vArgs[i].arg_long, cmd) != NULL))
-			{
-				fprintf(stderr, "%s   %s   %s\n", vArgs[i].arg, vArgs[i].arg_long, vArgs[i].arg_description);
-			}
+				fprintf(stderr, "%s %s %s\n", vArgs[i].arg, vArgs[i].arg_long, vArgs[i].arg_description);
 		}
-		fprintf(stderr, "Options marked * should be the only calling argument.\n");
 	}
+
 	if (((Model_t *)context->m)->Exit)
-	{
 		((Model_t *)context->m)->Exit(context);
-	}
+
 	exit(1);
 }
 
 ////////////////////////////////////////////////////////////////////////////////////////////////////
 ////////////////////////////////////////////////////////////////////////////////////////////////////
 
-void getTimeFromArg(char *timeStr, char *dateStr, time_t *theTime)
+/* FIXME: check if this function is correct and delivers gmt time */
+void getTimeFromArg(char *timeStr, char *dateStr, time_t *theGMTTime)
 {
-	struct tm thetempTime;
-
-	sscanf(timeStr, "%d:%d:%d", &thetempTime.tm_hour, &thetempTime.tm_min, &thetempTime.tm_sec);
-	sscanf(dateStr, "%d-%d-%d", &thetempTime.tm_mday, &thetempTime.tm_mon, &thetempTime.tm_year);
-	thetempTime.tm_year -= 1900;
-	thetempTime.tm_mon  -= 1;
-#if 0
-	thetempTime.tm_isdst = -1; /* say mktime that we do not know */
-//	/* FIXME: hmm this is not a gmt or, isn't it? */
-	theTime = mktime(&thetempTime);
-#else
-	/* FIXED: indeed, but this one is... */
-	*theTime = modJulianDate(&thetempTime) * 86400;
-	*theTime += thetempTime.tm_hour * 3600;
-	*theTime += thetempTime.tm_min * 60;
-	*theTime += thetempTime.tm_sec;
-#endif
+	struct tm theTime;
+//	printf("%s\n", __func__);
+	sscanf(timeStr, "%d:%d:%d", &theTime.tm_hour, &theTime.tm_min, &theTime.tm_sec);
+	sscanf(dateStr, "%d-%d-%d", &theTime.tm_mday, &theTime.tm_mon, &theTime.tm_year);
+	theTime.tm_year -= 1900;
+	theTime.tm_mon = theTime.tm_mon - 1;
+	theTime.tm_isdst = -1; /* say mktime that we do not know */
+	/* FIXME: hmm this is not a gmt or, isn't it? */
+	*theGMTTime = mktime(&theTime);
+	/* new_time = localtime(&dummy);*/
+//	printf("%s <\n", __func__);
 }
 
 ////////////////////////////////////////////////////////////////////////////////////////////////////
@@ -153,42 +139,38 @@
 	int i;
 
 	if (((Model_t *)context->m)->Init)
-	{
 		context->fd = ((Model_t *)context->m)->Init(context);
-	}
+
 	if (argc > 1)
 	{
 		i = 1;
-		while (argc > i)
+
+		while (i < argc)
 		{
-			if ((strcmp(argv[i], "-V") == 0) || (strcmp(argv[i], "--verbose") == 0))
-			{
-				/* switch verbose on */
-				disp = 1;
-			}
-			else if ((strcmp(argv[i], "-e") == 0) || (strcmp(argv[i], "--setTimer") == 0))
+			if ((strcmp(argv[i], "-e") == 0) || (strcmp(argv[i], "--setTimer") == 0))
 			{
 				if (argc == 4)
 				{
 					time_t theGMTTime;
 					getTimeFromArg(argv[i + 1], argv[i + 2], &theGMTTime);
+
 					/* set the frontcontroller timer from args */
 					if (((Model_t *)context->m)->SetTimer)((Model_t *)context->m)->SetTimer(context, &theGMTTime);
+
 					i += 2;
 				}
 				else if (argc == 2)
 				{
 					/* setup timer; wake-up time will be read */
-					if (((Model_t *)context->m)->SetTimer)((Model_t *)context->m)->SetTimer(context, NULL);
+					if (((Model_t *)context->m)->SetTimer)
+						((Model_t *)context->m)->SetTimer(context, NULL);
 				}
 				else
-				{
-					usage(context, argv[0], argv[i]);
-				}
+					usage(context, argv[0], argv[1]);
 			}
 			else if ((strcmp(argv[i], "-g") == 0) || (strcmp(argv[i], "--getTime") == 0))
 			{
-				time_t theGMTTime;  //TODO: print time according to receiver mask
+				time_t theGMTTime;
 
 				/* get the frontcontroller time */
 				if (((Model_t *)context->m)->GetTime)
@@ -196,8 +178,8 @@
 					if (((Model_t *)context->m)->GetTime(context, &theGMTTime) == 0)
 					{
 						struct tm *gmt = gmtime(&theGMTTime);
-						printf("Current front processor time: %02d:%02d:%02d %02d-%02d-%04d\n",
-							   gmt->tm_hour, gmt->tm_min, gmt->tm_sec, gmt->tm_mday, gmt->tm_mon + 1, gmt->tm_year + 1900);
+						fprintf(stderr, "Current Time: %02d:%02d:%02d %02d-%02d-%04d\n",
+							gmt->tm_hour, gmt->tm_min, gmt->tm_sec, gmt->tm_mday, gmt->tm_mon + 1, gmt->tm_year + 1900);
 					}
 				}
 			}
@@ -210,45 +192,34 @@
 				{
 					if (((Model_t *)context->m)->GetTime(context, &theGMTTime) == 0)
 					{
-						/* FIXME/CAUTION: assumes frontprocessor time is local and not UTC */
 						struct tm *gmt = gmtime(&theGMTTime);
-
-						printf("Setting system time to current frontpanel time: %02d:%02d:%02d %02d-%02d-%04d\n",
-								gmt->tm_hour, gmt->tm_min, gmt->tm_sec, gmt->tm_mday, gmt->tm_mon + 1, gmt->tm_year + 1900);
+#if 0
+						struct timeval tv;
+						time_t allsec;
+						allsec = mktime(gmt);
+						tv.tv_sec = allsec;
+						settimeofday(&tv, 0); // only works on spark, so we make a system-call later
+#endif
+						fprintf(stderr, "Setting RTC to current frontpanel time: %02d:%02d:%02d %02d-%02d-%04d\n",
+							gmt->tm_hour, gmt->tm_min, gmt->tm_sec, gmt->tm_mday, gmt->tm_mon + 1, gmt->tm_year + 1900);
 						char cmd[50];
 						sprintf(cmd, "date -s %04d.%02d.%02d-%02d:%02d:%02d\n", gmt->tm_year + 1900, gmt->tm_mon + 1, gmt->tm_mday, gmt->tm_hour, gmt->tm_min, gmt->tm_sec);
 						system(cmd);
 					}
 				}
 			}
-			else if ((strcmp(argv[i], "-gt") == 0) || (strcmp(argv[i], "--getWakeTime") == 0))
-			{
-				time_t theGMTTime;
-
-				/* get the current wake up time from frontcontroller */
-				if (((Model_t *)context->m)->GetWTime)
-				{
-					if (((Model_t *)context->m)->GetWTime(context, &theGMTTime) == 0)
-					{
-						struct tm *gmt = gmtime(&theGMTTime);
-						fprintf(stderr, "Current wake up time: %02d:%02d:%02d %02d-%02d-%04d\n",
-								gmt->tm_hour, gmt->tm_min, gmt->tm_sec, gmt->tm_mday, gmt->tm_mon + 1, gmt->tm_year + 1900);
-					}
-				}
-			}
 			else if ((strcmp(argv[i], "-gw") == 0) || (strcmp(argv[i], "--getWakeupTime") == 0))
 			{
 				time_t theGMTTime;
 
 				/* get the frontcontroller wakeup time */
-				if (((Model_t*)context->m)->GetWakeupTime)
+				if (((Model_t *)context->m)->GetWakeupTime)
 				{
-					if (((Model_t*)context->m)->GetWakeupTime(context, &theGMTTime) == 0)
+					if (((Model_t *)context->m)->GetWakeupTime(context, &theGMTTime) == 0)
 					{
 						struct tm *gmt = gmtime(&theGMTTime);
-
 						fprintf(stderr, "Wakeup Time: %02d:%02d:%02d %02d-%02d-%04d\n",
-							gmt->tm_hour, gmt->tm_min, gmt->tm_sec, gmt->tm_mday, gmt->tm_mon+1, gmt->tm_year+1900);
+							gmt->tm_hour, gmt->tm_min, gmt->tm_sec, gmt->tm_mday, gmt->tm_mon + 1, gmt->tm_year + 1900);
 					}
 				}
 			}
@@ -259,46 +230,30 @@
 				if (argc == 4)
 				{
 					getTimeFromArg(argv[i + 1], argv[i + 2], &theGMTTime);
+
 					/* set the frontcontroller time */
 					if (((Model_t *)context->m)->SetTime)
-					{
 						((Model_t *)context->m)->SetTime(context, &theGMTTime);
-					}
-					else
-					{
-						usage(context, argv[0], argv[i]);
-					}
 				}
+				else
+					usage(context, argv[0], argv[1]);
+
 				i += 2;
 			}
-			else if ((strcmp(argv[i], "-sst") == 0) || (strcmp(argv[i], "--setSystemTime") == 0))
+			else if ((strcmp(argv[i], "-gt") == 0) || (strcmp(argv[i], "--getTimer") == 0))
 			{
 				time_t theGMTTime;
 
-				/* set the frontcontroller time to system time */
-				if (((Model_t *)context->m)->SetSTime)
+				/* get the current timer value from frontcontroller */
+				if (((Model_t *)context->m)->GetTimer)
 				{
-					((Model_t *)context->m)->SetSTime(context, &theGMTTime);
-				}
-			}
-			else if ((strcmp(argv[i], "-st") == 0) || (strcmp(argv[i], "--setWakeTime") == 0))
-			{
-				time_t theLocalTime;
-
-				if (argc == 4)
-				{
-					getTimeFromArg(argv[i + 1], argv[i + 2], &theLocalTime);
-					/* set the frontcontroller wake up time */
-					if (((Model_t *)context->m)->SetWTime)
+					if (((Model_t *)context->m)->GetTimer(context, &theGMTTime) == 0)
 					{
-						((Model_t *)context->m)->SetWTime(context, &theLocalTime);
-					}
-					else
-					{
-						usage(context, argv[0], argv[i]);
+						struct tm *gmt = gmtime(&theGMTTime);
+						fprintf(stderr, "Current Timer: %02d:%02d:%02d %02d-%02d-%04d\n",
+							gmt->tm_hour, gmt->tm_min, gmt->tm_sec, gmt->tm_mday, gmt->tm_mon + 1, gmt->tm_year + 1900);
 					}
 				}
-				i += 2;
 			}
 			else if ((strcmp(argv[i], "-d") == 0) || (strcmp(argv[i], "--shutDown") == 0))
 			{
@@ -307,25 +262,22 @@
 				if (argc == 4)
 				{
 					getTimeFromArg(argv[i + 1], argv[i + 2], &theGMTTime);
+
 					/* shutdown at the given time */
 					if (((Model_t *)context->m)->Shutdown)
-					{
 						((Model_t *)context->m)->Shutdown(context, &theGMTTime);
-					}
 				}
 				else if (argc == 2)
 				{
 					theGMTTime = -1;
+
 					/* shutdown immediately */
 					if (((Model_t *)context->m)->Shutdown)
-					{
 						((Model_t *)context->m)->Shutdown(context, &theGMTTime);
-					}
 				}
 				else
-				{
-					usage(context, argv[0], argv[i]);
-				}
+					usage(context, argv[0], argv[1]);
+
 				i += 2;
 			}
 			else if ((strcmp(argv[i], "-r") == 0) || (strcmp(argv[i], "--reboot") == 0))
@@ -335,27 +287,15 @@
 				if (argc == 4)
 				{
 					getTimeFromArg(argv[i + 1], argv[i + 2], &theGMTTime);
+
 					/* reboot at the given time */
 					if (((Model_t *)context->m)->Reboot)
-					{
 						((Model_t *)context->m)->Reboot(context, &theGMTTime);
-					}
-					i += 2;
-				}
-				else if (argc == 2)
-				{
-					theGMTTime = -1;
-					/* reboot immediately */
-					printf("Receiver: %s\n", vName);
-					if (((Model_t *)context->m)->Reboot)
-					{
-						((Model_t *)context->m)->Reboot(context, &theGMTTime);
-					}
 				}
 				else
-				{
-					usage(context, argv[0], argv[i]);
-				}
+					usage(context, argv[0], argv[1]);
+
+				i += 2;
 			}
 			else if ((strcmp(argv[i], "-p") == 0) || (strcmp(argv[i], "--sleep") == 0))
 			{
@@ -364,334 +304,206 @@
 				if (argc == 4)
 				{
 					getTimeFromArg(argv[i + 1], argv[i + 2], &theGMTTime);
+
 					/* sleep for a while, or wake-up on another reason (rc ...) */
 					if (((Model_t *)context->m)->Sleep)
 						((Model_t *)context->m)->Sleep(context, &theGMTTime);
 				}
 				else
-				{
-					usage(context, argv[0], argv[i]);
-				}
+					usage(context, argv[0], argv[1]);
+
 				i += 2;
 			}
 			else if ((strcmp(argv[i], "-t") == 0) || (strcmp(argv[i], "--settext") == 0))
 			{
-				if (argc >= i + 1)
-				{
-					if ((argc - i) == 1)
-					{
-						usage(context, argv[0], argv[i]);
-					}
+				if (i + 1 <= argc)
+
 					/* set display text */
 					if (((Model_t *)context->m)->SetText)
-					{
 						((Model_t *)context->m)->SetText(context, argv[i + 1]);
-					}
-				}
+
 				i += 1;
 			}
 			else if ((strcmp(argv[i], "-l") == 0) || (strcmp(argv[i], "--setLed") == 0))
 			{
-				if (argc >= i + 2)
+				if (i + 2 <= argc)
 				{
 					int which, on;
-
 					which = atoi(argv[i + 1]);
-					if ((argc - i) == 2)
-					{
-						usage(context, argv[0], argv[i]);
-					}
 					on = atoi(argv[i + 2]);
+					i += 2;
+
 					/* set display led */
 					if (((Model_t *)context->m)->SetLed)
-					{
 						((Model_t *)context->m)->SetLed(context, which, on);
-					}
-				}
-				else
-				{
-					usage(context, argv[0], argv[i]);
 				}
+
 				i += 2;
 			}
 			else if ((strcmp(argv[i], "-i") == 0) || (strcmp(argv[i], "--setIcon") == 0))
 			{
-				if (argc >= i + 2)
+				if (i + 2 <= argc)
 				{
 					int which, on;
-
 					which = atoi(argv[i + 1]);
-					if ((argc - i) == 2)
-					{
-						usage(context, argv[0], argv[i]);
-					}
 					on = atoi(argv[i + 2]);
+
 					/* set display icon */
 					if (((Model_t *)context->m)->SetIcon)
-					{
 						((Model_t *)context->m)->SetIcon(context, which, on);
-					}
-				}
-				else
-				{
-					usage(context, argv[0], argv[i]);
 				}
+
 				i += 2;
 			}
 			else if ((strcmp(argv[i], "-b") == 0) || (strcmp(argv[i], "--setBrightness") == 0))
 			{
-				if (argc >= i + 1)
+				if (i + 1 <= argc)
 				{
 					int brightness;
-
-					if ((argc - i) == 1)
-					{
-						usage(context, argv[0], argv[i]);
-					}
 					brightness = atoi(argv[i + 1]);
+
 					/* set display brightness */
 					if (((Model_t *)context->m)->SetBrightness)
-					{
 						((Model_t *)context->m)->SetBrightness(context, brightness);
-					}
 				}
+
 				i += 1;
 			}
+			/* added by zeroone; set PowerLed Brightness on HDBOX*/
+			// BEGIN SetPwrLed
+			else if ((strcmp(argv[i], "-P") == 0) || (strcmp(argv[i], "--setPwrLed") == 0))
+			{
+				if (i + 1 <= argc)
+				{
+					int brightness;
+					brightness = atoi(argv[i + 1]);
+
+					/* set PwrLed Brightness icon */
+					if (((Model_t *)context->m)->SetPwrLed)
+						((Model_t *)context->m)->SetPwrLed(context, brightness);
+				}
+
+				i += 1;
+			}
+			// END SetPwrLed
 			else if ((strcmp(argv[i], "-w") == 0) || (strcmp(argv[i], "--getWakeupReason") == 0))
 			{
 				int ret = -1;
 
 				if (((Model_t *)context->m)->GetWakeupReason)
-				{
 					ret = ((Model_t *)context->m)->GetWakeupReason(context, &reason);
-				}
 				else
-				{
 					ret = getWakeupReasonPseudo(&reason);
-				}
+
 				if (ret == 0)
 				{
 					printf("Wakeup reason = %d (%s)\n\n", reason & 0x07, wakeupreason[reason & 0x07]);
-					syncWasTimerWakeup((eWakeupReason)reason);
+					syncWasTimerWakeup(reason);
 				}
 			}
 			else if ((strcmp(argv[i], "-L") == 0) || (strcmp(argv[i], "--setLight") == 0))
 			{
-				if (argc >= i + 1)
+				if (i + 1 < argc)
 				{
 					int on;
-
-					if ((argc - i) == 1)
-					{
-						usage(context, argv[0], argv[i]);
-					}
 					on = atoi(argv[i + 1]);
+
+					/* set brightness on/off */
 					if (((Model_t *)context->m)->SetLight)
-					{
 						((Model_t *)context->m)->SetLight(context, on);
-					}
 				}
+
 				i += 1;
 			}
 			else if ((strcmp(argv[i], "-c") == 0) || (strcmp(argv[i], "--clear") == 0))
 			{
 				/* clear the display */
 				if (((Model_t *)context->m)->Clear)
-				{
 					((Model_t *)context->m)->Clear(context);
-				}
 			}
 			else if ((strcmp(argv[i], "-led") == 0) || (strcmp(argv[i], "--setLedBrightness") == 0))
 			{
-				if (argc >= i + 1)
+				if (i + 1 <= argc)
 				{
 					/* set LED brightness */
 					int brightness;
-
-					if ((argc - i) == 1)
-					{
-						usage(context, argv[0], argv[i]);
-					}
 					brightness = atoi(argv[i + 1]);
+
 					if (((Model_t *)context->m)->SetLedBrightness)
-					{
 						((Model_t *)context->m)->SetLedBrightness(context, brightness);
-					}
 				}
+
 				i += 1;
 			}
 			else if ((strcmp(argv[i], "-v") == 0) || (strcmp(argv[i], "--version") == 0))
 			{
-				int version = -1;
+				int version;
 
-				if (!disp)
-				{
-					printf("\nProgram version info:\n");
-					printf("fp_control version %s\n", sw_version);
-					printf("\nConfiguration of receiver:\n");
-					printf("Display      : %d  Time format: %s", Vdisplay, VtimeFormat);
-					printf("Displaycustom: %d  Wakeupdecrement: %d minute(s)", Vdisplay_custom, Vwakeup / 60);
-					if (Vwakeup % 60 != 0)
-					{
-						printf(" %d second(s)\n\n", Vwakeup % 60);
-					}
-					else
-					{
-						printf("\n\n");
-					}
-				}
-				/* get FP version info */
+				/* get version */
 				if (((Model_t *)context->m)->GetVersion)
-				{
 					((Model_t *)context->m)->GetVersion(context, &version);
-				}
-				if (version == -1)
-				{
-					printf("Remark: FP version is unknown\n");
-				}
-				else
-				{
-					printf("FP version is %d.%02d\n", (version / 100) & 0xff, (version % 100) & 0xff);
-				}
 			}
 			else if ((strcmp(argv[i], "-sf") == 0) || (strcmp(argv[i], "--setFan") == 0))
 			{
-				if (argc >= i + 1)
+				if (i + 1 <= argc)
 				{
 					int on;
-
-					if ((argc - i) == 1)
-					{
-						usage(context, argv[0], argv[i]);
-					}
 					on = atoi(argv[i + 1]);
+
 					/* set fan on/off */
 					if (((Model_t *)context->m)->SetFan)
-					{
 						((Model_t *)context->m)->SetFan(context, on);
-					}
 				}
+
 				i += 1;
 			}
 			else if ((strcmp(argv[i], "-sr") == 0) || (strcmp(argv[i], "--setRF") == 0))
 			{
-				if (argc >= i + 1)
+				if (i + 1 <= argc)
 				{
 					int on;
-
-					if ((argc - i) == 1)
-					{
-						usage(context, argv[0], argv[i]);
-					}
 					on = atoi(argv[i + 1]);
+
 					/* set rf on/off */
 					if (((Model_t *)context->m)->SetRF)
-					{
 						((Model_t *)context->m)->SetRF(context, on);
-					}
 				}
-				i += 1;
+
+				i += 2;
 			}
 			else if ((strcmp(argv[i], "-dt") == 0) || (strcmp(argv[i], "--display_time") == 0))
 			{
-				if (argc >= i + 1)
+				if (i + 1 <= argc)
 				{
 					int on;
-
-					if ((argc - i) == 1)
-					{
-						usage(context, argv[0], argv[i]);
-					}
 					on = atoi(argv[i + 1]);
-					/* set time display */
+
+					/* set display time */
 					if (((Model_t *)context->m)->SetDisplayTime)
-					{
 						((Model_t *)context->m)->SetDisplayTime(context, on);
-					}
 				}
-				i += 1;
+
+				i += 2;
 			}
 			else if ((strcmp(argv[i], "-tm") == 0) || (strcmp(argv[i], "--time_mode") == 0))
 			{
-				if (argc >= i + 1)
+				if (i + 1 <= argc)
 				{
 					int twentyFour;
-
-					if ((argc - i) == 1)
-					{
-						usage(context, argv[0], argv[i]);
-					}
 					twentyFour = atoi(argv[i + 1]);
+
 					/* set 12/24 hour mode */
 					if (((Model_t *)context->m)->SetTimeMode)
-					{
 						((Model_t *)context->m)->SetTimeMode(context, twentyFour);
-					}
 				}
-				i += 1;
-			}
-#if defined MODEL_SPECIFIC
-			else if ((strcmp(argv[i], "-ms") == 0) || (strcmp(argv[i], "--model_specific") == 0))
-			{
-				int j;
-				char len;
-				char testdata[16];
-
-				len = argc - 2;
 
-				if ((len > 0) && (len <= 16))
-				{
-					if (i + len <= argc)
-					{
-						memset(testdata, 0, 18);						
-
-						for (j = 1; j <= len; j++)
-						{
-							sscanf(argv[j + 1], "%x", (unsigned int *)&testdata[j - 1]); 
-						}
-
-
-						/* do model specific function */
-						if (((Model_t *)context->m)->ModelSpecific)
-						{
-							j = ((Model_t *)context->m)->ModelSpecific(context, len, testdata);
-						}
-						if (j != 0)
-						{
-							printf("Error occurred.\n");
-						}
-						else
-						{
-							printf("Command executed OK, ");
-							if (testdata[1] == 1)
-							{
-								printf("data returned:\n");
-								for (j = 0; j <= 8; j++)
-								{
-									printf("Byte #%1d = 0x%02x\n", j, testdata[j + 2] & 0xff);
-								}
-//								printf("\n");
-							}
-							else
-							{
-								printf("no return data.\n");
-							}
-						}
-					}
-				}
-				else
-				{
-					printf("Wrong number of arguments, minimum is 1, maximum is 16.\n");
-					usage(context, argv[0], argv[1]);
-				}
-				i += len;
+				i += 2;
 			}
-#endif
 			else
 			{
-				printf("\nUnknown option [ %s ]\n", argv[i]);
 				usage(context, argv[0], NULL);
 			}
+
 			i++;
 		}
 	}
@@ -699,10 +511,10 @@
 	{
 		usage(context, argv[0], NULL);
 	}
+
 	if (((Model_t *)context->m)->Exit)
-	{
 		((Model_t *)context->m)->Exit(context);
-	}
+
 }
 
 ////////////////////////////////////////////////////////////////////////////////////////////////////
@@ -724,7 +536,6 @@
 	char vName[129] = "Unknown";
 	int vLen = -1;
 	eBoxType vBoxType = Unknown;
-
 	vFd = open("/proc/stb/info/model", O_RDONLY);
 	vLen = read(vFd, vName, cSize);
 	close(vFd);
@@ -732,140 +543,98 @@
 	if (vLen > 0)
 	{
 		vName[vLen - 1] = '\0';
+		printf("Model: %s\n", vName);
+
 		if (!strncasecmp(vName, "ufs910", 6))
 		{
 			switch (getKathreinUfs910BoxType())
 			{
 				case 0:
-				{
 					vBoxType = Ufs910_1W;
 					break;
-				}
+
 				case 1:
-				{
 					vBoxType = Ufs910_14W;
 					break;
-				}
+
 				default:
-				{
 					vBoxType = Unknown;
 					break;
-				}
 			}
 		}
 		else if (!strncasecmp(vName, "ufs922", 6))
-		{
 			vBoxType = Ufs922;
-		}
 		else if (!strncasecmp(vName, "ufc960", 6))
-		{
 			vBoxType = Ufc960;
-		}
-		else if (!strncasecmp(vName, "ufs912", 6))
-		{
-			vBoxType = Ufs912;
-		}
-		else if (!strncasecmp(vName, "ufs913", 6))
-		{
-			vBoxType = Ufs912;
-		}
 		else if (!strncasecmp(vName, "tf7700hdpvr", 11))
-		{
 			vBoxType = Tf7700;
-		}
 		else if (!strncasecmp(vName, "hl101", 5))
-		{
 			vBoxType = Hl101;
-		}
 		else if (!strncasecmp(vName, "vip1-v2", 7))
-		{
 			vBoxType = Vip2;
-		}
 		else if (!strncasecmp(vName, "vip2-v1", 7))
-		{
 			vBoxType = Vip2;
-		}
-		else
-			if ((!strncasecmp(vName, "hdbox", 5))
-			|| (!strncasecmp(vName, "octagon1008", 11))
-			|| (!strncasecmp(vName, "atevio7500", 10))
-			|| (!strncasecmp(vName, "hs7110", 6))
-			|| (!strncasecmp(vName, "hs7420", 6))
-			|| (!strncasecmp(vName, "hs7810a", 7))
-			|| (!strncasecmp(vName, "hs7119", 6))
-			|| (!strncasecmp(vName, "hs7429", 6))
-			|| (!strncasecmp(vName, "hs7819", 6)))
-			{
-				vBoxType = Fortis;
-			}
-		else
-			if ((!strncasecmp(vName, "atemio520", 9))
-			|| (!strncasecmp(vName, "atemio530", 9)))
-			{
-				vBoxType = CNBox;
-			}
+		else if (!strncasecmp(vName, "hdbox", 5))
+			vBoxType = Fortis;
+		else if (!strncasecmp(vName, "octagon1008", 11))
+			vBoxType = Fortis;
+		else if (!strncasecmp(vName, "atevio7500", 10))
+			vBoxType = Fortis;
+		else if (!strncasecmp(vName, "hs7110", 6))
+			vBoxType = Fortis;
+		else if (!strncasecmp(vName, "hs7810a", 7))
+			vBoxType = Fortis;
+		else if (!strncasecmp(vName, "hs7119", 6))
+			vBoxType = Fortis;
+		else if (!strncasecmp(vName, "hs7819", 6))
+			vBoxType = Fortis;
+		else if (!strncasecmp(vName, "atemio520", 9))
+			vBoxType = CNBox;
+		else if (!strncasecmp(vName, "atemio530", 9))
+			vBoxType = CNBox;
 		else if (!strncasecmp(vName, "hs5101", 6))
-		{
 			vBoxType = Hs5101;
-		}
-		else
-			if ((!strncasecmp(vName, "spark", 5))
-			|| (!strncasecmp(vName, "spark7162", 9)))
-			{
-				vBoxType = Spark;
-			}
-		else if (!strncasecmp(vName, "adb_box", 7))
-		{
+		else if (!strncasecmp(vName, "octagon1008", 11))
+			vBoxType = Fortis;
+		else if (!strncasecmp(vName, "ufs912", 6))
+			vBoxType = Ufs912;
+		else if (!strncasecmp(vName, "ufs913", 6))
+			vBoxType = Ufs912;
+		else if (!strncasecmp(vName, "spark", 5))
+			vBoxType = Spark;
+		else if (!strncasecmp(vName, "spark7162", 9))
+			vBoxType = Spark;
+		else if ((!strncasecmp(vName, "adb_box", 7)) ||
+				(!strncasecmp(vName, "sagemcom88", 10)) ||
+				(!strncasecmp(vName, "esi_88", 6)) ||
+				(!strncasecmp(vName, "esi88", 5)) ||
+				(!strncasecmp(vName, "dsi87", 5)))
 			vBoxType = Adb_Box;
-		}
+		else if ((!strncasecmp(vName, "cuberevo", 8)) ||
+				(!strncasecmp(vName, "cuberevo-mini", 13)) ||
+				(!strncasecmp(vName, "cuberevo-mini2", 14)) ||
+				(!strncasecmp(vName, "cuberevo-mini-fta", 17)) ||
+				(!strncasecmp(vName, "cuberevo-250hd", 14)) ||
+				(!strncasecmp(vName, "cuberevo-2000hd", 15)) ||
+				(!strncasecmp(vName, "cuberevo-9500hd", 15)) ||
+				(!strncasecmp(vName, "cuberevo-3000hd", 14)))
+			vBoxType = Cuberevo;
 		else
-			if ((!strncasecmp(vName, "cuberevo", 8))
-		    || (!strncasecmp(vName, "cuberevo-mini", 13))
-		    || (!strncasecmp(vName, "cuberevo-mini2", 14))
-		    || (!strncasecmp(vName, "cuberevo-mini-fta", 17))
-		    || (!strncasecmp(vName, "cuberevo-250hd", 14))
-		    || (!strncasecmp(vName, "cuberevo-2000hd", 15))
-		    || (!strncasecmp(vName, "cuberevo-9500hd", 15))
-		    || (!strncasecmp(vName, "cuberevo-3000hd", 14)))
-			{
-				vBoxType = Cuberevo;
-			}
-		else
-		{
 			vBoxType = Unknown;
-		}
-		if (disp)
-		{
-			printf("Receiver: %s\n\n", vName);
-		}
 	}
+
+	printf("vBoxType: %d\n", vBoxType);
+
 	return vBoxType;
 }
 
 int main(int argc, char *argv[])
 {
-	Context_t context;
-	int i;
 	eBoxType vBoxType = Unknown;
+	Context_t context;
+
+	printf("%s: SW Version %s\n", argv[0], sw_version);
 
-	if (argc > 1)
-	{
-		i = 1;
-		while (argc > i) //scan the command line for -V or --verbose
-		{
-			if ((strcmp(argv[i], "-V") == 0) || (strcmp(argv[i], "--verbose") == 0))
-			{
-				/* switch verbose on */
-				disp = 1;
-			}
-			i++;
-		}
-	}
-	
-	if (disp)
-	{
-		printf("%s Version %s\n", argv[0], sw_version);
-	}
 	vBoxType = getModel();
 
 	if (searchModel(&context, vBoxType) != 0)
@@ -873,8 +642,10 @@
 		printf("Model not found\n");
 		return -1;
 	}
+
+	printf("Selected Model: %s\n", ((Model_t *)context.m)->Name);
+
 	processCommand(&context, argc, argv);
 
 	exit(reason & 0x07);
 }
-// vim:ts=4
diff -Naur sh4-apps/tools/fp_control/global.c apps/tools/fp_control/global.c
--- sh4-apps/tools/fp_control/global.c	2019-02-10 00:00:07.507796169 +0100
+++ apps/tools/fp_control/global.c	2019-02-10 00:00:17.277527420 +0100
@@ -29,6 +29,7 @@
 
 #include "global.h"
 
+/* #define E2TIMERSXML "/usr/local/share/enigma2/timers.xml" */
 #define E2TIMERSXML "/etc/enigma2/timers.xml"
 #define E2WAKEUPTIME "/proc/stb/fp/wakeup_time"
 
@@ -41,7 +42,6 @@
 #define WAS_TIMER_WAKEUP "/proc/stb/fp/was_timer_wakeup"
 
 #define E2_WAKEUP_TIME_PROC
-int verbose = 0; //verbose is off by default
 
 static Model_t *AvailableModels[] =
 {
@@ -61,17 +61,19 @@
 	NULL
 };
 
-#if 0
-static time_t read_e2_wakeup(time_t curTime)
+#ifdef E2_WAKEUP_TIME_PROC
+static time_t read_e2_timers(time_t curTime)
 {
 	char line[12];
 	time_t recordTime = LONG_MAX;
 	FILE *fd = fopen(E2WAKEUPTIME, "r");
 	printf("Getting Enigma2 wakeup time");
+
 	if (fd > 0)
 	{
 		fgets(line, 11, fd);
 		sscanf(line, "%ld", &recordTime);
+
 		if (recordTime <= curTime)
 		{
 			recordTime = LONG_MAX;
@@ -79,27 +81,29 @@
 		}
 		else
 			printf(" - Done\n");
+
 		fclose(fd);
 	}
 	else
-	{
 		printf(" - Error reading %s\n", E2WAKEUPTIME);
-	}
+
 	return recordTime;
 }
 #else
 static time_t read_e2_timers(time_t curTime)
 {
-	char recordString[12];
+	char recordString[11];
 	char line[1000];
 	time_t recordTime = LONG_MAX;
 	FILE *fd = fopen(E2TIMERSXML, "r");
-	printf("Getting 1st Enigma2 timer");
+	printf("Getting enigma2 wakeup time");
+
 	if (fd > 0)
 	{
 		while (fgets(line, 999, fd) != NULL)
 		{
 			line[999] = '\0';
+
 			if (!strncmp("<timer begin=\"", line, 14))
 			{
 				unsigned long int tmp = 0;
@@ -109,15 +113,7 @@
 				recordTime = (tmp < recordTime && tmp > curTime ? tmp : recordTime);
 			}
 		}
-		if (recordTime == LONG_MAX)
-		{
-			printf(" (none set)");
-			recordTime = -1;
-		}
-		else
-		{
-			recordTime -= Vwakeup;
-		}
+
 		printf(" - Done\n");
 		fclose(fd);
 	}
@@ -134,17 +130,21 @@
 	char line[1000];
 	time_t recordTime = LONG_MAX;
 	FILE *fd = fopen(NEUTRINO_TIMERS, "r");
-	printf("Getting 1st neutrino timer");
+	printf("Getting neutrino wakeup time");
+
 	if (fd > 0)
 	{
+		printf("Opening %s\n", NEUTRINO_TIMERS);
 		while (fgets(line, 999, fd) != NULL)
 		{
 			line[999] = '\0';
+
 			if (strstr(line, "ALARM_TIME_") != NULL)
 			{
 				time_t tmp = 0;
 				char *str;
 				str = strstr(line, "=");
+
 				if (str != NULL)
 				{
 					tmp = atol(str + 1);
@@ -152,29 +152,31 @@
 				}
 			}
 		}
+
 		printf(" - Done\n");
 		fclose(fd);
 	}
 	else
 		printf(" - Error reading %s\n", NEUTRINO_TIMERS);
+
 	if (recordTime != LONG_MAX)
 	{
-		int wakeupDecrement = Vwakeup;
+		int wakeupDecrement = 5 * 60;
 		int platzhalter;
-		char *dummy;
-
+		char * dummy;
 		checkConfig(&platzhalter, &platzhalter, &dummy, &wakeupDecrement);
 		recordTime -= wakeupDecrement;
 	}
+
 	return recordTime;
 }
 
-// Write the wakeup time to a file to allow detection of wakeup cause
-// in case fp does not support wakeup cause
+// Write the wakeup time to a file to allow detection of wakeup cause if fp does not support
 static void write_wakeup_file(time_t wakeupTime)
 {
 	FILE *wakeupFile;
 	wakeupFile = fopen(WAKEUPFILE, "w");
+
 	if (wakeupFile)
 	{
 		fprintf(wakeupFile, "%ld", wakeupTime);
@@ -186,13 +188,15 @@
 static time_t read_wakeup_file()
 {
 	time_t wakeupTime = LONG_MAX;
-	FILE  *wakeupFile;
+	FILE *wakeupFile;
 	wakeupFile = fopen(WAKEUPFILE, "r");
+
 	if (wakeupFile)
 	{
 		fscanf(wakeupFile, "%ld", &wakeupTime);
 		fclose(wakeupFile);
 	}
+
 	return wakeupTime;
 }
 
@@ -203,13 +207,12 @@
 // and this check happens +-5min arround the timer
 int getWakeupReasonPseudo(eWakeupReason *reason)
 {
-	time_t curTime    = 0;
+	time_t curTime = 0;
 	time_t wakeupTime = LONG_MAX;
-
-	printf("%s: IMPORTANT: Valid Linux System Time is mandatory\n", __func__);
-
+	printf("getWakeupReasonPseudo: IMPORTANT: Valid Linux System Time is mandatory\n");
 	time(&curTime);
 	wakeupTime = read_wakeup_file();
+
 	if ((curTime - FIVE_MIN) < wakeupTime && (curTime + FIVE_MIN) > wakeupTime)
 	{
 		*reason = TIMER;
@@ -224,11 +227,13 @@
 int syncWasTimerWakeup(eWakeupReason reason)
 {
 	FILE *wasTimerWakeupProc = fopen(WAS_TIMER_WAKEUP, "w");
+
 	if (wasTimerWakeupProc == NULL)
 	{
 		fprintf(stderr, "setWakeupReason failed to open %s\n", WAS_TIMER_WAKEUP);
 		return -1;
 	}
+
 	if (reason == TIMER)
 	{
 		fwrite("1\n", 2, 1, wasTimerWakeupProc);
@@ -246,11 +251,12 @@
 // If no wakeup time can be found LONG_MAX will be returned
 time_t read_timers_utc(time_t curTime)
 {
-	time_t wakeupTime = LONG_MAX;  // flag no timer read (yet)
-	wakeupTime = read_e2_timers(curTime);  // get next e2timer
-	if (wakeupTime == LONG_MAX) // if none
+	time_t wakeupTime = LONG_MAX;
+	wakeupTime = read_e2_timers(curTime);
+
+	if (wakeupTime == LONG_MAX)
 	{
-		wakeupTime = read_neutrino_timers(curTime);  // try neutrino timer
+		wakeupTime = read_neutrino_timers(curTime);
 	}
 	write_wakeup_file(wakeupTime);
 	return wakeupTime;
@@ -262,13 +268,12 @@
 	struct tm tsWake;
 	struct tm *ts;
 	time_t wakeupTime = LONG_MAX;
-
 	ts = gmtime(&curTime);
 	tsWake.tm_hour = ts->tm_hour;
-	tsWake.tm_min  = ts->tm_min;
-	tsWake.tm_sec  = ts->tm_sec;
+	tsWake.tm_min = ts->tm_min;
+	tsWake.tm_sec = ts->tm_sec;
 	tsWake.tm_mday = ts->tm_mday;
-	tsWake.tm_mon  = ts->tm_mon;
+	tsWake.tm_mon = ts->tm_mon;
 	tsWake.tm_year = ts->tm_year + 1;
 	wakeupTime = mktime(&tsWake);
 	return wakeupTime;
@@ -276,19 +281,18 @@
 /* ******************************************** */
 
 double modJulianDate(struct tm *theTime)
-{ // struct tm (date) -> MJD since epoch
+{
 	double date;
 	int month;
 	int day;
 	int year;
-
-	year  = theTime->tm_year + 1900;
+	year = theTime->tm_year + 1900;
 	month = theTime->tm_mon + 1;
-	day   = theTime->tm_mday;
+	day = theTime->tm_mday;
 	date = day - 32076 +
-		   1461 * (year + 4800 + (month - 14) / 12) / 4 +
-		   367 * (month - 2 - (month - 14) / 12 * 12) / 12 -
-		   3 * ((year + 4900 + (month - 14) / 12) / 100) / 4;
+	       1461 * (year + 4800 + (month - 14) / 12) / 4 +
+	       367 * (month - 2 - (month - 14) / 12 * 12) / 12 -
+	       3 * ((year + 4900 + (month - 14) / 12) / 100) / 4;
 	date += (theTime->tm_hour + 12.0) / 24.0;
 	date += (theTime->tm_min) / 1440.0;
 	date += (theTime->tm_sec) / 86400.0;
@@ -296,78 +300,19 @@
 	return date;
 }
 
-int get_GMT_offset(struct tm theTime)
-{
-	time_t theoffsetTime;
-	time_t theinputTime;
-	int gmt_offset;
-
-	// Calculate time_t of input time theTime
-//	theinputTime = (((int)modJulianDate(&theTime) & 0xffff) - 40587) * 86400;  // mjd starts on midnight 17-11-1858 which is 40587 days before unix epoch
-	theinputTime = ((int)modJulianDate(&theTime) - 40587) * 86400;  // mjd starts on midnight 17-11-1858 which is 40587 days before unix epoch
-	theinputTime += theTime.tm_hour * 3600;
-	theinputTime += theTime.tm_min * 60;
-	theinputTime += theTime.tm_sec;
-
-	// Get time_t of input time theTime minus GMT offset
-	theTime.tm_isdst = -1; /* say mktime that we do not know */
-	theoffsetTime = mktime(&theTime);
-
-	gmt_offset = theinputTime - theoffsetTime;
-	return gmt_offset;
-}
-
-#if 0
-#define LEAPYEAR(year) (!((year) % 4) && (((year) % 100) || !((year) % 400)))
-#define YEARSIZE(year) (LEAPYEAR(year) ? 366 : 365)
-static const int _ytab[2][12] =
-{
-	{ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 },
-	{ 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }
-};
-
-int get_ndays(struct tm *theTime)
-{ // struct tm (date) -> number of days since linux epoch
-	int ndays = 0;
-	int year;
-	int i;
-
-	year  = theTime->tm_year - 1; // do not count current year
-	while (year >= 70)
-	{
-		ndays += 365;
-		if (LEAPYEAR(year))
-		{
-			ndays++;
-		}
-		year--;
-	}
-	for (i = 0; i < theTime->tm_mon; i++)
-	{
-		ndays += _ytab[0][i];
-	}
-	if ((LEAPYEAR(theTime->tm_year)) && (theTime->tm_mon > 2))
-	{
-		ndays++;
-	}
-	ndays += theTime->tm_mday;
-	printf("%s ndays: %d\n", __func__, ndays);
-	printf("%s MJD: %d\n", __func__, ndays + 40587);
-	return ndays;
-}
-#endif
-
 /* ********************************************** */
 
 int searchModel(Context_t *context, eBoxType type)
 {
 	int i;
+
 	for (i = 0; AvailableModels[i] != NULL; i++)
 		if (AvailableModels[i]->Type == type)
 		{
 			context->m = AvailableModels[i];
 			return 0;
 		}
+
 	return -1;
 }
 
@@ -379,34 +324,27 @@
 	*display_custom = 0;
 	*timeFormat = "Unknown";
 	*wakeup = 5 * 60;
-	FILE *fd_config = fopen(CONFIG, "r");  //read box /etc/vdstandby.cfg
+	FILE *fd_config = fopen(CONFIG, "r");
 
 	if (fd_config == NULL)
 	{
-		Vwakeup = 5 * 60; //default wakeupdecrement is 5 minutes
-
 		printf("Config file (%s) not found,\nusing standard config:", CONFIG);
-		printf("Config:\nDisplay: %d              Time format: %d\n", *display, *display_custom);
-		printf("Displaycustom: %s  Wakeupdecrement: %d minutes %d seconds\n", *timeFormat, *wakeup/60, *wakeup%60);
+		printf("Config:\nDisplay:%d, DISPLAYCUSTOM = %d, CUSTOM = %s, WAKEUPDECREMENT %d\n", *display, *display_custom, *timeFormat, *wakeup);
 		return -1;
 	}
+
 	while (fgets(buffer, MAX, fd_config))
 	{
 		if (!strncmp("DISPLAY=", buffer, 8))
 		{
 			char *option = &buffer[8];
-			if (!strncmp("TRUE", option, 4))
-			{
+
+			if (!strncmp("TRUE", option, 2))
 				*display = 1;
-			}
-			else
-			{
-				*display = 0;
-			}
 		}
 		else if (!strncmp("DISPLAYCUSTOM=", buffer, 14))
 		{
-			char *option = &buffer[14];  //get buffer from character 14 on
+			char *option = &buffer[14];
 			*display_custom = 1;
 			*timeFormat = strdup(option);
 		}
@@ -416,28 +354,11 @@
 			*wakeup = atoi(option);
 		}
 	}
+
 	if (*timeFormat == NULL)
-	{
-		*timeFormat = "?";
-	}
-	if (disp)
-	{
-		printf("Configuration of receiver:\n");
-		printf("Display      : %d  Time format: %s", *display, *timeFormat);
-		printf("Displaycustom: %d  Wakeupdecrement: %d minute(s)", *display_custom, *wakeup / 60);
-		if (*wakeup % 60 != 0)
-		{
-			printf(" %d second(s)\n", *wakeup % 60);
-		}
-		else
-		{
-			printf("\n");
-		}
-	}
-	Vdisplay = *display;
-	VtimeFormat = *timeFormat;
-	Vdisplay_custom = *display_custom;
-	Vwakeup = *wakeup;
+		*timeFormat = sDisplayStd;
+
+	printf("configs: DISPLAY = %d, DISPLAYCUSTOM = %d, CUSTOM = %s, WAKEUPDECREMENT %d\n", *display, *display_custom, *timeFormat, *wakeup);
 	fclose(fd_config);
 	return 0;
 }
diff -Naur sh4-apps/tools/fp_control/global.h apps/tools/fp_control/global.h
--- sh4-apps/tools/fp_control/global.h	2019-02-10 00:00:07.507796169 +0100
+++ apps/tools/fp_control/global.h	2019-02-10 00:00:17.277527420 +0100
@@ -7,38 +7,26 @@
 #define false 0
 #endif
 
-#define VFDDISPLAYCHARS         0xc0425a00
-#define VFDBRIGHTNESS           0xc0425a03
-#define VFDPWRLED               0xc0425a04 /* added by zeroone, also used in nuvoton.h; set PowerLed Brightness on Fortis*/
-#define VFDDISPLAYWRITEONOFF    0xc0425a05
-#define VFDICONDISPLAYONOFF     0xc0425a0a
-
-#define VFDTEST                 0xc0425af0
-#define VFDGETBLUEKEY           0xc0425af1 /* Spark specific */
-#define VFDSETBLUEKEY           0xc0425af2 /* Spark specific */
-#define VFDGETSTBYKEY           0xc0425af3 /* Spark specific */
-#define VFDSETSTBYKEY           0xc0425af4 /* Spark specific */
-#define VFDPOWEROFF             0xc0425af5 /* Spark specific */
-#define VFDSETPOWERONTIME       0xc0425af6 /* Spark specific */
-#define VFDGETVERSION           0xc0425af7
-#define VFDGETSTARTUPSTATE      0xc0425af8 /* Spark specific */
-#define VFDLEDBRIGHTNESS        0xc0425af8 /* ufs912 */
-#define VFDGETWAKEUPMODE        0xc0425af9 /* Fortis, does the same as spark VFDGETSTARTUPSTATE */
-#define VFDGETTIME              0xc0425afa
-#define VFDSETTIME              0xc0425afb
-#define VFDSTANDBY              0xc0425afc
-#define VFDREBOOT               0xc0425afd /* ufs912, fortis */
-#define VFDSETTIME2             0xc0425afd /* Spark specific */
-#define VFDSETLED               0xc0425afe
-#define VFDSETMODE              0xc0425aff /* ufs912, 922, Fortis ->unset compat mode */
-#define VFDDISPLAYCLR           0xc0425b00
-#define VFDGETLOOPSTATE         0xc0425b01 /* Spark specific */
-#define VFDSETLOOPSTATE         0xc0425b02 /* Spark specific */
-#define VFDSETTIMEFORMAT        0xc0425b04 /* Fortis specific */
-#define VFDGETTIMEFORMAT        0xc0425b05 /* Fortis specific */
-
-//Comment next line if you do not want the -ms option
-//#define MODEL_SPECIFIC 1
+#define VFDGETTIME           0xc0425afa
+#define VFDSETTIME           0xc0425afb
+#define VFDSTANDBY           0xc0425afc
+#define VFDREBOOT            0xc0425afd
+#define VFDSETLED            0xc0425afe
+#define VFDICONDISPLAYONOFF  0xc0425a0a
+#define VFDDISPLAYCHARS      0xc0425a00
+#define VFDBRIGHTNESS        0xc0425a03
+#define VFDPWRLED            0xc0425a04
+#define VFDDISPLAYWRITEONOFF 0xc0425a05
+#define VFDDISPLAYCLR        0xc0425b00
+/* ufs912, 922, hdbox ->unset compat mode */
+#define VFDSETMODE           0xc0425aff
+/*spark*/
+#define VFDGETSTARTUPSTATE   0xc0425af8
+
+/* ufs912 */
+#define VFDGETVERSION        0xc0425af7
+#define VFDLEDBRIGHTNESS     0xc0425af8
+#define VFDGETWAKEUPMODE     0xc0425af9
 
 struct vfd_ioctl_data
 {
@@ -47,7 +35,7 @@
 	unsigned char length;
 };
 
-typedef enum {NONE, POWERON, STANDBY, TIMER, POWER_SWITCH, UNK1, UNK2, UNK3} eWakeupReason;
+typedef enum {NONE, POWERON, STANDBY, TIMER, POWERSWITCH, UNK1, UNK2, UNK3} eWakeupReason;
 
 typedef enum {Unknown, Ufs910_1W, Ufs910_14W, Ufs922, Ufc960, Tf7700, Hl101, Vip2, Fortis, Hs5101, Ufs912, Spark, Cuberevo, Adb_Box, CNBox} eBoxType;
 
@@ -56,43 +44,39 @@
 	/* Model_t */
 	void *m; /* instance data */
 	int fd; /* filedescriptor of fd */
+
 } Context_t;
 
 typedef struct Model_s
 {
-	char *Name;
-	eBoxType Type;
-	int	(*Init)             (Context_t *context);
-	int	(*Clear)            (Context_t *context);
-	int	(*Usage)            (Context_t *context, char *prg_name, char *cmd_name);
-	int	(*SetTime)          (Context_t *context, time_t *theGMTTime);
-	int	(*SetSTime)         (Context_t *context, time_t *theGMTTime);
-	int	(*GetTime)          (Context_t *context, time_t *theGMTTime);
-	int	(*SetWTime)         (Context_t *context, time_t *theGMTTime);
-	int	(*GetWTime)         (Context_t *context, time_t *theGMTTime);
-	int	(*SetTimer)         (Context_t *context, time_t *theGMTTime);
-	int	(*GetTimer)         (Context_t *context, time_t *theGMTTime);
-	int	(*Shutdown)         (Context_t *context, time_t *shutdownTimeGMT);
-	int	(*Reboot)           (Context_t *context, time_t *rebootTimeGMT);
-	int	(*Sleep)            (Context_t *context, time_t *wakeUpGMT);
-	int	(*SetText)          (Context_t *context, char *theText);
-	int	(*SetLed)           (Context_t *context, int which, int on);
-	int	(*SetIcon)          (Context_t *context, int which, int on);
-	int	(*SetBrightness)    (Context_t *context, int brightness);
-	int	(*GetWakeupReason)  (Context_t *context, eWakeupReason *reason);
-	int	(*SetLight)         (Context_t *context, int on);
-	int	(*Exit)             (Context_t *context);
-	int	(*SetLedBrightness) (Context_t *context, int brightness);
-	int	(*GetVersion)       (Context_t *context, int *version);
-	int	(*SetRF)            (Context_t *context, int on);
-	int	(*SetFan)           (Context_t *context, int on);
-	int	(*GetWakeupTime)    (Context_t *context, time_t *theGMTTime);
-	int	(*SetDisplayTime)   (Context_t *context, int on);
-	int	(*SetTimeMode)      (Context_t *context, int twentyFour);
-#if defined MODEL_SPECIFIC
-	int	(*ModelSpecific)    (Context_t *context, char len, char *testdata); /* added by audioniek */
-#endif
-	void	*private;
+		char *Name;
+		eBoxType Type;
+		int (* Init)(Context_t *context);
+		int (* Clear)(Context_t *context);
+		int (* Usage)(Context_t *context, char *prg_name);
+		int (* SetTime)(Context_t *context, time_t *theGMTTime);
+		int (* GetTime)(Context_t *context, time_t *theGMTTime);
+		int (* SetTimer)(Context_t *context, time_t *theGMTTime);
+		int (* GetTimer)(Context_t *context, time_t *theGMTTime);
+		int (* Shutdown)(Context_t *context, time_t *shutdownTimeGMT);
+		int (* Reboot)(Context_t *context, time_t *rebootTimeGMT);
+		int (* Sleep)(Context_t *context, time_t *wakeUpGMT);
+		int (* SetText)(Context_t *context, char *theText);
+		int (* SetLed)(Context_t *context, int which, int on);
+		int (* SetIcon)(Context_t *context, int which, int on);
+		int (* SetBrightness)(Context_t *context, int brightness);
+		int (* SetPwrLed)(Context_t *context, int pwrled);
+		int (* GetWakeupReason)(Context_t *context, eWakeupReason *reason);
+		int (* SetLight)(Context_t *context, int on);
+		int (* Exit)(Context_t *context);
+		int (* SetLedBrightness)(Context_t *context, int brightness);
+		int (* GetVersion)(Context_t *context, int *version);
+		int (* SetRF)(Context_t *context, int on);
+		int (* SetFan)(Context_t *context, int on);
+		int (* GetWakeupTime)(Context_t *context, time_t *theGMTTime);
+		int (* SetDisplayTime)(Context_t *context, int on);
+		int (* SetTimeMode)(Context_t *context, int twentyFour);
+		void *private;
 } Model_t;
 
 extern Model_t Ufs910_1W_model;
@@ -110,7 +94,6 @@
 extern Model_t CNBOX_model;
 
 double modJulianDate(struct tm *theTime);
-int get_GMT_offset(struct tm theTime);
 time_t read_timers_utc(time_t curTime);
 time_t read_fake_timer_utc(time_t curTime);
 int searchModel(Context_t *context, eBoxType type);
@@ -119,10 +102,4 @@
 int getWakeupReasonPseudo(eWakeupReason *reason);
 int syncWasTimerWakeup(eWakeupReason reason);
 
-int	disp; //controls screen output
-int	Vdisplay;
-int	Vdisplay_custom;
-char	*VtimeFormat;
-int	Vwakeup;
-
 #endif
diff -Naur sh4-apps/tools/fp_control/Hl101.c apps/tools/fp_control/Hl101.c
--- sh4-apps/tools/fp_control/Hl101.c	2019-02-10 00:00:07.505796224 +0100
+++ apps/tools/fp_control/Hl101.c	2019-02-10 00:00:17.276527447 +0100
@@ -19,7 +19,7 @@
  *
  */
 
-/* ******************* includes ************************ */
+/******************** includes ************************ */
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -36,7 +36,7 @@
 
 static int setText(Context_t *context, char *theText);
 
-/* ******************* constants ************************ */
+/******************** constants ************************ */
 
 #define cVFD_DEVICE "/dev/vfd"
 
@@ -65,7 +65,7 @@
 	struct tm *now_tm;
 	now_tm = gmtime(&theGMTTime);
 	printf("Set Time (UTC): %02d:%02d:%02d %02d-%02d-%04d\n",
-		   now_tm->tm_hour, now_tm->tm_min, now_tm->tm_sec, now_tm->tm_mday, now_tm->tm_mon + 1, now_tm->tm_year + 1900);
+	       now_tm->tm_hour, now_tm->tm_min, now_tm->tm_sec, now_tm->tm_mday, now_tm->tm_mon + 1, now_tm->tm_year + 1900);
 	double mjd = modJulianDate(now_tm);
 	int mjd_int = mjd;
 	destString[0] = (mjd_int >> 8);
@@ -77,14 +77,14 @@
 
 unsigned long getProtonTime(char *protonTimeString)
 {
-	unsigned int    mjd     = ((protonTimeString[1] & 0xFF) * 256) + (protonTimeString[2] & 0xFF);
-	unsigned long   epoch   = ((mjd - 40587) * 86400);
-	unsigned int    hour    = protonTimeString[3] & 0xFF;
-	unsigned int    min     = protonTimeString[4] & 0xFF;
-	unsigned int    sec     = protonTimeString[5] & 0xFF;
+	unsigned int mjd = ((protonTimeString[1] & 0xFF) * 256) + (protonTimeString[2] & 0xFF);
+	unsigned long epoch = ((mjd - 40587) * 86400);
+	unsigned int hour = protonTimeString[3] & 0xFF;
+	unsigned int min = protonTimeString[4] & 0xFF;
+	unsigned int sec = protonTimeString[5] & 0xFF;
 	epoch += (hour * 3600 + min * 60 + sec);
 	printf("MJD = %d epoch = %ld, time = %02d:%02d:%02d\n", mjd,
-		   epoch, hour, min, sec);
+	       epoch, hour, min, sec);
 	return epoch;
 }
 
@@ -96,18 +96,20 @@
 	int vFd;
 //	printf("%s\n", __func__);
 	vFd = open(cVFD_DEVICE, O_RDWR);
+
 	if (vFd < 0)
 	{
 		fprintf(stderr, "cannot open %s\n", cVFD_DEVICE);
 		perror("");
 	}
+
 	((Model_t *)context->m)->private = private;
 	memset(private, 0, sizeof(tHL101Private));
 	checkConfig(&private->display, &private->display_custom, &private->timeFormat, &private->wakeupDecrement);
 	return vFd;
 }
 
-static int usage(Context_t *context, char *prg_name, char *cmd_name)
+static int usage(Context_t *context, char *prg_name)
 {
 	fprintf(stderr, "%s: not implemented\n", __func__);
 	return -1;
@@ -118,11 +120,13 @@
 	struct proton_ioctl_data vData;
 //	printf("%s\n", __func__);
 	setProtonTime(*theGMTTime, vData.u.time.time);
+
 	if (ioctl(context->fd, VFDSETTIME, &vData) < 0)
 	{
 		perror("settime: ");
 		return -1;
 	}
+
 	return 0;
 }
 
@@ -130,12 +134,14 @@
 {
 	char fp_time[8];
 	fprintf(stderr, "Waiting for current time from fp...\n");
+
 	/* front controller time */
 	if (ioctl(context->fd, VFDGETTIME, &fp_time) < 0)
 	{
 		perror("gettime: ");
 		return -1;
 	}
+
 	/* if we get the fp time */
 	if (fp_time[0] != '\0')
 	{
@@ -148,6 +154,7 @@
 		fprintf(stderr, "Error reading time from fp\n");
 		*theGMTTime = 0;
 	}
+
 	return 0;
 }
 
@@ -157,23 +164,23 @@
 	time_t curTime;
 	time_t wakeupTime;
 	struct tm *ts;
+//	tHL101Private *private = (tHL101Private *)((Model_t *)context->m)->private;
 	time(&curTime);
 	ts = localtime(&curTime);
 	fprintf(stderr, "Current Time: %02d:%02d:%02d %02d-%02d-%04d\n",
-			ts->tm_hour, ts->tm_min, ts->tm_sec, ts->tm_mday, ts->tm_mon + 1, ts->tm_year + 1900);
+		ts->tm_hour, ts->tm_min, ts->tm_sec, ts->tm_mday, ts->tm_mon + 1, ts->tm_year + 1900);
+
 	if (theGMTTime == NULL)
-	{
 		wakeupTime = read_timers_utc(curTime);
-	}
 	else
-	{
 		wakeupTime = *theGMTTime;
-	}
+
 	if ((wakeupTime <= 0) || (wakeupTime == LONG_MAX))
 	{
 		/* nothing to do for e2 */
 		fprintf(stderr, "no e2 timer found clearing fp wakeup time. Goodbye...\n");
 		vData.u.standby.time[0] = '\0';
+
 		if (ioctl(context->fd, VFDSTANDBY, &vData) < 0)
 		{
 			perror("standby: ");
@@ -185,18 +192,21 @@
 		unsigned long diff;
 		char fp_time[8];
 		fprintf(stderr, "Waiting for current time from fp...\n");
+
 		/* front controller time */
 		if (ioctl(context->fd, VFDGETTIME, &fp_time) < 0)
 		{
 			perror("gettime: ");
 			return -1;
 		}
+
 		/* difference from now to wake up */
 		diff = (unsigned long int) wakeupTime - curTime;
+
 		/* if we get the fp time */
 		if (fp_time[0] != '\0')
 		{
-//			fprintf(stderr, "Success reading time from fp\n");
+			fprintf(stderr, "Success reading time from fp\n");
 			/* current front controller time */
 			curTime = (time_t) getProtonTime(fp_time);
 		}
@@ -205,18 +215,21 @@
 			fprintf(stderr, "Error reading time, assuming localtime.\n");
 			/* noop current time already set */
 		}
+
 		wakeupTime = curTime + diff;
 		setProtonTime(wakeupTime, vData.u.standby.time);
+
 		if (ioctl(context->fd, VFDSTANDBY, &vData) < 0)
 		{
 			perror("standby: ");
 			return -1;
 		}
 	}
+
 	return 0;
 }
 
-static int getWTime(Context_t *context, time_t *theGMTTime)
+static int getTimer(Context_t *context, time_t *theGMTTime)
 {
 	fprintf(stderr, "%s: not implemented\n", __func__);
 	return -1;
@@ -225,22 +238,26 @@
 static int shutdown(Context_t *context, time_t *shutdownTimeGMT)
 {
 	time_t curTime;
+
 	/* shutdown immediately */
 	if (*shutdownTimeGMT == -1)
-	{
 		return (setTimer(context, NULL));
-	}
+
 	while (1)
 	{
 		time(&curTime);
+
 		/*printf("curTime = %d, shutdown %d\n", curTime, *shutdownTimeGMT);*/
+
 		if (curTime >= *shutdownTimeGMT)
 		{
 			/* set most recent e2 timer and bye bye */
 			return (setTimer(context, NULL));
 		}
+
 		usleep(100000);
 	}
+
 	return -1;
 }
 
@@ -248,9 +265,11 @@
 {
 	time_t curTime;
 	struct proton_ioctl_data vData;
+
 	while (1)
 	{
 		time(&curTime);
+
 		if (curTime >= *rebootTimeGMT)
 		{
 			if (ioctl(context->fd, VFDREBOOT, &vData) < 0)
@@ -259,36 +278,42 @@
 				return -1;
 			}
 		}
+
 		usleep(100000);
 	}
+
 	return 0;
 }
 
 static int Sleep(Context_t *context, time_t *wakeUpGMT)
 {
-#if 0
-	time_t     curTime;
-	int        sleep = 1;
-	int        vFd;
-	fd_set     rfds;
-	struct     timeval tv;
-	int        retval;
-	struct tm  *ts;
-	char       output[cMAXCharsHL101 + 1];
+	time_t curTime;
+	int sleep = 1;
+	int vFd;
+	fd_set rfds;
+	struct timeval tv;
+	int retval;
+	struct tm *ts;
+	char output[cMAXCharsHL101 + 1];
 	tHL101Private *private = (tHL101Private *)((Model_t *)context->m)->private;
+#if 0
 	printf("%s\n", __func__);
 	vFd = open(cRC_DEVICE, O_RDWR);
+
 	if (vFd < 0)
 	{
 		fprintf(stderr, "cannot open %s\n", cRC_DEVICE);
 		perror("");
 		return -1;
 	}
+
 	printf("%s 1\n", __func__);
+
 	while (sleep)
 	{
 		time(&curTime);
 		ts = localtime(&curTime);
+
 		if (curTime >= *wakeUpGMT)
 		{
 			sleep = 0;
@@ -300,17 +325,20 @@
 			tv.tv_sec = 0;
 			tv.tv_usec = 100000;
 			retval = select(vFd + 1, &rfds, NULL, NULL, &tv);
+
 			if (retval > 0)
 			{
 				sleep = 0;
 			}
 		}
+
 		if (private->display)
 		{
 			strftime(output, cMAXCharsHL101 + 1, private->timeFormat, ts);
 			setText(context, output);
 		}
 	}
+
 #endif
 	return 0;
 }
@@ -330,11 +358,13 @@
 	struct proton_ioctl_data vData;
 	vData.u.led.led_nr = which;
 	vData.u.led.on = on;
+
 	if (ioctl(context->fd, VFDSETLED, &vData) < 0)
 	{
 		perror("setLed: ");
 		return -1;
 	}
+
 	return 0;
 }
 
@@ -343,51 +373,59 @@
 	struct proton_ioctl_data vData;
 	vData.u.icon.icon_nr = which;
 	vData.u.icon.on = on;
+
 	if (ioctl(context->fd, VFDICONDISPLAYONOFF, &vData) < 0)
 	{
 		perror("setIcon: ");
 		return -1;
 	}
+
 	return 0;
 }
 
 static int setBrightness(Context_t *context, int brightness)
 {
 	struct proton_ioctl_data vData;
+
 	if (brightness < 0 || brightness > 7)
-	{
 		return -1;
-	}
+
 	vData.u.brightness.level = brightness;
 	printf("%d\n", context->fd);
+
 	if (ioctl(context->fd, VFDBRIGHTNESS, &vData) < 0)
 	{
 		perror("setBrightness: ");
 		return -1;
 	}
+
 	return 0;
 }
 
+static int setPwrLed(Context_t *context, int brightness)
+{
+	fprintf(stderr, "%s: not implemented\n", __func__);
+	return -1;
+}
+
+
 static int setLight(Context_t *context, int on)
 {
 	if (on)
-	{
 		setBrightness(context, 7);
-	}
 	else
-	{
 		setBrightness(context, 0);
-	}
+
 	return 0;
 }
 
 static int Exit(Context_t *context)
 {
 	tHL101Private *private = (tHL101Private *)((Model_t *)context->m)->private;
+
 	if (context->fd > 0)
-	{
 		close(context->fd);
-	}
+
 	free(private);
 	exit(1);
 }
@@ -395,44 +433,40 @@
 static int Clear(Context_t *context)
 {
 	struct proton_ioctl_data vData;
+
 	if (ioctl(context->fd, VFDDISPLAYCLR, &vData) < 0)
 	{
 		perror("clear: ");
 		return -1;
 	}
+
 	return 0;
 }
 
 Model_t HL101_model =
 {
-	.Name             = "Spider HL101 frontpanel control utility",
-	.Type             = Hl101,
-	.Init             = init,
-	.Clear            = Clear,
-	.Usage            = usage,
-	.SetTime          = setTime,
-	.GetTime          = getTime,
-	.SetTimer         = setTimer,
-	.GetWTime         = getWTime,
-	.SetWTime         = NULL,
-	.Shutdown         = shutdown,
-	.Reboot           = reboot,
-	.Sleep            = Sleep,
-	.SetText          = setText,
-	.SetLed           = setLed,
-	.SetIcon          = setIcon,
-	.SetBrightness    = setBrightness,
-	.GetWakeupReason  = NULL,
-	.SetLight         = setLight,
-	.SetLedBrightness = NULL,
-	.GetVersion       = NULL,
-	.SetRF            = NULL,
-	.SetFan           = NULL,
-	.GetWakeupTime    = NULL,
-	.SetDisplayTime   = NULL,
-	.SetTimeMode      = NULL,
-#if defined MODEL_SPECIFIC
-	.ModelSpecific    = NULL,
-#endif
-	.Exit             = Exit
+	.Name                      = "Spider HL101 frontpanel control utility",
+	.Type                      = Hl101,
+	.Init                      = init,
+	.Clear                     = Clear,
+	.Usage                     = usage,
+	.SetTime                   = setTime,
+	.GetTime                   = getTime,
+	.SetTimer                  = setTimer,
+	.GetTimer                  = getTimer,
+	.Shutdown                  = shutdown,
+	.Reboot                    = reboot,
+	.Sleep                     = Sleep,
+	.SetText                   = setText,
+	.SetLed                    = setLed,
+	.SetIcon                   = setIcon,
+	.SetBrightness              = setBrightness,
+	.SetPwrLed                 = setPwrLed,
+	.SetLight                  = setLight,
+	.Exit                      = Exit,
+	.SetLedBrightness          = NULL,
+	.GetVersion                = NULL,
+	.SetRF                     = NULL,
+	.SetFan                    = NULL,
+	.private                   = NULL
 };
diff -Naur sh4-apps/tools/fp_control/Homecast5101.c apps/tools/fp_control/Homecast5101.c
--- sh4-apps/tools/fp_control/Homecast5101.c	2019-02-10 00:00:07.505796224 +0100
+++ apps/tools/fp_control/Homecast5101.c	2019-02-10 00:00:17.276527447 +0100
@@ -19,7 +19,7 @@
  *
  */
 
-/* ******************* includes ************************ */
+/******************** includes ************************ */
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -43,7 +43,7 @@
 static int Sleep(Context_t *context, time_t *wakeUpGMT);
 static int setLight(Context_t *context, int on);
 
-/* ******************* constants ************************ */
+/******************** constants ************************ */
 //#define cmdReboot "/sbin/reboot" /* does not currently work */
 #define cmdReboot "init 6"
 #define cmdHalt "/sbin/halt"
@@ -74,14 +74,11 @@
 void hs5101_avs_standby(int fd_avs, unsigned int mode)
 {
 	printf("%s %d\n", __func__, mode);
+
 	if (!mode)
-	{
 		write(fd_avs, "on", 2);
-	}
 	else
-	{
 		write(fd_avs, "off", 3);
-	}
 }
 
 /* ----------------------------------------------------- */
@@ -90,28 +87,28 @@
 	struct stmfbio_output_configuration outputConfig = {0};
 	printf("%s %d\n", __func__, mode);
 	outputConfig.outputid = 1;
+
 	if (ioctl(fd_hdmi, STMFBIO_GET_OUTPUT_CONFIG, &outputConfig) < 0)
-	{
 		perror("Getting current output configuration failed");
-	}
+
 	outputConfig.caps = 0;
 	outputConfig.activate = STMFBIO_ACTIVATE_IMMEDIATE;
 	outputConfig.analogue_config = 0;
 	outputConfig.caps |= STMFBIO_OUTPUT_CAPS_HDMI_CONFIG;
+
 	if (!mode)
 	{
 		outputConfig.hdmi_config |= STMFBIO_OUTPUT_HDMI_DISABLED;
 	}
-	else
+	else if (mode)
 	{
 		outputConfig.hdmi_config &= ~STMFBIO_OUTPUT_HDMI_DISABLED;
 	}
+
 	if (outputConfig.caps != STMFBIO_OUTPUT_CAPS_NONE)
 	{
 		if (ioctl(fd_hdmi, STMFBIO_SET_OUTPUT_CONFIG, &outputConfig) < 0)
-		{
 			perror("setting output configuration failed");
-		}
 	}
 }
 
@@ -129,14 +126,13 @@
 	hs5101_avs_standby(fd_avs, 0);
 	hs5101_hdmi_standby(fd_hdmi, 0);
 	setText(context, "                ");
+
 	for (id = 0x10; id < 0x20; id++)
-	{
 		setIcon(context, id, 0);
-	}
+
 	if (private->display == 0)
-	{
 		setLight(context, 0);
-	}
+
 	close(fd_hdmi);
 	close(fd_avs);
 }
@@ -147,15 +143,15 @@
 	int fd_hdmi = open("/dev/fb0", O_RDWR);
 	int id;
 	printf("%s\n", __func__);
+
 	if (private->display == 0)
-	{
 		setLight(context, 1);
-	}
+
 	setText(context, "                ");
+
 	for (id = 0x10; id < 0x20; id++)
-	{
 		setIcon(context, id, 0);
-	}
+
 	hs5101_hdmi_standby(fd_hdmi, 1);
 	hs5101_avs_standby(fd_avs, 1);
 	setLed(context, 1, 0);
@@ -169,50 +165,52 @@
 
 static int init(Context_t *context)
 {
-	char	cmdLine[512];
-	int	vFd;
+	char cmdLine[512];
+	int vFd;
 	tHS5101Private *private = malloc(sizeof(tHS5101Private));
 //	printf("%s\n", __func__);
 	((Model_t *)context->m)->private = private;
 	memset(private, 0, sizeof(tHS5101Private));
 	vFd = open(cCMDLINE, O_RDWR);
 	private->nfs = 0;
+
 	if (read(vFd, cmdLine, 512) > 0)
 	{
 		if (strstr("nfsroot", cmdLine) != NULL)
-		{
 			private->nfs = 1;
-		}
 	}
+
 	close(vFd);
+
 	if (private->nfs)
-	{
 		printf("mode = nfs\n");
-	}
 	else
-	{
 		printf("mode = none nfs\n");
-	}
+
 	vFd = open(cVFD_DEVICE, O_RDWR);
+
 	if (vFd < 0)
 	{
 		fprintf(stderr, "cannot open %s\n", cVFD_DEVICE);
 		perror("");
 	}
-	//    private->fd_green = open("/sys/class/leds/ufs910\\:green/brightness", O_WRONLY);
-	//    private->fd_red = open("/sys/class/leds/ufs910\\:red/brightness", O_WRONLY);
-	//    private->fd_yellow = open("/sys/class/leds/ufs910\\:yellow/brightness", O_WRONLY);
+
+	// private->fd_green = open("/sys/class/leds/ufs910\\:green/brightness", O_WRONLY);
+	// private->fd_red = open("/sys/class/leds/ufs910\\:red/brightness", O_WRONLY);
+	// private->fd_yellow = open("/sys/class/leds/ufs910\\:yellow/brightness", O_WRONLY);
 	private->vfd = open(cVFD_DEVICE, O_RDWR);
+
 	if (private->vfd < 0)
 	{
 		fprintf(stderr, "cannot open %s\n", cVFD_DEVICE);
 		perror("");
 	}
+
 	checkConfig(&private->display, &private->display_custom, &private->timeFormat, &private->wakeupDecrement);
 	return vFd;
 }
 
-static int usage(Context_t *context, char *prg_name, char *cmd_name)
+static int usage(Context_t *context, char *prg_name)
 {
 	fprintf(stderr, "%s: not implemented\n", __func__);
 	return -1;
@@ -239,22 +237,20 @@
 	time(&curTime);
 	ts = localtime(&curTime);
 	fprintf(stderr, "Current Time: %02d:%02d:%02d %02d-%02d-%04d\n",
-			ts->tm_hour, ts->tm_min, ts->tm_sec, ts->tm_mday, ts->tm_mon + 1, ts->tm_year + 1900);
+		ts->tm_hour, ts->tm_min, ts->tm_sec, ts->tm_mday, ts->tm_mon + 1, ts->tm_year + 1900);
 	hs5101_startPseudoStandby(context, private);
+
 	if (theGMTTime == NULL)
-	{
 		private->wakeupTime = read_timers_utc(curTime);
-	}
 	else
-	{
 		private->wakeupTime = *theGMTTime;
-	}
+
 	Sleep(context, &private->wakeupTime);
 	hs5101_stopPseudoStandby(context, private);
 	return 0;
 }
 
-static int getWTime(Context_t *context, time_t *theGMTTime)
+static int getTimer(Context_t *context, time_t *theGMTTime)
 {
 	fprintf(stderr, "%s: not implemented\n", __func__);
 	return -1;
@@ -264,37 +260,43 @@
 {
 	time_t curTime;
 	printf("%s\n", __func__);
+
 	/* shutdown immediately */
 	if (*shutdownTimeGMT == -1)
-	{
 		system(cmdHalt);
-	}
+
 	while (1)
 	{
 		time(&curTime);
+
 		if (curTime >= *shutdownTimeGMT)
 		{
 			system(cmdHalt);
 		}
+
 		usleep(100000);
 	}
+
 	return -1;
 }
 
 static int reboot(Context_t *context, time_t *rebootTimeGMT)
 {
-	time_t	curTime;
-
+	time_t curTime;
 	printf("%s\n", __func__);
+
 	while (1)
 	{
 		time(&curTime);
+
 		if (curTime >= *rebootTimeGMT)
 		{
 			system(cmdReboot);
 		}
+
 		usleep(100000);
 	}
+
 	return 0;
 }
 
@@ -313,15 +315,18 @@
 	printf("%s\n", __func__);
 	output[cMAXCharsHS5101] = '\0';
 	vFd = open("/dev/input/event0", O_RDONLY);
+
 	if (vFd < 0)
 	{
 		perror("event0");
 		return -1;
 	}
+
 	while (sleep)
 	{
 		time(&curTime);
 		ts = localtime(&curTime);
+
 		if (curTime >= *wakeUpGMT)
 		{
 			sleep = 0;
@@ -333,9 +338,11 @@
 			tv.tv_sec = 0;
 			tv.tv_usec = 100000;
 			retval = select(vFd + 1, &rfds, NULL, NULL, &tv);
+
 			if (retval > 0)
 			{
 				len = read(vFd, data, sizeof(struct input_event) * 64);
+
 				for (i = 0; i < len / sizeof(struct input_event); i++)
 				{
 					if (data[i].type == EV_SYN)
@@ -349,19 +356,19 @@
 					else
 					{
 						if (data[i].code == 116)
-						{
 							sleep = 0;
-						}
 					}
 				}
 			}
 		}
+
 		if (private->display)
 		{
 			strftime(output, cMAXCharsHS5101 + 1, private->timeFormat, ts);
 			write(private->vfd, &output, sizeof(output));
 		}
 	}
+
 	return 0;
 }
 
@@ -372,11 +379,13 @@
 	strncpy((char *) vData.data, theText, cMAXCharsHS5101);
 	vData.data[cMAXCharsHS5101] = '\0';
 	vData.length = strlen((char *) vData.data);
-	if (ioctl(context->fd, VFDSTANDBY, &vData) < 0) //VFDSTANDBY????
+
+	if (ioctl(context->fd, VFDSTANDBY, &vData) < 0)
 	{
 		perror("setText: ");
 		return -1;
 	}
+
 	return 0;
 }
 
@@ -385,22 +394,16 @@
 	tHS5101Private *private = (tHS5101Private *)((Model_t *)context->m)->private;
 	printf("%s\n", __func__);
 	return 0;
+
 	if (which == 1)
-	{
 		write(private->fd_green, on == 0 ? "0" : "1", 1);
-	}
 	else if (which == 2)
-	{
 		write(private->fd_red, on == 0 ? "0" : "1", 1);
-	}
 	else if (which == 3)
-	{
 		write(private->fd_red, on == 0 ? "0" : "1", 1);
-	}
 	else
-	{
 		return -1;
-	}
+
 	return 0;
 }
 
@@ -414,11 +417,13 @@
 	data.length = 5;
 	data.data[0] = which & 0x0f;
 	data.data[4] = on;
+
 	if (ioctl(private->vfd, VFDICONDISPLAYONOFF, &data) < 0)
 	{
 		perror("setIcon: ");
 		return -1;
 	}
+
 	return 0;
 }
 
@@ -427,18 +432,20 @@
 	struct vfd_ioctl_data data;
 	tHS5101Private *private = (tHS5101Private *)((Model_t *)context->m)->private;
 	printf("%s\n", __func__);
+
 	if (brightness < 0 || brightness > 7)
-	{
 		return -1;
-	}
+
 	memset(data.data, ' ', 63);
 	data.start = brightness & 0x07;
 	data.length = 0;
+
 	if (ioctl(private->vfd, VFDBRIGHTNESS, &data) < 0)
 	{
 		perror("setbrightness: ");
 		return -1;
 	}
+
 	return 0;
 }
 
@@ -448,20 +455,20 @@
 	tHS5101Private *private = (tHS5101Private *)((Model_t *)context->m)->private;
 	printf("%s\n", __func__);
 	memset(&data, 0, sizeof(struct vfd_ioctl_data));
+
 	if (on)
-	{
 		data.start = 0x01;
-	}
 	else
-	{
 		data.start = 0x00;
-	}
+
 	data.length = 0;
+
 	if (ioctl(private->vfd, VFDDISPLAYWRITEONOFF, &data) < 0)
 	{
 		perror("setLight: ");
 		return -1;
 	}
+
 	return 0;
 }
 
@@ -469,17 +476,16 @@
 {
 	tHS5101Private *private = (tHS5101Private *)((Model_t *)context->m)->private;
 	printf("%s\n", __func__);
+
 	if (context->fd > 0)
-	{
 		close(context->fd);
-	}
+
 	if (private->vfd > 0)
-	{
 		close(private->vfd);
-	}
-	//    close(private->fd_green);
-	//    close(private->fd_red);
-	//    close(private->fd_yellow);
+
+	// close(private->fd_green);
+	// close(private->fd_red);
+	// close(private->fd_yellow);
 	free(private);
 	exit(1);
 }
@@ -489,47 +495,40 @@
 	int i;
 	setText(context, "                ");
 	setBrightness(context, 7);
+
 	for (i = 1; i <= 3 ; i++)
-	{
 		setLed(context, i, 0);
-	}
+
 	for (i = 1; i <= 16 ; i++)
-	{
 		setIcon(context, i, 0);
-	}
+
 	return 0;
 }
 
 Model_t Hs5101_model =
 {
-	.Name             = "Homecast 5101 frontpanel control utility",
-	.Type             = Hs5101,
-	.Init             = init,
-	.Clear            = Clear,
-	.Usage            = usage,
-	.SetTime          = setTime,
-	.GetTime          = getTime,
-	.SetTimer         = setTimer,
-	.GetWTime         = getWTime,
-	.SetWTime         = NULL,
-	.Shutdown         = shutdown,
-	.Reboot           = reboot,
-	.Sleep            = Sleep,
-	.SetText          = setText,
-	.SetLed           = setLed,
-	.SetIcon          = setIcon,
-	.SetBrightness    = setBrightness,
-	.GetWakeupReason  = NULL,
-	.SetLight         = setLight,
-	.SetLedBrightness = NULL,
-	.GetVersion       = NULL,
-	.SetRF            = NULL,
-	.SetFan           = NULL,
-	.GetWakeupTime    = NULL,
-	.SetDisplayTime   = NULL,
-	.SetTimeMode      = NULL,
-#if defined MODEL_SPECIFIC
-	.ModelSpecific    = NULL,
-#endif
-	.Exit             = Exit
+	.Name                      = "Homecast 5101 frontpanel control utility",
+	.Type                      = Hs5101,
+	.Init                      = init,
+	.Clear                     = Clear,
+	.Usage                     = usage,
+	.SetTime                   = setTime,
+	.GetTime                   = getTime,
+	.SetTimer                  = setTimer,
+	.GetTimer                  = getTimer,
+	.Shutdown                  = shutdown,
+	.Reboot                    = reboot,
+	.Sleep                     = Sleep,
+	.SetText                   = setText,
+	.SetLed                    = setLed,
+	.SetIcon                   = setIcon,
+	.SetBrightness             = setBrightness,
+	.SetPwrLed                 = NULL,
+	.SetLight                  = setLight,
+	.Exit                      = Exit,
+	.SetLedBrightness          = NULL,
+	.GetVersion                = NULL,
+	.SetRF                     = NULL,
+	.SetFan                    = NULL,
+	.private                   = NULL
 };
diff -Naur sh4-apps/tools/fp_control/Makefile.am apps/tools/fp_control/Makefile.am
--- sh4-apps/tools/fp_control/Makefile.am	2019-02-10 00:00:07.505796224 +0100
+++ apps/tools/fp_control/Makefile.am	2019-02-10 00:00:17.276527447 +0100
@@ -1,3 +1,5 @@
+ACLOCAL_AMFLAGS = -I m4
+
 bin_PROGRAMS = fp_control
 
 fp_control_SOURCES = \
@@ -17,7 +19,5 @@
 	Adb_Box.c \
 	Cnbox.c
 
-AM_CFLAGS = -Wall
+AM_CFLAGS  = -Wall
 AM_LDFLAGS = -lrt
-ACLOCAL_AMFLAGS = -I m4
-
diff -Naur sh4-apps/tools/fp_control/Spark.c apps/tools/fp_control/Spark.c
--- sh4-apps/tools/fp_control/Spark.c	2019-02-10 00:00:07.506796197 +0100
+++ apps/tools/fp_control/Spark.c	2019-02-10 00:00:17.276527447 +0100
@@ -17,23 +17,9 @@
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
  *
- ****************************************************************************
- *
- * Changes
- *
- * Date     By              Description
- * --------------------------------------------------------------------------
- * 20130909 Audioniek       Get wake up reason made functional.
- * 20130910 Audioniek       Set timer polished.
- * 20130911 Audioniek       Shutdown polished.
- * 20130911 Audioniek       Reboot built.
- * 20150404 Audioniek       -tm added for DVFD models.
- * 20150410 Audioniek       Awareness of VFD or DVFD front panel versions
- *                          added, including time mode on DVFD.
- *
- ****************************************************************************/
+ */
 
-/* ******************* includes ************************ */
+/******************** includes ************************ */
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -49,61 +35,12 @@
 #include "Spark.h"
 
 static int Spark_setText(Context_t *context, char *theText);
-int res;
-unsigned int fp_type;
-unsigned int time_mode;
 
-/* ******************* constants ************************ */
+/******************** constants ************************ */
 
 #define cVFD_DEVICE "/dev/vfd"
-#define cRTC_OFFSET_FILE "/proc/stb/fp/rtc_offset"
-#define cMAXCharsSpark 8
 
-typedef struct
-{
-	char    *arg;
-	char    *arg_long;
-	char    *arg_description;
-} tArgs;
-
-tArgs vHArgs[] =
-{
-	{ "-e", "  --setTimer           ", "Args: [time date] (format: HH:MM:SS dd-mm-YYYY)" },
-	{ "", "                         ", "      No arg:     Set the most recent timer from e2 or neutrino" },
-	{ "", "                         ", "                  to the frontcontroller and shutdown" },
-	{ "", "                         ", "      Arg time date: Set frontcontroller wake-up time to" },
-	{ "", "                         ", "                  time, shutdown, and wake up at given time" },
-	{ "-d", "  --shutdown           ", "Args: [time date] (format: HH:MM:SS dd-mm-YYYY)" },
-	{ "", "                         ", "      No arg:     Shut down immediately" },
-	{ "", "                         ", "      Arg time date: Shut down at given time/date" },
-	{ "-r", "  --reboot             ", "Args: [time date] (format: HH:MM:SS dd-mm-YYYY)" },
-	{ "", "                         ", "      No arg:     Reboot immediately (= -e current time+5 date today)" },
-	{ "", "                         ", "      Arg time date: Reboot at given time/date (= -e time date)" },
-	{ "-g", "  --getTime            ", "Args: None        Display currently set frontprocessor time" },
-	{ "-gs", " --getTimeAndSet      ", "Args: None        Set system time to current frontprocessor time" },
-	{ "-gt", " --getWTime           ", "Args: None        Get the current frontcontroller wake up time" },
-	{ "-s", "  --setTime            ", "Args: time date   Format: HH:MM:SS dd-mm-YYYY" },
-	{ "", "                         ", "                  Set the frontprocessor time (date ignored)" },
-	{ "", "                         ", "      WARNING:    front panel date will be 01-01-1970!" },
-	{ "-st", " --setWTime           ", "Args: time date   Format: HH:MM:SS dd-mm-YYYY" },
-	{ "", "                         ", "                  Set the frontprocessor wake up time" },
-	{ "-sst", "--setSystemTime      ", "Args: None        Set frontprocessor time to current system time" },
-//	{ "-p", "  --sleep              ", "Args: time date   Format: HH:MM:SS dd-mm-YYYY\n\t\tReboot receiver via fp at given time" },
-	{ "-t", "  --settext            ", "Arg : text        Show text in front panel display" },
-	{ "-l", "  --setLed             ", "Args: LED# 0|1|2  LED#: off, on or blink" },
-	{ "-i", "  --setIcon            ", "Args: icon# 0|1   Set an icon off or on" },
-	{ "-b", "  --setBrightness      ", "Arg : 0..7        Set display brightness (VFD/DVFD only)" },
-	{ "-w", "  --getWakeupReason    ", "Args: None        Get the wake up reason" },
-	{ "-tm", " --time_mode          ", "Arg : 0|1         Clock display off|on (DVFD only)" },
-	{ "-L", "  --setLight           ", "Arg : 0|1         Set display off|on" },
-	{ "-c", "  --clear              ", "Args: None        Clear display, all icons and LEDs off" },
-	{ "-v", "  --version            ", "Args: None        Get version info from frontprocessor" },
-	{ "-V", "  --verbose            ", "Args: None        Verbose operation" },
-#if defined MODEL_SPECIFIC
-	{ "-ms ", "--set_model_specific ", "Args: long long   Model specific set function" },
-#endif
-	{ NULL, NULL, NULL }
-};
+#define cMAXCharsSpark 63
 
 typedef struct
 {
@@ -118,53 +55,47 @@
 /* ******************* helper/misc functions ****************** */
 
 /* Calculate the time value which we can pass to
-    * the aotom fp. it is a mjd time (mjd=modified
-    * julian date). mjd is relative to gmt so theGMTTime
-    * must be in GMT/UTC.
-    */
-void Spark_calcAotomTime(time_t theGMTTime, char *destString)
+ * the aotom fp. its a mjd time (mjd=modified
+ * julian date). mjd is relative to gmt so theGMTTime
+ * must be in GMT/UTC.
+ */
+void Spark_setAotomTime(time_t theGMTTime, char *destString)
 {
 	/* from u-boot aotom */
 	struct tm *now_tm;
 	now_tm = localtime(&theGMTTime);
-
+	printf("Set Time (UTC): %02d:%02d:%02d %02d-%02d-%04d\n",
+	       now_tm->tm_hour, now_tm->tm_min, now_tm->tm_sec, now_tm->tm_mday, now_tm->tm_mon + 1, now_tm->tm_year + 1900);
 	double mjd = modJulianDate(now_tm);
 	int mjd_int = mjd;
-
-	printf(" mjd %d\n", mjd_int);
-
-	destString[0] = ((mjd_int & 0xff00) >> 8);
+	destString[0] = (mjd_int >> 8);
 	destString[1] = (mjd_int & 0xff);
 	destString[2] = now_tm->tm_hour;
 	destString[3] = now_tm->tm_min;
 	destString[4] = now_tm->tm_sec;
 }
 
-#if 0 //not used anywhere
 unsigned long Spark_getAotomTime(char *aotomTimeString)
 {
-	unsigned int  mjd   = ((aotomTimeString[1] & 0xff) * 256) + (aotomTimeString[2] & 0xff);
-	unsigned long epoch = ((mjd - 40587) * 86400); //01-01-1970
-	unsigned int  hour  = aotomTimeString[3] & 0xff;
-	unsigned int  min   = aotomTimeString[4] & 0xff;
-	unsigned int  sec   = aotomTimeString[5] & 0xff;
+	unsigned int mjd = ((aotomTimeString[1] & 0xFF) * 256) + (aotomTimeString[2] & 0xFF);
+	unsigned long epoch = ((mjd - 40587) * 86400);
+	unsigned int hour = aotomTimeString[3] & 0xFF;
+	unsigned int min = aotomTimeString[4] & 0xFF;
+	unsigned int sec = aotomTimeString[5] & 0xFF;
 	epoch += (hour * 3600 + min * 60 + sec);
-//	printf("MJD = %d epoch = %ld, time = %02d:%02d:%02d\n", mjd, epoch, hour, min, sec);
+	printf("MJD = %d epoch = %ld, time = %02d:%02d:%02d\n", mjd, epoch, hour, min, sec);
 	return epoch;
 }
-#endif
+
 /* ******************* driver functions ****************** */
 
 static int Spark_init(Context_t *context)
 {
 	tSparkPrivate *private = malloc(sizeof(tSparkPrivate));
 	int vFd;
-	int t_mode;
-	unsigned char strVersion[20];
-	const char *dp_type[9] = { "Unknown", "VFD", "LCD", "DVFD", "LED", "?", "?", "?", "LBD" };
-	const char *tm_type[2] = { "off", "on" };
-
+//	printf("%s\n", __func__);
 	vFd = open(cVFD_DEVICE, O_RDWR);
+
 	if (vFd < 0)
 	{
 		fprintf(stderr, "Cannot open %s\n", cVFD_DEVICE);
@@ -174,577 +105,332 @@
 	((Model_t *)context->m)->private = private;
 	memset(private, 0, sizeof(tSparkPrivate));
 	checkConfig(&private->display, &private->display_custom, &private->timeFormat, &private->wakeupDecrement);
+	return vFd;
+}
 
-	if (ioctl(vFd, VFDGETVERSION, &strVersion) < 0) // get version info (1x u32 4x u8)
+static int Spark_usage(Context_t *context, char *prg_name)
+{
+	fprintf(stderr, "%s: not implemented\n", __func__);
+	return -1;
+}
+
+static int Spark_setTime(Context_t *context, time_t *theGMTTime)
+{
+	struct aotom_ioctl_data vData;
+	printf("%s\n", __func__);
+	Spark_setAotomTime(*theGMTTime, vData.u.time.time);
+
+	if (ioctl(context->fd, VFDSETTIME, &vData) < 0)
 	{
-		perror("Get version info");
+		perror("settime: ");
 		return -1;
 	}
-	if (strVersion[0] != '\0')  /* if the version info is OK */
-	{
-		fp_type = strVersion[4];
-	}
-	else
+
+	return 0;
+}
+
+static int Spark_getTime(Context_t *context, time_t *theGMTTime)
+{
+	time_t iTime;
+	fprintf(stderr, "waiting on current time from fp ...\n");
+
+	/* front controller time */
+	if (ioctl(context->fd, VFDGETTIME, &iTime) < 0)
 	{
-		fprintf(stderr, "Error reading version from fp\n");
+		perror("gettime: ");
+		return -1;
 	}
 
-	if (ioctl(vFd, VFDGETDISPLAYTIME, &t_mode) < 0)
+	/* if we get the fp time */
+	if (iTime != '\0')
 	{
-		time_mode = 1; //if no support from aotom, assume clock on
+		fprintf(stderr, "success reading time from fp\n");
+		/* current front controller time */
+		*theGMTTime = iTime;
 	}
 	else
 	{
-		time_mode = t_mode;
-	}
-	if (disp)
-	{
-		printf("FP type is   : %s", dp_type[fp_type]);
-		if (fp_type == 3)
-		{
-			printf(", time mode %s\n\n", tm_type[time_mode]);
-		}
-		else
-		{
-			printf("\n\n");
-		}
-
+		fprintf(stderr, "error reading time from fp\n");
+		*theGMTTime = 0;
 	}
-	return vFd;
-}
 
-static int Spark_usage(Context_t *context, char *prg_name, char *cmd_name)
-{
-	int i;
-
-	fprintf(stderr, "Usage:\n\n");
-	fprintf(stderr, "%s argument [optarg1] [optarg2]\n", prg_name);
-
-	for (i = 0; ; i++)
-	{
-		if (vHArgs[i].arg == NULL)
-		{
-			break;
-		}
-		if ((cmd_name == NULL) || (strcmp(cmd_name, vHArgs[i].arg) == 0) || (strstr(vHArgs[i].arg_long, cmd_name) != NULL))
-		{
-			fprintf(stderr, "%s   %s   %s\n", vHArgs[i].arg, vHArgs[i].arg_long, vHArgs[i].arg_description);
-		}
-	}
 	return 0;
 }
 
-static int Spark_setTimer(Context_t *context, time_t *timerTime)
+static int Spark_setTimer(Context_t *context, time_t *theGMTTime)
 {
-	//-e command, rewritten, tested on Spark7162
 	struct aotom_ioctl_data vData;
 	time_t curTime;
-	time_t iTime;
 	time_t wakeupTime;
 	struct tm *ts;
-	struct tm *tss;
-	unsigned long diff;
-	int sday, smonth, syear;
-
-	time(&curTime);  //get system time (UTC)
-	tss = localtime(&curTime); //save it for the date
-	sday = tss->tm_mday;
-	smonth = tss->tm_mon + 1;
-	syear = tss->tm_year + 1900;
-	printf("Current system time: %02d:%02d:%02d %02d-%02d-%04d\n", tss->tm_hour, tss->tm_min, tss->tm_sec, tss->tm_mday, tss->tm_mon + 1, tss->tm_year + 1900);
-	if (timerTime == NULL) // -e no argument = shutdown on next e2/neutrino timer
-	{
-		wakeupTime = read_timers_utc(curTime); //get current 1st timer
-	}
+//	tSparkPrivate *private = (tSparkPrivate *)((Model_t *)context->m)->private;
+	time(&curTime);
+	ts = localtime(&curTime);
+	fprintf(stderr, "Current Time: %02d:%02d:%02d %02d-%02d-%04d\n", ts->tm_hour, ts->tm_min, ts->tm_sec, ts->tm_mday, ts->tm_mon + 1, ts->tm_year + 1900);
+
+	if (theGMTTime == NULL)
+		wakeupTime = read_timers_utc(curTime);
 	else
+		wakeupTime = *theGMTTime;
+
+	if ((wakeupTime <= 0) || (wakeupTime == LONG_MAX))
 	{
-		wakeupTime = *timerTime; //get specified time
-	}
-	if ((wakeupTime == LONG_MAX) || (wakeupTime == -1)) // if no timers set
-	{
-		return 0;
+		/* nothing to do for e2 */
+		fprintf(stderr, "no e2 timer found clearing fp wakeup time ... good bye ...\n");
+		vData.u.standby.time[0] = '\0';
+
+		if (ioctl(context->fd, VFDSTANDBY, &vData) < 0)
+		{
+			perror("standby: ");
+			return -1;
+		}
 	}
 	else
 	{
+		unsigned long diff;
+		time_t iTime;
+		fprintf(stderr, "waiting on current time from fp ...\n");
+
 		/* get front controller time */
 		if (ioctl(context->fd, VFDGETTIME, &iTime) < 0)
 		{
 			perror("Get current fp time");
 			return -1;
 		}
+
 		/* difference from now to wake up */
 		diff = (unsigned long int) wakeupTime - curTime;
+
 		if (iTime != '\0')
 		{
+			fprintf(stderr, "success reading time from fp\n");
 			/* use current front controller time */
 			curTime = iTime;
-			ts = gmtime(&curTime);
-			printf("Current fp");
 		}
 		else
 		{
-			printf("Error reading current fp time... assuming local system time\n");
-			ts = localtime(&curTime);
-			printf("Current system");
+			fprintf(stderr, "error reading time ... assuming localtime\n");
+			/* noop current time already set */
 		}
+
 		wakeupTime = curTime + diff;
-		printf(" time: %02d:%02d:%02d %02d-%02d-%04d\n", ts->tm_hour, ts->tm_min, ts->tm_sec, sday, smonth, syear);
-		if (curTime > wakeupTime)
-		{
-			printf("Wake up time in the past!\n");
-			return 0;
-		}
-		ts = gmtime(&wakeupTime);
-		printf("Wake up time: %02d:%02d:%02d", ts->tm_hour, ts->tm_min, ts->tm_sec);
-//		if (diff > 86399)
-		if ((tss->tm_mday == ts->tm_mday)
-		&& (tss->tm_mon == ts->tm_mon)
-		&& (tss->tm_year == ts->tm_year)) //today
-		{
-			printf(" (today)\n");
-		}
-		else
-		{
-			printf("\non          : %02d-%02d-%04d\n", sday, smonth, syear);
-		}
-//		if (tss->tm_mday > 1)
-//		{
-//			printf(" in %d day(s)", tss->tm_mday - 1);
-//		}
-//		if (tss->tm_mon != 0)
-//		{
-//			printf(", %d month(s)", tss->tm_mon);
-//		}
-//		if (tss->tm_year != 70)
-//		{
-//			printf(", %d year(s)", tss->tm_year - 70);
-//		}
-//		printf("\n");
-		Spark_calcAotomTime(wakeupTime, vData.u.standby.time);
+		Spark_setAotomTime(wakeupTime, vData.u.standby.time);
+
 		if (ioctl(context->fd, VFDSTANDBY, &wakeupTime) < 0)
 		{
 			perror("Shut down until wake up time");
 			return -1;
 		}
 	}
+
 	return 0;
 }
 
+static int Spark_getTimer(Context_t *context, time_t *theGMTTime)
+{
+	fprintf(stderr, "%s: not implemented\n", __func__);
+	return -1;
+}
+
 static int Spark_shutdown(Context_t *context, time_t *shutdownTimeGMT)
 {
-	//-d command, partially rewritten
-	struct aotom_ioctl_data vData;
 	time_t curTime;
-	time_t wakeupTime;
-	struct tm *ts;
 
-	/* shutdown immediately */
+	/* shutdown immediate */
 	if (*shutdownTimeGMT == -1)
+		return (Spark_setTimer(context, NULL));
+
+	while (1)
 	{
-		if (ioctl(context->fd, VFDPOWEROFF, &vData) < 0)
+		time(&curTime);
+
+		/*printf("curTime = %d, shutdown %d\n", curTime, *shutdownTimeGMT);*/
+
+		if (curTime >= *shutdownTimeGMT)
 		{
-			perror("Shut down immediately");
-			return -1;
+			/* set most recent e2 timer and bye bye */
+			return (Spark_setTimer(context, NULL));
 		}
-		return 0;
-	}
-	/* shutdown at given time */
-	wakeupTime = *shutdownTimeGMT;
-	ts = localtime(&wakeupTime);
-	printf("Shut down time: %02d:%02d:%02d %02d-%02d-%04d\n",
-		   ts->tm_hour, ts->tm_min, ts->tm_sec, ts->tm_mday, ts->tm_mon + 1, ts->tm_year + 1900);
-	time(&curTime);
-	ts = localtime(&curTime);
-	if (curTime > *shutdownTimeGMT)
-	{
-		printf("Shut down time in the past!\n");
-		return 0;
-	}
-	while (curTime < *shutdownTimeGMT)
-	{
-		time(&curTime);
-		ts = localtime(&curTime);
-		printf("Current time  : %02d:%02d:%02d %02d-%02d-%04d\r",
-			   ts->tm_hour, ts->tm_min, ts->tm_sec, ts->tm_mday, ts->tm_mon + 1, ts->tm_year + 1900);
-		usleep(20000);
-	}
-	printf("\n\n");
-	/* shut down */
-	if (ioctl(context->fd, VFDPOWEROFF, &vData) < 0)
-	{
-		perror("Shutdown at given time");
-		return -1;
+
+		usleep(100000);
 	}
-	return 0;
+
+	return -1;
 }
 
 static int Spark_reboot(Context_t *context, time_t *rebootTimeGMT)
 {
-	//-r command, partially rewritten
-	// Note: aotom does not have a particular reboot command
 	time_t curTime;
+	struct aotom_ioctl_data vData;
 
-	/* reboot at a given time */
-	if (*rebootTimeGMT != -1)
+	while (1)
 	{
-		return (Spark_setTimer(context, rebootTimeGMT));
-	}
-	/* reboot immediately */
-	time(&curTime);
-	*rebootTimeGMT = curTime + 5;
-	return (Spark_setTimer(context, rebootTimeGMT));
-}
+		time(&curTime);
 
-static int Spark_getTime(Context_t *context, time_t *theGMTTime)
-{
-	// -g and -gs commands, adapted for spark
-	struct tm *g_tm;
-	time_t iTime;
+		if (curTime >= *rebootTimeGMT)
+		{
+			if (ioctl(context->fd, VFDREBOOT, &vData) < 0)
+			{
+				perror("reboot: ");
+				return -1;
+			}
+		}
 
-	/* get front controller time */
-	if (ioctl(context->fd, VFDGETTIME, &iTime) < 0)
-	{
-		perror("Get time");
-		return -1;
+		usleep(100000);
 	}
-	/* if we get the fp time */
-	if (iTime != '\0')
-	{
-		/* current frontcontroller time */
-		*theGMTTime = iTime;
-		g_tm = gmtime(&iTime);
-		printf("Frontprocessor time: %02d:%02d:%02d %02d-%02d-%04d\n", g_tm->tm_hour,
-			g_tm->tm_min, g_tm->tm_sec, g_tm->tm_mday, g_tm->tm_mon + 1, g_tm->tm_year + 1900);
-	}
-	else
-	{
-		fprintf(stderr, "Error reading time from frontprocessor\n");
-		*theGMTTime = 0;
-		return -1;
-	}
-	return 1;
-}
 
-static int Spark_getWTime(Context_t *context, time_t *theGMTTime)
-{
-	//-gt command, note: VFDGETWAKEUPTIME not supported by older aotoms
-	time_t iTime;
-
-	/* front controller wake up time */
-	if (ioctl(context->fd, VFDGETWAKEUPTIME, &iTime) < 0)
-	{
-		perror("Get wakeup time");
-		return -1;
-	}
-	/* if we get the fp time */
-	if (iTime != '\0')
-	{
-		/* current frontcontroller wake up time */
-		*theGMTTime = iTime;
-	}
-	else
-	{
-		fprintf(stderr, "Error reading wake up time from frontprocessor\n");
-		*theGMTTime = 0;
-		return -1;
-	}
-	return 1;
+	return 0;
 }
 
-static int Spark_setTime(Context_t *context, time_t *theGMTTime)
+static int Spark_Sleep(Context_t *context, time_t *wakeUpGMT)
 {
-	//-s command
-	time_t sTime;
-	struct tm *s_tm;
-
-	sTime = *theGMTTime;
-	s_tm = localtime(&sTime); //get the time the user put in and the matching GMT offset
+#if 0
+	time_t curTime;
+	int sleep = 1;
+	int vFd;
+	fd_set rfds;
+	struct timeval tv;
+	int retval;
+	struct tm *ts;
+	char output[cMAXCharsSpark + 1];
+	tSparkPrivate *private = (tSparkPrivate *)((Model_t *)context->m)->private;
+	printf("%s\n", __func__);
+	vFd = open(cRC_DEVICE, O_RDWR);
 
-	sTime += s_tm->tm_gmtoff;
-	if (ioctl(context->fd, VFDSETTIME2, &sTime) < 0)
+	if (vFd < 0)
 	{
-		perror("Set time");
+		fprintf(stderr, "cannot open %s\n", cRC_DEVICE);
+		perror("");
 		return -1;
 	}
-	fprintf(stderr, "Frontprocessor time set to: %02d:%02d:%02d %02d-%02d-%04d (local)\n", s_tm->tm_hour,
-		s_tm->tm_min, s_tm->tm_sec, s_tm->tm_mday, s_tm->tm_mon + 1, s_tm->tm_year + 1900);
-	return 1;
-}
-
-static int Spark_setWTime(Context_t *context, time_t *theGMTTime)
-{
-	//-st command
-	struct tm *swtm;
-	time_t iTime;
-	int proc_fs;
-	FILE *proc_fs_file;
 
-	iTime = *theGMTTime;
-	swtm = localtime(&iTime);
-	fprintf(stderr, "Setting wake up time to %02d:%02d:%02d %02d-%02d-%04d\n", swtm->tm_hour,
-		swtm->tm_min, swtm->tm_sec, swtm->tm_mday, swtm->tm_mon + 1, swtm->tm_year + 1900);
+	printf("%s 1\n", __func__);
 
-	iTime += swtm->tm_gmtoff;
-	if (ioctl(context->fd, VFDSETPOWERONTIME, &iTime) < 0)
+	while (sleep)
 	{
-		perror("Set wake up time");
-		return -1;
+		time(&curTime);
+		ts = localtime(&curTime);
 
-		// write UTC offset to /proc/stb/fp/rtc_offset
-		proc_fs_file = fopen(cRTC_OFFSET_FILE, "w");
-		if (proc_fs_file == NULL)
+		if (curTime >= *wakeUpGMT)
 		{
-			perror("Open rtc_offset");
-			return -1;
+			sleep = 0;
 		}
-		proc_fs = fprintf(proc_fs_file, "%d", (int)swtm->tm_gmtoff);
-		if (proc_fs < 0)
+		else
 		{
-			perror("Write rtc_offset");
-			return -1;
-		}
-		fclose(proc_fs_file);
-		fprintf(stderr, "/proc/stb/fp/rtc_offset set to: %+d seconds\n", (int)swtm->tm_gmtoff);
-	}
-	return 0;
-}
+			FD_ZERO(&rfds);
+			FD_SET(vFd, &rfds);
+			tv.tv_sec = 0;
+			tv.tv_usec = 100000;
+			retval = select(vFd + 1, &rfds, NULL, NULL, &tv);
 
-static int Spark_setSTime(Context_t *context, time_t *theGMTTime)
-{
-	//-sst command
-	time_t systemTime = time(NULL);
-	struct tm *sst;
-	int proc_fs;
-	FILE *proc_fs_file;
-
-	sst = localtime(&systemTime);
-	if (sst->tm_year == 100)
-	{
-		fprintf(stderr, "Problem: system time not set.\n");
-	}
-	else
-	{
-		systemTime += sst->tm_gmtoff;
-		// set front panel clock to local time
-		if (ioctl(context->fd, VFDSETTIME2, &systemTime) < 0)
-		{
-			perror("Set FP time to system time");
-			return -1;
+			if (retval > 0)
+			{
+				sleep = 0;
+			}
 		}
-		fprintf(stderr, "Frontprocessor time set to: %02d:%02d:%02d %02d-%02d-%04d\n", sst->tm_hour,
-			 sst->tm_min, sst->tm_sec, sst->tm_mday, sst->tm_mon + 1, sst->tm_year + 1900);
 
-		// write UTC offset to /proc/stb/fp/rtc_offset
-		proc_fs_file = fopen(cRTC_OFFSET_FILE, "w");
-		if (proc_fs_file == NULL)
+		if (private->display)
 		{
-			perror("Open rtc_offset");
-			return -1;
+			strftime(output, cMAXCharsSpark + 1, private->timeFormat, ts);
+			Spark_setText(context, output);
 		}
-		proc_fs = fprintf(proc_fs_file, "%d", (int)sst->tm_gmtoff);
-		if (proc_fs < 0)
-		{
-			perror("Write rtc_offset");
-			return -1;
-		}
-		fclose(proc_fs_file);
-		fprintf(stderr, "/proc/stb/fp/rtc_offset set to: %+d seconds\n", (int)sst->tm_gmtoff);
 	}
+
+#endif
 	return 0;
 }
 
 static int Spark_setText(Context_t *context, char *theText)
 {
-	//-t command
-	char text[cMAXCharsSpark + 1];
-	int disp_size;
-
-	switch (fp_type)
-	{
-		case 3: //DVFD
-		{
-			disp_size = (time_mode ? 10 : 16);
-			break;
-		}
-		case 4: //LED
-		{
-			if (strlen(theText) > 2 //handle period, comma and colon
-			&& (theText[2] == 0x2e || theText[2] == 0x2c || theText[2] == 0x3a))
-			{
-				disp_size = 5;
-			}
-			else
-			{
-				disp_size = 4;
-			}
-			break;
-		}
-		default: //VFD and others
-		{
-			disp_size = 8;
-			break;
-		}
-	}
-	strncpy(text, theText, disp_size);
-	text[disp_size] = 0;
-	write(context->fd, text, strlen(text));
+	char vHelp[128];
+	strncpy(vHelp, theText, cMAXCharsSpark);
+	vHelp[cMAXCharsSpark] = '\0';
+	/* printf("%s, %d\n", vHelp, strlen(vHelp));*/
+	write(context->fd, vHelp, strlen(vHelp));
 	return 0;
 }
 
 static int Spark_setLed(Context_t *context, int which, int on)
 {
-	//-l command
 	struct aotom_ioctl_data vData;
-
-	if (on < 0 || on > 255)
-	{
-		printf("Illegal LED action %d (valid is 0..255)\n", on);
-		return 0;
-	}
 	vData.u.led.led_nr = which;
 	vData.u.led.on = on;
-	res = (ioctl(context->fd, VFDSETLED, &vData));
-	if (res < 0)
+
+	if (ioctl(context->fd, VFDSETLED, &vData) < 0)
 	{
 		perror("Setled");
 		return -1;
 	}
+
 	return 0;
 }
 
 static int Spark_setIcon(Context_t *context, int which, int on)
 {
-	//-i command
-	int first, last;
 	struct aotom_ioctl_data vData;
-
-	if (fp_type == 3)
-	{
-		first = 48;
-		last = 63;
-	}
-	else
-	{
-		first = 1;
-		last = 47;
-	}
-	if ((which < first || which > last) 
-	&& which != 46 //icons present on both VFD and DVFD
-	&& which != 8
-	&& which != 10
-	&& which != 11
-	&& which != 12
-	&& which != 13
-	&& which != 14
-	&& which != 26)
-	{
-		return 0;
-	}
 	vData.u.icon.icon_nr = which;
 	vData.u.icon.on = on;
+
 	if (ioctl(context->fd, VFDICONDISPLAYONOFF, &vData) < 0)
 	{
 		perror("Set icon");
 		return -1;
 	}
+
 	return 0;
 }
 
 static int Spark_setBrightness(Context_t *context, int brightness)
 {
-	//-b command
 	struct aotom_ioctl_data vData;
 
 	if (brightness < 0 || brightness > 7)
-	{
-		printf("Illegal brightness level %d (valid is 0..7)\n", brightness);
-		return 0;
-	}
+		return -1;
+
 	vData.u.brightness.level = brightness;
+	printf("%d\n", context->fd);
+
 	if (ioctl(context->fd, VFDBRIGHTNESS, &vData) < 0)
 	{
 		perror("Set brightness");
 		return -1;
 	}
-	return 0;
-}
 
-static int Spark_setLight(Context_t *context, int on)
-{
-	//-L command
-	struct aotom_ioctl_data vData;
-	if (on < 0 || on > 1)
-	{
-		printf("Illegal light value %d (valid is 0 | 1)\n", on);
-		return 0;
-	}
-	vData.u.light.onoff = on;
-	if (ioctl(context->fd, VFDDISPLAYWRITEONOFF, &vData) < 0)
-	{
-		perror("Set light");
-		return -1;
-	}
 	return 0;
 }
 
-static int Spark_setDisplayTime(Context_t *context, int on)
+static int Spark_setPwrLed(Context_t *context, int brightness)
 {
-	// -dt command
-	time_t systemTime = time(NULL);
-	struct tm *gmt;
-
-	gmt = localtime(&systemTime); //get system time
-
-	if ((gmt->tm_year + 1900) > 2016)
-	{
-		fprintf(stderr, "Option -dt is not supported on this receiver.\n");
-		return -1;
-	}
+	fprintf(stderr, "%s: not implemented\n", __func__);
+	return -1;
+}
 
-	fprintf(stderr, "Option -dt is deprecated in this receiver,\nplease use -sst or -s option in future.\n");
 
-	if (gmt->tm_year == 100)
-	{
-		fprintf(stderr, "Problem: system time not set.\n");
-	}
+static int Spark_setLight(Context_t *context, int on)
+{
+	if (on)
+		Spark_setBrightness(context, 7);
 	else
-	{
-		fprintf(stderr, "Setting front panel clock to\ncurrent system time: %02d:%02d:%02d %02d-%02d-%04d\n",
-				gmt->tm_hour, gmt->tm_min, gmt->tm_sec, gmt->tm_mday, gmt->tm_mon + 1, gmt->tm_year + 1900);
-		systemTime += gmt->tm_gmtoff;
-		if (ioctl(context->fd, VFDSETTIME2, &systemTime) < 0)
-		{
-			perror("Set FP time to system time");
-			return -1;
-		}
-	}
+		Spark_setBrightness(context, 0);
+
 	return 0;
 }
 
-static int Spark_setFan(Context_t *context, int on)
+static int Spark_Exit(Context_t *context)
 {
-	// -sf command
-	fprintf(stderr, "Set fan: not implemented,\nSparks do not have a fan!\n");
-	return -1;
-}
+	tSparkPrivate *private = (tSparkPrivate *)
+				 ((Model_t *)context->m)->private;
 
-static int Spark_setRF(Context_t *context, int on)
-{
-	// -sr command
-	fprintf(stderr, "Set RF: not implemented,\nSparks do not have an RF modulator!\n");
-	return -1;
-}
+	if (context->fd > 0)
+		close(context->fd);
 
-static int Spark_setLEDb(Context_t *context, int brightness)
-{
-	// -lb command
-	fprintf(stderr, "Set LED brightness: not implemented,\nSparks cannot control LED brightness!\n");
-	return -1;
+	free(private);
+
+	return 1;
 }
 
-static int Spark_clear(Context_t *context)
+static int Spark_Clear(Context_t *context)
 {
-	//-c command
 	struct aotom_ioctl_data vData;
 
 	if (ioctl(context->fd, VFDDISPLAYCLR, &vData) < 0)
@@ -752,163 +438,81 @@
 		perror("Clear");
 		return -1;
 	}
-	if (fp_type == 1 || fp_type == 3)
-	{
-		vData.u.icon.icon_nr = 46;
-		vData.u.icon.on = 0;
-		if (ioctl(context->fd, VFDICONDISPLAYONOFF, &vData) < 0)
-		{
-			perror("Set icon");
-			return -1;
-		}
-	}
-	vData.u.led.led_nr = 0;
-	vData.u.led.on = 0;
-	res = (ioctl(context->fd, VFDSETLED, &vData));
-	if (res < 0)
-	{
-		perror("Setled (red)");
-		return -1;
-	}
-	if (fp_type != 1)
-	{
-		vData.u.led.led_nr = 1;
-		vData.u.led.on = 0;
-		res = (ioctl(context->fd, VFDSETLED, &vData));
-		if (res < 0)
-		{
-			perror("Setled (green)");
-			return -1;
-		}
-	}
+
 	return 0;
 }
 
 static int Spark_getWakeupReason(Context_t *context, eWakeupReason *reason)
 {
-	//-w command
-	char mode[8];
-
-	if (ioctl(context->fd, VFDGETSTARTUPSTATE, mode) < 0)
+	if (ioctl(context->fd, VFDGETSTARTUPSTATE, reason) < 0)
 	{
 		perror("Get wakeup reason");
 		return -1;
 	}
-	if (mode[0] != '\0')  /* if we get the fp wake up reason */
-	{
-		*reason = mode[0] & 0xff; //get first byte
-	}
-	else
-	{
-		fprintf(stderr, "Error reading wakeup mode from frontprocessor\n");
-		*reason = 0;  //echo unknown
-	}
-	return 0;
-}
+	printf("reason = 0x%x\n", *reason);
 
-static int Spark_getVersion(Context_t *context, int *version)
-{
-	//-v command
-	unsigned char strVersion[20];
-	const char *CPU_type[3] = { "Unknown", "ATTING48", "ATTING88" };
-	const char *Display_type[9] = { "Unknown", "VFD", "LCD", "DVFD", "LED", "?", "?", "?", "LBD" };
-
-	if (ioctl(context->fd, VFDGETVERSION, &strVersion) < 0) // get version info (1x u32 4x u8)
-	{
-		perror("Get version info");
-		return -1;
-	}
-	if (strVersion[0] != '\0')  /* if the version info is OK */
-	{
-		printf("Front processor version info:\n");
-		printf("FP CPU type is   : %d (%s)\n", strVersion[0], CPU_type[strVersion[0]]);
-		printf("Display type is  : %d (%s)\n", strVersion[4], Display_type[strVersion[4]]);
-		printf("# of keys        : %d\n", strVersion[5]);
-		printf("FP SW version is : %d.%d\n", strVersion[6], strVersion[7]);
-		*version = strVersion[6] * 100 + strVersion[7];
-	}
-	else
-	{
-		fprintf(stderr, "Error reading version from fp\n");
-		*version = -1;
-	}
 	return 0;
 }
 
-static int Spark_setTimeMode(Context_t *context, int on)
+static int Spark_setDisplayTime(Context_t *context, int on)
 {
-	// -tm command
-	const char *timeMode_type[2] = { "off", "on" };
-	struct aotom_ioctl_data vData;
-
-	if (fp_type == 3)
+	if (on == 1)
 	{
-		if (on != 0)
-		{
-			on = 1;
-		}
-		vData.u.display_time.on = on;
-		if (ioctl(context->fd, VFDSETDISPLAYTIME, &vData) < 0)
+		time_t theGMTTime = time(NULL);
+		struct tm *gmt;
+		gmt = localtime(&theGMTTime);
+
+		if (gmt->tm_year == 100)
 		{
-			perror("Set time mode");
-			return -1;
+			fprintf(stderr, "RTC Time not set.\n");
 		}
-		time_mode = on;
-		if (disp)
+		else
 		{
-			printf("FP time mode is now %s.\n", timeMode_type[time_mode]);
+			fprintf(stderr, "Setting Clock to current time: %02d:%02d:%02d %02d-%02d-%04d\n",
+				gmt->tm_hour, gmt->tm_min, gmt->tm_sec, gmt->tm_mday, gmt->tm_mon + 1, gmt->tm_year + 1900);
+			theGMTTime += gmt->tm_gmtoff;
+
+			if (ioctl(context->fd, VFDREBOOT, &theGMTTime) < 0)
+			{
+				perror("settime: ");
+				return -1;
+			}
 		}
 	}
 	else
 	{
-		printf("Set time mode is only supported on DVFD displays.\n");
+		Spark_Clear(context);
 	}
-	return 0;
-}
-
-static int Spark_exit(Context_t *context)
-{
-	tSparkPrivate *private = (tSparkPrivate *)((Model_t *)context->m)->private;
 
-	if (context->fd > 0)
-	{
-		close(context->fd);
-	}
-	free(private);
-	return 1;
+	return 0;
 }
 
 Model_t Spark_model =
 {
-	.Name             = "Edision/Spark frontpanel control utility",
-	.Type             = Spark,
-	.Init             = Spark_init,
-	.Clear            = Spark_clear,
-	.Usage            = Spark_usage,
-	.SetTime          = Spark_setTime,
-	.SetSTime         = Spark_setSTime,
-	.SetTimer         = Spark_setTimer,
-	.GetTime          = Spark_getTime,
-	.GetWTime         = Spark_getWTime,
-	.SetWTime         = Spark_setWTime,
-	.Shutdown         = Spark_shutdown,
-	.Reboot           = Spark_reboot,
-	.Sleep            = NULL,
-	.SetText          = Spark_setText,
-	.SetLed           = Spark_setLed,
-	.SetIcon          = Spark_setIcon,
-	.SetBrightness    = Spark_setBrightness,
-	.GetWakeupReason  = Spark_getWakeupReason,
-	.SetLight         = Spark_setLight,
-	.SetLedBrightness = Spark_setLEDb,
-	.GetVersion       = Spark_getVersion,
-	.SetRF            = Spark_setRF,
-	.SetFan           = Spark_setFan,
-	.GetWakeupTime    = NULL,
-	.SetDisplayTime   = Spark_setDisplayTime,
-	.SetTimeMode      = Spark_setTimeMode,
-#if defined MODEL_SPECIFIC
-	.ModelSpecific    = NULL,
-#endif
-	.Exit             = Spark_exit
+	.Name                      = "Edision Spark frontpanel control utility",
+	.Type                      = Spark,
+	.Init                      = Spark_init,
+	.Clear                     = Spark_Clear,
+	.Usage                     = Spark_usage,
+	.SetTime                   = Spark_setTime,
+	.GetTime                   = Spark_getTime,
+	.SetTimer                  = Spark_setTimer,
+	.GetTimer                  = Spark_getTimer,
+	.SetDisplayTime            = Spark_setDisplayTime,
+	.Shutdown                  = Spark_shutdown,
+	.Reboot                    = Spark_reboot,
+	.Sleep                     = Spark_Sleep,
+	.SetText                   = Spark_setText,
+	.SetLed                    = Spark_setLed,
+	.SetIcon                   = Spark_setIcon,
+	.SetBrightness             = Spark_setBrightness,
+	.GetWakeupReason           = Spark_getWakeupReason,
+	.SetPwrLed                 = Spark_setPwrLed,
+	.SetLight                  = Spark_setLight,
+	.Exit                      = Spark_Exit,
+	.SetLedBrightness          = NULL,
+	.GetVersion                = NULL,
+	.SetRF                     = NULL,
+	.SetFan                    = NULL,
+	.private                   = NULL
 };
diff -Naur sh4-apps/tools/fp_control/Spark.h apps/tools/fp_control/Spark.h
--- sh4-apps/tools/fp_control/Spark.h	2019-02-10 00:00:07.506796197 +0100
+++ apps/tools/fp_control/Spark.h	2019-02-10 00:00:17.276527447 +0100
@@ -1,11 +1,8 @@
 #ifndef __Spark__
 #define __Spark__
 
-#define VFDGETVERSION     0xc0425af7
-#define VFDSETTIME2       0xc0425afd
-#define VFDGETWAKEUPTIME  0xc0425b03
-#define VFDSETDISPLAYTIME 0xc0425b04 // added by Audioniek (Cuberevo uses 0xc0425b02)
-#define VFDGETDISPLAYTIME 0xc0425b05 /* Spark specific */
+#define VFDGETVERSION    0xc0425af7
+#define VFDGETWAKEUPTIME 0xc0425b03
 
 /* this setups the mode temporarily (for one ioctl)
  * to the desired mode. currently the "normal" mode
@@ -33,16 +30,6 @@
 	int on;
 };
 
-struct set_light_s
-{
-	int onoff;
-};
-
-struct set_display_time_s
-{
-	int on;
-};
-
 /* time must be given as follows:
  * time[0] & time[1] = mjd ???
  * time[2] = hour
@@ -59,49 +46,16 @@
 	char time[5];
 };
 
-struct get_version_s
-{
-	unsigned char CpuType;
-	unsigned char DisplayInfo;
-	unsigned char scankeyNum;
-	unsigned char swMajorVersion;
-	unsigned char swSubVersion;
-};
-
-/* YYMMDDhhmmss */
-struct get_wakeuptime
-{
-	char time[12];
-};
-
-struct set_modelspecific_s
-{
-	long one;
-	long two;
-};
-
-struct get_modelspecific_s
-{
-	long key_nr;
-	long key_data;
-};
-
 struct aotom_ioctl_data
 {
 	union
 	{
 		struct set_icon_s icon;
 		struct set_led_s led;
-		struct set_light_s light;
 		struct set_brightness_s brightness;
-		struct set_display_time_s display_time;
 		struct set_mode_s mode;
 		struct set_standby_s standby;
 		struct set_time_s time;
-		struct get_version_s versionp;
-		struct get_wakeuptime wakeup_time;
-		struct get_modelspecific_s getmodelspecific;
-		struct set_modelspecific_s setmodelspecific;
 	} u;
 };
 
diff -Naur sh4-apps/tools/fp_control/Ufc960.c apps/tools/fp_control/Ufc960.c
--- sh4-apps/tools/fp_control/Ufc960.c	2019-02-10 00:00:07.506796197 +0100
+++ apps/tools/fp_control/Ufc960.c	2019-02-10 00:00:17.276527447 +0100
@@ -39,7 +39,7 @@
 static int Clear(Context_t *context);
 static int setIcon(Context_t *context, int which, int on);
 
-/* ****************** constants ************************ */
+/******************** constants ************************ */
 
 #define cVFD_DEVICE "/dev/vfd"
 #define cEVENT_DEVICE "/dev/input/event0"
@@ -65,6 +65,7 @@
 {
 	struct micom_ioctl_data micom;
 	micom.u.mode.compat = 1;
+
 	if (ioctl(fd, VFDSETMODE, &micom) < 0)
 	{
 		perror("setMode: ");
@@ -76,13 +77,13 @@
  * julian date). mjd is relativ to gmt so theGMTTime
  * must be in GMT/UTC.
  */
-static void setMicomTime(time_t theGMTTime, char* destString)
+static void setMicomTime(time_t theGMTTime, char *destString)
 {
 	/* from u-boot micom */
 	struct tm *now_tm;
 	now_tm = gmtime(&theGMTTime);
 	printf("Set Time (UTC): %02d:%02d:%02d %02d-%02d-%04d\n",
-		   now_tm->tm_hour, now_tm->tm_min, now_tm->tm_sec, now_tm->tm_mday, now_tm->tm_mon + 1, now_tm->tm_year + 1900);
+	       now_tm->tm_hour, now_tm->tm_min, now_tm->tm_sec, now_tm->tm_mday, now_tm->tm_mon + 1, now_tm->tm_year + 1900);
 	double mjd = modJulianDate(now_tm);
 	int mjd_int = mjd;
 	destString[0] = (mjd_int >> 8);
@@ -94,13 +95,14 @@
 
 static unsigned long getMicomTime(char *micomTimeString)
 {
-	unsigned int    mjd     = ((micomTimeString[1] & 0xFF) * 256) + (micomTimeString[2] & 0xFF);
-	unsigned long   epoch   = ((mjd - 40587) * 86400);
-	unsigned int    hour    = micomTimeString[3] & 0xFF;
-	unsigned int    min     = micomTimeString[4] & 0xFF;
-	unsigned int    sec     = micomTimeString[5] & 0xFF;
+	unsigned int mjd = ((micomTimeString[1] & 0xFF) * 256) + (micomTimeString[2] & 0xFF);
+	unsigned long epoch = ((mjd - 40587) * 86400);
+	unsigned int hour = micomTimeString[3] & 0xFF;
+	unsigned int min = micomTimeString[4] & 0xFF;
+	unsigned int sec = micomTimeString[5] & 0xFF;
 	epoch += (hour * 3600 + min * 60 + sec);
-	printf("MJD = %d epoch = %ld, time = %02d:%02d:%02d\n", mjd, epoch, hour, min, sec);
+	printf("MJD = %d epoch = %ld, time = %02d:%02d:%02d\n", mjd,
+	       epoch, hour, min, sec);
 	return epoch;
 }
 
@@ -112,18 +114,20 @@
 	int vFd;
 	printf("%s\n", __func__);
 	vFd = open(cVFD_DEVICE, O_RDWR);
+
 	if (vFd < 0)
 	{
 		fprintf(stderr, "cannot open %s\n", cVFD_DEVICE);
 		perror("");
 	}
+
 	((Model_t *)context->m)->private = private;
 	memset(private, 0, sizeof(tUFC960Private));
 	checkConfig(&private->display, &private->display_custom, &private->timeFormat, &private->wakeupDecrement);
 	return vFd;
 }
 
-static int usage(Context_t *context, char *prg_name, char *cmd_name)
+static int usage(Context_t *context, char *prg_name)
 {
 	fprintf(stderr, "%s: not implemented\n", __func__);
 	return -1;
@@ -134,11 +138,13 @@
 	struct micom_ioctl_data vData;
 //	printf("%s\n", __func__);
 	setMicomTime(*theGMTTime, vData.u.time.time);
+
 	if (ioctl(context->fd, VFDSETTIME, &vData) < 0)
 	{
 		perror("settime: ");
 		return -1;
 	}
+
 	return 0;
 }
 
@@ -146,12 +152,14 @@
 {
 	char fp_time[8];
 	fprintf(stderr, "Waiting on current time from fp...\n");
+
 	/* front controller time */
 	if (ioctl(context->fd, VFDGETTIME, &fp_time) < 0)
 	{
 		perror("gettime: ");
 		return -1;
 	}
+
 	/* if we get the fp time */
 	if (fp_time[0] != '\0')
 	{
@@ -164,41 +172,41 @@
 		fprintf(stderr, "error reading time from fp\n");
 		*theGMTTime = 0;
 	}
+
 	return 0;
 }
 
 static int setTimer(Context_t *context, time_t *theGMTTime)
 {
 	struct micom_ioctl_data vData;
-	time_t curTime    = 0;
-	time_t curTimeFp  = 0;
+	time_t curTime = 0;
+	time_t curTimeFp = 0;
 	time_t wakeupTime = 0;
 	struct tm *ts;
 	struct tm *tsFp;
 	struct tm *tsWakeupTime;
+//	tUFC960Private *private = (tUFC960Private *)((Model_t *)context->m)->private;
 //	printf("%s ->\n", __func__);
 	// Get current Frontpanel time
 	getTime(context, &curTimeFp);
 	tsFp = gmtime(&curTimeFp);
-	fprintf(stderr, "Current Fp Time:     %02d:%02d:%02d %02d-%02d-%04d (UTC)\n",
-			tsFp->tm_hour, tsFp->tm_min, tsFp->tm_sec,
-			tsFp->tm_mday, tsFp->tm_mon + 1, tsFp->tm_year + 1900);
+	fprintf(stderr, "Current Fp Time: %02d:%02d:%02d %02d-%02d-%04d (UTC)\n",
+		tsFp->tm_hour, tsFp->tm_min, tsFp->tm_sec,
+		tsFp->tm_mday, tsFp->tm_mon + 1, tsFp->tm_year + 1900);
 	// Get current Linux time
 	time(&curTime);
 	ts = gmtime(&curTime);
-	fprintf(stderr, "Current Linux Time:  %02d:%02d:%02d %02d-%02d-%04d (UTC)\n",
-			ts->tm_hour, ts->tm_min, ts->tm_sec,
-			ts->tm_mday, ts->tm_mon + 1, ts->tm_year + 1900);
+	fprintf(stderr, "Current Linux Time: %02d:%02d:%02d %02d-%02d-%04d (UTC)\n",
+		ts->tm_hour, ts->tm_min, ts->tm_sec,
+		ts->tm_mday, ts->tm_mon + 1, ts->tm_year + 1900);
 	// Set current Linux time as new current Frontpanel time
 	setTime(context, &curTime);
+
 	if (theGMTTime == NULL)
-	{
 		wakeupTime = read_timers_utc(curTime);
-	}
 	else
-	{
 		wakeupTime = *theGMTTime;
-	}
+
 	if ((wakeupTime <= 0) || (wakeupTime == LONG_MAX))
 	{
 		/* clear timer */
@@ -209,26 +217,29 @@
 		// Print wakeup time
 		tsWakeupTime = gmtime(&wakeupTime);
 		fprintf(stderr, "Planned Wakeup Time: %02d:%02d:%02d %02d-%02d-%04d (UTC)\n",
-				tsWakeupTime->tm_hour, tsWakeupTime->tm_min, tsWakeupTime->tm_sec,
-				tsWakeupTime->tm_mday, tsWakeupTime->tm_mon + 1, tsWakeupTime->tm_year + 1900);
+			tsWakeupTime->tm_hour, tsWakeupTime->tm_min, tsWakeupTime->tm_sec,
+			tsWakeupTime->tm_mday, tsWakeupTime->tm_mon + 1, tsWakeupTime->tm_year + 1900);
 		setMicomTime(wakeupTime, vData.u.standby.time);
 		fprintf(stderr, "Setting Planned Fp Wakeup Time to = %02X%02X %d %d %d (mtime)\n",
 			vData.u.standby.time[0], vData.u.standby.time[1], vData.u.standby.time[2],
 			vData.u.standby.time[3], vData.u.standby.time[4]);
 	}
+
 	fprintf(stderr, "Entering DeepStandby. Goodbye...\n");
 	fflush(stdout);
 	fflush(stderr);
 	sleep(2);
+
 	if (ioctl(context->fd, VFDSTANDBY, &vData) < 0)
 	{
 		perror("standby: ");
 		return -1;
 	}
+
 	return 0;
 }
 
-static int getWTime(Context_t *context, time_t *theGMTTime)
+static int getTimer(Context_t *context, time_t *theGMTTime)
 {
 	fprintf(stderr, "%s: not implemented\n", __func__);
 	return -1;
@@ -236,23 +247,27 @@
 
 static int shutdown(Context_t *context, time_t *shutdownTimeGMT)
 {
-	time_t  curTime;
+	time_t curTime;
+
 	/* shutdown immediately */
 	if (*shutdownTimeGMT == -1)
-	{
 		return (setTimer(context, NULL));
-	}
+
 	while (1)
 	{
 		time(&curTime);
+
 		/*printf("curTime = %d, shutdown %d\n", curTime, *shutdownTimeGMT);*/
+
 		if (curTime >= *shutdownTimeGMT)
 		{
 			/* set most recent e2 timer and bye bye */
 			return (setTimer(context, NULL));
 		}
+
 		usleep(100000);
 	}
+
 	return -1;
 }
 
@@ -260,9 +275,11 @@
 {
 	time_t curTime;
 	struct micom_ioctl_data vData;
+
 	while (1)
 	{
 		time(&curTime);
+
 		if (curTime >= *rebootTimeGMT)
 		{
 			if (ioctl(context->fd, VFDREBOOT, &vData) < 0)
@@ -271,8 +288,10 @@
 				return -1;
 			}
 		}
+
 		usleep(100000);
 	}
+
 	return 0;
 }
 
@@ -290,17 +309,20 @@
 	tUFC960Private *private = (tUFC960Private *)((Model_t *)context->m)->private;
 	printf("%s\n", __func__);
 	vFd = open(cEVENT_DEVICE, O_RDWR);
+
 	if (vFd < 0)
 	{
 		fprintf(stderr, "Cannot open %s\n", cEVENT_DEVICE);
 		perror("");
 		return -1;
 	}
+
 //	printf("%s 1\n", __func__);
 	while (sleep)
 	{
 		time(&curTime);
 		ts = localtime(&curTime);
+
 		if (curTime >= *wakeUpGMT)
 		{
 			sleep = 0;
@@ -312,13 +334,16 @@
 			tv.tv_sec = 0;
 			tv.tv_usec = 100000;
 			retval = select(vFd + 1, &rfds, NULL, NULL, &tv);
+
 			if (retval > 0)
 			{
 				rd = read(vFd, ev, sizeof(struct input_event) * 64);
+
 				if (rd < (int) sizeof(struct input_event))
 				{
 					continue;
 				}
+
 				for (i = 0; i < rd / sizeof(struct input_event); i++)
 				{
 					if (ev[i].type == EV_SYN)
@@ -330,19 +355,19 @@
 					else
 					{
 						if (ev[i].code == 116)
-						{
 							sleep = 0;
-						}
 					}
 				}
 			}
 		}
+
 		if (private->display)
 		{
 			strftime(output, cMAXCharsUFC960 + 1, private->timeFormat, ts);
 			setText(context, output);
 		}
 	}
+
 	return 0;
 }
 
@@ -362,11 +387,13 @@
 	vData.u.led.led_nr = which;
 	vData.u.led.on = on;
 	setMode(context->fd);
+
 	if (ioctl(context->fd, VFDSETLED, &vData) < 0)
 	{
 		perror("setLed: ");
 		return -1;
 	}
+
 	return 0;
 }
 
@@ -376,57 +403,65 @@
 	vData.u.icon.icon_nr = which;
 	vData.u.icon.on = on;
 	setMode(context->fd);
+
 	if (ioctl(context->fd, VFDICONDISPLAYONOFF, &vData) < 0)
 	{
 		perror("setIcon: ");
 		return -1;
 	}
+
 	return 0;
 }
 
 static int setBrightness(Context_t *context, int brightness)
 {
 	struct micom_ioctl_data vData;
+
 	if (brightness < 0 || brightness > 5)
-	{
 		return -1;
-	}
+
 	vData.u.brightness.level = brightness;
 	printf("%d\n", context->fd);
 	setMode(context->fd);
+
 	if (ioctl(context->fd, VFDBRIGHTNESS, &vData) < 0)
 	{
 		perror("setBrightness: ");
 		return -1;
 	}
+
 	return 0;
 }
 
+static int setPwrLed(Context_t *context, int brightness)
+{
+	fprintf(stderr, "%s: not implemented\n", __func__);
+	return -1;
+}
+
 static int setLight(Context_t *context, int on)
 {
 	if (on)
-	{
 		setBrightness(context, 5);
-	}
 	else
-	{
 		setBrightness(context, 0);
-	}
+
 	return 0;
 }
 
-#if 0
-/* FIXME: not sure if this really works for ufc960 ->must be checked */
+/* fixme: not sure if this really works for ufc960 ->must be checked */
 static int getWakeupReason(Context_t *context, int *reason)
 {
 	char mode[8];
 	fprintf(stderr, "waiting on wakeupmode from fp ...\n");
+
 	/* front controller time */
 	if (ioctl(context->fd, VFDGETWAKEUPMODE, &mode) < 0)
 	{
 		perror("getWakeupReason: ");
 		return -1;
 	}
+
 	/* if we get the fp time */
 	if (mode[0] != '\0')
 	{
@@ -439,21 +474,23 @@
 		fprintf(stderr, "error reading wakeupmode from fp\n");
 		*reason = 0;
 	}
+
 	return 0;
 }
-#endif
 
 /* FIXME: not sure if this really works for ufc960 ->must be checked */
 static int getVersion(Context_t *context, int *version)
 {
 	char strVersion[8];
 	fprintf(stderr, "Waiting on version from fp ...\n");
+
 	/* front controller time */
 	if (ioctl(context->fd, VFDGETVERSION, &strVersion) < 0)
 	{
 		perror("getVersion: ");
 		return -1;
 	}
+
 	/* if we get the version info */
 	if (strVersion[0] != '\0')
 	{
@@ -466,16 +503,17 @@
 		fprintf(stderr, "error reading version from fp\n");
 		*version = 0;
 	}
+
 	return 0;
 }
 
 static int Exit(Context_t *context)
 {
 	tUFC960Private *private = (tUFC960Private *)((Model_t *)context->m)->private;
+
 	if (context->fd > 0)
-	{
 		close(context->fd);
-	}
+
 	free(private);
 	exit(1);
 }
@@ -485,66 +523,61 @@
 	int i;
 	setText(context, "                ");
 	setBrightness(context, 5);
+
 	for (i = 1; i <= 6 ; i++)
-	{
 		setLed(context, i, 0);
-	}
+
 	for (i = 1; i <= 16 ; i++)
-	{
 		setIcon(context, i, 0);
-	}
+
 	return 0;
 }
 
 static int setLedBrightness(Context_t *context, int brightness)
 {
 	struct micom_ioctl_data vData;
+
 	if (brightness < 0 || brightness > 0xff)
-	{
 		return -1;
-	}
+
 	vData.u.brightness.level = brightness;
 	setMode(context->fd);
 	printf("%d\n", context->fd);
+
 	if (ioctl(context->fd, VFDLEDBRIGHTNESS, &vData) < 0)
 	{
 		perror("setLedBrightness: ");
 		return -1;
 	}
+
 	return 0;
 }
 
 Model_t UFC960_model =
 {
-	.Name             = "Kathrein UFC960 frontpanel control utility",
-	.Type             = Ufc960,
-	.Init             = init,
-	.Clear            = Clear,
-	.Usage            = usage,
-	.SetTime          = setTime,
-	.GetTime          = getTime,
-	.SetTimer         = setTimer,
-	.GetWTime         = getWTime,
-	.SetWTime         = NULL,
-	.Shutdown         = shutdown,
-	.Reboot           = reboot,
-	.Sleep            = Sleep,
-	.SetText          = setText,
-	.SetLed           = setLed,
-	.SetIcon          = setIcon,
-	.SetBrightness    = setBrightness,
-	.GetWakeupReason  = NULL,
-//	.GetWakeupReason  = NULL,getWakeupReason,  //TODO: CHECK IF WORKING
-	.SetLight         = setLight,
-	.SetLedBrightness = setLedBrightness,
-	.GetVersion       = getVersion,
-	.SetRF            = NULL,
-	.SetFan           = NULL,
-	.GetWakeupTime    = NULL,
-	.SetDisplayTime   = NULL,
-	.SetTimeMode      = NULL,
-#if defined MODEL_SPECIFIC
-	.ModelSpecific    = NULL,
-#endif
-	.Exit             = Exit
+	.Name                      = "Kathrein UFC960 frontpanel control utility",
+	.Type                      = Ufc960,
+	.Init                      = init,
+	.Clear                     = Clear,
+	.Usage                     = usage,
+	.SetTime                   = setTime,
+	.GetTime                   = getTime,
+	.SetTimer                  = setTimer,
+	.GetTimer                  = getTimer,
+	.Shutdown                  = shutdown,
+	.Reboot                    = reboot,
+	.Sleep                     = Sleep,
+	.SetText                   = setText,
+	.SetLed                    = setLed,
+	.SetIcon                   = setIcon,
+	.SetBrightness             = setBrightness,
+	.SetPwrLed                 = setPwrLed,
+//	.GetWakeupReason           = getWakeupReason, //TODO: CHECK IF WORKING
+	.SetLight                  = setLight,
+	.Exit                      = Exit,
+	.SetLedBrightness          = setLedBrightness,
+	.GetVersion                = getVersion,
+	.SetRF                     = NULL,
+	.SetFan                    = NULL,
+	.private                   = NULL
 };
diff -Naur sh4-apps/tools/fp_control/Ufs910_14W.c apps/tools/fp_control/Ufs910_14W.c
--- sh4-apps/tools/fp_control/Ufs910_14W.c	2019-02-10 00:00:07.506796197 +0100
+++ apps/tools/fp_control/Ufs910_14W.c	2019-02-10 00:00:17.276527447 +0100
@@ -43,7 +43,7 @@
 static int Sleep(Context_t *context, time_t *wakeUpGMT);
 static int setLight(Context_t *context, int on);
 
-/* ****************** constants ************************ */
+/******************** constants ************************ */
 //#define cmdReboot "/sbin/reboot" /* does not currently work */
 #define cmdReboot "init 6"
 #define cmdHalt "/sbin/halt"
@@ -80,6 +80,7 @@
 {
 	printf("%s\n", __func__);
 	int fd = open("/dev/ttyAS0", O_RDWR);
+
 	if ((tcgetattr(fd, &old_io)) == 0)
 	{
 		new_io = old_io;
@@ -95,9 +96,8 @@
 		tcsetattr(fd, TCSANOW, &new_io);
 	}
 	else
-	{
 		printf("Error setting raw mode.\n");
-	}
+
 	close(fd);
 	return 0;
 }
@@ -106,28 +106,22 @@
 void avs_standby(int fd_avs, unsigned int mode)
 {
 	printf("%s %d\n", __func__, mode);
+
 	if (!mode)
-	{
 		write(fd_avs, "on", 2);
-	}
 	else
-	{
 		write(fd_avs, "off", 3);
-	}
 }
 
 /* ----------------------------------------------------- */
 void net_standby(int mode)
 {
 	printf("%s\n", __func__);
+
 	if (!mode)
-	{
 		system("/sbin/ifconfig eth0 down");
-	}
-	else
-	{
+	else if (mode)
 		system("/sbin/ifconfig eth0 up");
-	}
 }
 
 /* ----------------------------------------------------- */
@@ -136,28 +130,28 @@
 	struct stmfbio_output_configuration outputConfig = {0};
 	printf("%s %d\n", __func__, mode);
 	outputConfig.outputid = 1;
+
 	if (ioctl(fd_hdmi, STMFBIO_GET_OUTPUT_CONFIG, &outputConfig) < 0)
-	{
 		perror("Getting current output configuration failed");
-	}
+
 	outputConfig.caps = 0;
 	outputConfig.activate = STMFBIO_ACTIVATE_IMMEDIATE;
 	outputConfig.analogue_config = 0;
 	outputConfig.caps |= STMFBIO_OUTPUT_CAPS_HDMI_CONFIG;
+
 	if (!mode)
 	{
 		outputConfig.hdmi_config |= STMFBIO_OUTPUT_HDMI_DISABLED;
 	}
-	else
+	else if (mode)
 	{
 		outputConfig.hdmi_config &= ~STMFBIO_OUTPUT_HDMI_DISABLED;
 	}
+
 	if (outputConfig.caps != STMFBIO_OUTPUT_CAPS_NONE)
 	{
 		if (ioctl(fd_hdmi, STMFBIO_SET_OUTPUT_CONFIG, &outputConfig) < 0)
-		{
 			perror("setting output configuration failed");
-		}
 	}
 }
 
@@ -181,38 +175,38 @@
 	setLed(context, 1, 0);
 	setLed(context, 2, 1);
 	setLed(context, 3, 0);
+
 	if (private->nfs == 0)
 	{
 		destroySerial();
 		net_standby(0);
 	}
+
 	avs_standby(fd_avs, 0);
 	hdmi_standby(fd_hdmi, 0);
 	setText(context, "                ");
+
 	for (id = 0x10; id < 0x20; id++)
-	{
 		setIcon(context, id, 0);
-	}
+
 	if (private->display == 0)
-	{
 		setLight(context, 0);
-	}
+
 	close(fd_hdmi);
 	close(fd_avs);
 }
 
 void stopPseudoStandby(Context_t *context, tUFS910Private *private)
 {
-	int id;
 	if (private->display == 0)
-	{
 		setLight(context, 1);
-	}
+
 	setText(context, "                ");
+	int id;
+
 	for (id = 0x10; id < 0x20; id++)
-	{
 		setIcon(context, id, 0);
-	}
+
 	setLed(context, 1, 0);
 	setLed(context, 2, 0);
 	setLed(context, 3, 0);
@@ -223,22 +217,24 @@
 	int fd_hdmi = open("/dev/fb0", O_RDWR);
 	int id;
 	printf("%s\n", __func__);
+
 	if (private->display == 0)
-	{
 		setLight(context, 1);
-	}
-	setText(context, "                ");
+
+	setText(context, " ");
+
 	for (id = 0x10; id < 0x20; id++)
-	{
 		setIcon(context, id, 0);
-	}
+
 	hdmi_standby(fd_hdmi, 1);
 	avs_standby(fd_avs, 1);
+
 	if (private->nfs == 0)
 	{
 		net_standby(1);
 		helloSerial();
 	}
+
 	setLed(context, 1, 0);
 	setLed(context, 2, 0);
 	setLed(context, 3, 0);
@@ -259,28 +255,28 @@
 	memset(private, 0, sizeof(tUFS910Private));
 	vFd = open(cCMDLINE, O_RDWR);
 	private->nfs = 0;
+
 	if (read(vFd, cmdLine, 512) > 0)
 	{
 		if (strstr("nfsroot", cmdLine) != NULL)
-		{
 			private->nfs = 1;
-		}
 	}
+
 	close(vFd);
+
 	if (private->nfs)
-	{
 		printf("mode = nfs\n");
-	}
 	else
-	{
 		printf("mode = non-nfs\n");
-	}
+
 	vFd = open(cVFD_DEVICE, O_RDWR);
+
 	if (vFd < 0)
 	{
 		fprintf(stderr, "Cannot open %s\n", cVFD_DEVICE);
 		perror("");
 	}
+
 	private->fd_green = open("/sys/class/leds/ufs910:green/brightness", O_WRONLY);
 	private->fd_red = open("/sys/class/leds/ufs910:red/brightness", O_WRONLY);
 	private->fd_yellow = open("/sys/class/leds/ufs910:orange/brightness", O_WRONLY);
@@ -289,7 +285,7 @@
 	return vFd;
 }
 
-static int usage(Context_t *context, char *prg_name, char *cmd_name)
+static int usage(Context_t *context, char *prg_name)
 {
 	fprintf(stderr, "%s: not implemented\n", __func__);
 	return -1;
@@ -316,22 +312,20 @@
 	time(&curTime);
 	ts = localtime(&curTime);
 	fprintf(stderr, "Current Time: %02d:%02d:%02d %02d-%02d-%04d\n",
-			ts->tm_hour, ts->tm_min, ts->tm_sec, ts->tm_mday, ts->tm_mon + 1, ts->tm_year + 1900);
+		ts->tm_hour, ts->tm_min, ts->tm_sec, ts->tm_mday, ts->tm_mon + 1, ts->tm_year + 1900);
 	startPseudoStandby(context, private);
+
 	if (theGMTTime == NULL)
-	{
 		private->wakeupTime = read_timers_utc(curTime);
-	}
 	else
-	{
 		private->wakeupTime = *theGMTTime;
-	}
+
 	Sleep(context, &private->wakeupTime);
 	stopPseudoStandby(context, private);
 	return 0;
 }
 
-static int getWTime(Context_t *context, time_t *theGMTTime)
+static int getTimer(Context_t *context, time_t *theGMTTime)
 {
 	fprintf(stderr, "%s: not implemented\n", __func__);
 	return -1;
@@ -341,36 +335,43 @@
 {
 	time_t curTime;
 	printf("%s\n", __func__);
+
 	/* shutdown immediately */
 	if (*shutdownTimeGMT == -1)
-	{
 		system(cmdHalt);
-	}
+
 	while (1)
 	{
 		time(&curTime);
+
 		if (curTime >= *shutdownTimeGMT)
 		{
 			system(cmdHalt);
 		}
+
 		usleep(100000);
 	}
+
 	return -1;
 }
 
 static int reboot(Context_t *context, time_t *rebootTimeGMT)
 {
 	time_t curTime;
+
 //	printf("%s\n", __func__);
 	while (1)
 	{
 		time(&curTime);
+
 		if (curTime >= *rebootTimeGMT)
 		{
 			system(cmdReboot);
 		}
+
 		usleep(100000);
 	}
+
 	return 0;
 }
 
@@ -389,15 +390,18 @@
 	printf("%s\n", __func__);
 	output[cMAXCharsUFS910] = '\0';
 	vFd = open("/dev/input/event0", O_RDONLY);
+
 	if (vFd < 0)
 	{
 		perror("event0");
 		return -1;
 	}
+
 	while (sleep)
 	{
 		time(&curTime);
 		ts = localtime(&curTime);
+
 		if (curTime >= *wakeUpGMT)
 		{
 			sleep = 0;
@@ -409,9 +413,11 @@
 			tv.tv_sec = 0;
 			tv.tv_usec = 100000;
 			retval = select(vFd + 1, &rfds, NULL, NULL, &tv);
+
 			if (retval > 0)
 			{
 				len = read(vFd, data, sizeof(struct input_event) * 64);
+
 				for (i = 0; i < len / sizeof(struct input_event); i++)
 				{
 					if (data[i].type == EV_SYN)
@@ -425,19 +431,19 @@
 					else
 					{
 						if (data[i].code == 116)
-						{
 							sleep = 0;
-						}
 					}
 				}
 			}
 		}
+
 		if (private->display)
 		{
 			strftime(output, cMAXCharsUFS910 + 1, private->timeFormat, ts);
 			write(private->vfd, &output, sizeof(output));
 		}
 	}
+
 	return 0;
 }
 
@@ -449,11 +455,13 @@
 	memcpy(data.data, theText, strlen(theText));
 	data.start = 0;
 	data.length = strlen(theText);
+
 	if (ioctl(private->vfd, VFDDISPLAYCHARS, &data) < 0)
 	{
 		perror("setText: ");
 		return -1;
 	}
+
 	return 0;
 }
 
@@ -461,22 +469,16 @@
 {
 	tUFS910Private *private = (tUFS910Private *)((Model_t *)context->m)->private;
 	printf("%s\n", __func__);
+
 	if (which == 1)
-	{
 		write(private->fd_green, on == 0 ? "0" : "1", 1);
-	}
 	else if (which == 2)
-	{
 		write(private->fd_red, on == 0 ? "0" : "1", 1);
-	}
 	else if (which == 3)
-	{
 		write(private->fd_yellow, on == 0 ? "0" : "1", 1);
-	}
 	else
-	{
 		return -1;
-	}
+
 	return 0;
 }
 
@@ -490,11 +492,13 @@
 	data.length = 5;
 	data.data[0] = which & 0x0f;
 	data.data[4] = on;
+
 	if (ioctl(private->vfd, VFDICONDISPLAYONOFF, &data) < 0)
 	{
 		perror("setIcon: ");
 		return -1;
 	}
+
 	return 0;
 }
 
@@ -503,41 +507,49 @@
 	struct vfd_ioctl_data data;
 	tUFS910Private *private = (tUFS910Private *)((Model_t *)context->m)->private;
 	printf("%s\n", __func__);
+
 	if (brightness < 0 || brightness > 7)
-	{
 		return -1;
-	}
+
 	memset(data.data, ' ', 63);
 	data.start = brightness & 0x07;
 	data.length = 0;
+
 	if (ioctl(private->vfd, VFDBRIGHTNESS, &data) < 0)
 	{
 		perror("setBrightness: ");
 		return -1;
 	}
+
 	return 0;
 }
 
+static int setPwrLed(Context_t *context, int brightness)
+{
+	fprintf(stderr, "%s: not implemented\n", __func__);
+	return -1;
+}
+
 static int setLight(Context_t *context, int on)
 {
 	struct vfd_ioctl_data data;
 	tUFS910Private *private = (tUFS910Private *)((Model_t *)context->m)->private;
 	printf("%s\n", __func__);
 	memset(&data, 0, sizeof(struct vfd_ioctl_data));
+
 	if (on)
-	{
 		data.start = 0x01;
-	}
 	else
-	{
 		data.start = 0x00;
-	}
+
 	data.length = 0;
+
 	if (ioctl(private->vfd, VFDDISPLAYWRITEONOFF, &data) < 0)
 	{
 		perror("setLight: ");
 		return -1;
 	}
+
 	return 0;
 }
 
@@ -545,14 +557,13 @@
 {
 	tUFS910Private *private = (tUFS910Private *)((Model_t *)context->m)->private;
 	printf("%s\n", __func__);
+
 	if (context->fd > 0)
-	{
 		close(context->fd);
-	}
+
 	if (private->vfd > 0)
-	{
 		close(private->vfd);
-	}
+
 	close(private->fd_green);
 	close(private->fd_red);
 	close(private->fd_yellow);
@@ -565,47 +576,39 @@
 	int i;
 	setText(context, "                ");
 	setBrightness(context, 7);
+
 	for (i = 1; i <= 3 ; i++)
-	{
 		setLed(context, i, 0);
-	}
+
 	for (i = 1; i <= 16 ; i++)
-	{
 		setIcon(context, i, 0);
-	}
+
 	return 0;
 }
 
 Model_t Ufs910_14W_model =
 {
-	.Name             = "Kathrein UFS910 14W frontpanel control utility",
-	.Type             = Ufs910_14W,
-	.Init             = init,
-	.Clear            = Clear,
-	.Usage            = usage,
-	.SetTime          = setTime,
-	.GetTime          = getTime,
-	.SetTimer         = setTimer,
-	.GetWTime         = getWTime,
-	.SetWTime         = NULL,
-	.Shutdown         = shutdown,
-	.Reboot           = reboot,
-	.Sleep            = Sleep,
-	.SetText          = setText,
-	.SetLed           = setLed,
-	.SetIcon          = setIcon,
-	.SetBrightness    = setBrightness,
-	.GetWakeupReason  = NULL,
-	.SetLight         = setLight,
-	.SetLedBrightness = NULL,
-	.GetVersion       = NULL,
-	.SetRF            = NULL,
-	.SetFan           = NULL,
-	.GetWakeupTime    = NULL,
-	.SetDisplayTime   = NULL,
-	.SetTimeMode      = NULL,
-#if defined MODEL_SPECIFIC
-	.ModelSpecific    = NULL,
-#endif
-	.Exit             = Exit
+	.Name                      = "Kathrein UFS910 14W frontpanel control utility",
+	.Type                      = Ufs910_14W,
+	.Init                      = init,
+	.Clear                     = Clear,
+	.Usage                     = usage,
+	.SetTime                   = setTime,
+	.GetTime                   = getTime,
+	.SetTimer                  = setTimer,
+	.GetTimer                  = getTimer,
+	.Shutdown                  = shutdown,
+	.Reboot                    = reboot,
+	.Sleep                     = Sleep,
+	.SetText                   = setText,
+	.SetLed                    = setLed,
+	.SetIcon                   = setIcon,
+	.SetBrightness             = setBrightness,
+	.SetPwrLed                 = setPwrLed,
+	.SetLight                  = setLight,
+	.Exit                      = Exit,
+	.SetLedBrightness          = NULL,
+	.SetRF                     = NULL,
+	.SetFan                    = NULL,
+	.private                   = NULL
 };
diff -Naur sh4-apps/tools/fp_control/Ufs910_1W.c apps/tools/fp_control/Ufs910_1W.c
--- sh4-apps/tools/fp_control/Ufs910_1W.c	2019-02-10 00:00:07.506796197 +0100
+++ apps/tools/fp_control/Ufs910_1W.c	2019-02-10 00:00:17.276527447 +0100
@@ -79,6 +79,7 @@
 {
 	struct termios old_io;
 	struct termios new_io;
+
 	if ((tcgetattr(fd, &old_io)) == 0)
 	{
 		new_io = old_io;
@@ -94,9 +95,8 @@
 		tcsetattr(fd, TCSANOW, &new_io);
 	}
 	else
-	{
 		printf("Error setting raw mode.\n");
-	}
+
 	return 0;
 }
 
@@ -109,23 +109,27 @@
 	((Model_t *)context->m)->private = private;
 	memset(private, 0, sizeof(tUFS910Private));
 	vFd = open(cTTY_DEVICE, O_RDWR);
+
 	if (vFd < 0)
 	{
 		fprintf(stderr, "cannot open %s\n", cTTY_DEVICE);
 		perror("");
 	}
+
 	setTemFlagsKathrein(vFd);
 	private->vfd = open(cVFD_DEVICE, O_RDWR);
+
 	if (private->vfd < 0)
 	{
 		fprintf(stderr, "Cannot open %s\n", cVFD_DEVICE);
 		perror("");
 	}
+
 	checkConfig(&private->display, &private->display_custom, &private->timeFormat, &private->wakeupDecrement);
 	return vFd;
 }
 
-static int usage(Context_t *context, char *prg_name, char *cmd_name)
+static int usage(Context_t *context, char *prg_name)
 {
 	fprintf(stderr, "%s: not implemented\n", __func__);
 	return -1;
@@ -151,31 +155,28 @@
 	unsigned long int diffTm;
 	unsigned char uTime0, uTime1, uTime2, uTime3;
 	char cTime[6];
+//	tUFS910Private *private = (tUFS910Private *)((Model_t *)context->m)->private;
 	time(&curTime);
 	ts = localtime(&curTime);
 	fprintf(stderr, "Current Time: %02d:%02d:%02d %02d-%02d-%04d\n",
-			ts->tm_hour, ts->tm_min, ts->tm_sec, ts->tm_mday, ts->tm_mon + 1, ts->tm_year + 1900);
+		ts->tm_hour, ts->tm_min, ts->tm_sec, ts->tm_mday, ts->tm_mon + 1, ts->tm_year + 1900);
+
 	if (theGMTTime == NULL)
-	{
 		wakeupTime = read_timers_utc(curTime);
-	}
 	else
-	{
 		wakeupTime = *theGMTTime;
-	}
+
 	if ((wakeupTime <= 0) || (wakeupTime == LONG_MAX))
-	{
 		wakeupTime = read_fake_timer_utc(curTime);
-	}
+
 	if (curTime > wakeupTime)
 	{
 		printf("System time wrong -> Reboot\n");
 		diffTm = 5;
 	}
 	else
-	{
 		diffTm = (unsigned long int) wakeupTime - curTime;
-	}
+
 	printf("Time difference: %ld\n", diffTm);
 	uTime0 = diffTm % 256;
 	uTime1 = (diffTm / 256) % 256;
@@ -187,10 +188,13 @@
 	cTime[2] = uTime2;
 	cTime[3] = uTime1;
 	cTime[4] = uTime0;
+
 	printf("Goodbye\n");
+
 	sleep(1);
+
 	/* SWITCH ON RED LED */
-	write(context->fd, "2" ,1);
+	write(context->fd, "2" , 1);
 	usleep(1000);
 	write(context->fd, &cTime[0], 1);
 	usleep(1000);
@@ -204,7 +208,7 @@
 	return 0;
 }
 
-static int getWTime(Context_t *context, time_t *theGMTTime)
+static int getTimer(Context_t *context, time_t *theGMTTime)
 {
 	fprintf(stderr, "%s: not implemented\n", __func__);
 	return -1;
@@ -213,36 +217,43 @@
 static int shutdown(Context_t *context, time_t *shutdownTimeGMT)
 {
 	time_t curTime;
+
 	/* shutdown immediately */
 	if (*shutdownTimeGMT == -1)
-	{
 		return (setTimer(context, NULL));
-	}
+
 	while (1)
 	{
 		time(&curTime);
+
 		if (curTime >= *shutdownTimeGMT)
 		{
 			/* set most recent e2 timer and bye bye */
- 			return (setTimer(context, NULL));
+			return (setTimer(context, NULL));
 		}
+
 		usleep(100000);
 	}
+
 	return -1;
 }
 
 static int reboot(Context_t *context, time_t *rebootTimeGMT)
 {
 	time_t curTime;
+
 	while (1)
 	{
 		time(&curTime);
+
 		if (curTime >= *rebootTimeGMT)
 		{
 			system(cmdReboot);
 		}
+
 		usleep(100000);
 	}
+
 	return 0;
 }
 
@@ -255,11 +266,14 @@
 	int retval;
 	struct tm *ts;
 	char output[cMAXCharsUFS910 + 1];
-	tUFS910Private *private = (tUFS910Private *)((Model_t *)context->m)->private;
+	tUFS910Private *private = (tUFS910Private *)
+				  ((Model_t *)context->m)->private;
+
 	while (sleep)
 	{
 		time(&curTime);
 		ts = localtime(&curTime);
+
 		if (curTime >= *wakeUpGMT)
 		{
 			sleep = 0;
@@ -271,17 +285,20 @@
 			tv.tv_sec = 0;
 			tv.tv_usec = 100000;
 			retval = select(context->fd + 1, &rfds, NULL, NULL, &tv);
+
 			if (retval > 0)
 			{
 				sleep = 0;
-			} 
+			}
 		}
+
 		if (private->display)
 		{
 			strftime(output, cMAXCharsUFS910 + 1, private->timeFormat, ts);
 			setText(context, output);
 		}
 	}
+
 	return 0;
 }
 
@@ -289,106 +306,115 @@
 {
 	struct vfd_ioctl_data data;
 	tUFS910Private *private = (tUFS910Private *)
-							  ((Model_t *)context->m)->private;
+				  ((Model_t *)context->m)->private;
 	memset(data.data, ' ', 63);
 	memcpy(data.data, theText, strlen(theText));
 	data.start = 0;
 	data.length = strlen(theText);
+
 	if (ioctl(private->vfd, VFDDISPLAYCHARS, &data) < 0)
 	{
 		perror("setText: ");
 		return -1;
 	}
+
 	return 0;
 }
 
 static int setLed(Context_t *context, int which, int on)
 {
 	if (which < cGreen || which > cYellow)
-	{
 		return -1;
-	}
+
 	if (on)
-	{
 		write(context->fd, led[which - 1].ledOn, 1);
-	}
 	else
-	{
 		write(context->fd, led[which - 1].ledOff, 1);
-	}
+
 	return 0;
 }
-	
-static int setIcon (Context_t *context, int which, int on)
+
+static int setIcon(Context_t *context, int which, int on)
 {
 	struct vfd_ioctl_data data;
-	tUFS910Private *private = (tUFS910Private *)((Model_t *)context->m)->private;
+	tUFS910Private *private = (tUFS910Private *)
+				  ((Model_t *)context->m)->private;
 	memset(data.data, ' ', 63);
 	data.start = 0;
 	data.length = 5;
 	data.data[0] = which & 0x0f;
 	data.data[4] = on;
+
 	if (ioctl(private->vfd, VFDICONDISPLAYONOFF, &data) < 0)
 	{
 		perror("setIcon: ");
 		return -1;
 	}
+
 	return 0;
 }
 
 static int setBrightness(Context_t *context, int brightness)
 {
 	struct vfd_ioctl_data data;
-	tUFS910Private *private = (tUFS910Private *)((Model_t *)context->m)->private;
+	tUFS910Private *private = (tUFS910Private *)
+				  ((Model_t *)context->m)->private;
+
 	if (brightness < 0 || brightness > 7)
-	{
 		return -1;
-	}
+
 	memset(data.data, ' ', 63);
 	data.start = brightness & 0x07;
 	data.length = 0;
+
 	if (ioctl(private->vfd, VFDBRIGHTNESS, &data) < 0)
 	{
 		perror("setBrightness: ");
 		return -1;
 	}
+
 	return 0;
 }
 
+static int setPwrLed(Context_t *context, int brightness)
+{
+	fprintf(stderr, "%s: not implemented\n", __func__);
+	return -1;
+}
+
 static int setLight(Context_t *context, int on)
 {
 	struct vfd_ioctl_data data;
 	tUFS910Private *private = (tUFS910Private *)((Model_t *)context->m)->private;
 	memset(&data, 0, sizeof(struct vfd_ioctl_data));
+
 	if (on)
-	{
 		data.start = 0x01;
-	}
 	else
-	{
 		data.start = 0x00;
-	}
+
 	data.length = 0;
+
 	if (ioctl(private->vfd, VFDDISPLAYWRITEONOFF, &data) < 0)
 	{
 		perror("setLight: ");
 		return -1;
 	}
+
 	return 0;
 }
 
 static int Exit(Context_t *context)
 {
 	tUFS910Private *private = (tUFS910Private *)
-							  ((Model_t *)context->m)->private;
+				  ((Model_t *)context->m)->private;
+
 	if (private->vfd > 0)
-	{
 		close(private->vfd);
-	}
+
 	if (context->fd > 0)
-	{
 		close(context->fd);
-	}
+
 	free(private);
 	return 1;
 }
@@ -398,48 +424,39 @@
 	int i;
 	setText(context, "                ");
 	setBrightness(context, 7);
+
 	for (i = 1; i <= 3 ; i++)
-	{
 		setLed(context, i, 0);
-	}
+
 	for (i = 1; i <= 16 ; i++)
-	{
 		setIcon(context, i, 0);
-	}
+
 	return 0;
 }
 
 Model_t Ufs910_1W_model =
 {
-	.Name             = "Kathrein UFS910 1W frontpanel control utility",
-	.Type             = Ufs910_1W,
-	.Init             = init,
-	.Clear            = Clear,
-	.Usage            = usage,
-	.SetTime          = setTime,
-	.GetTime          = getTime,
-	.SetTimer         = setTimer,
-	.GetWTime         = getWTime,
-	.SetWTime         = NULL,
-	.Shutdown         = shutdown,
-	.Reboot           = reboot,
-	.Sleep            = Sleep,
-	.SetText          = setText,
-	.SetLed           = setLed,
-	.SetIcon          = setIcon,
-	.SetBrightness    = setBrightness,
-	.GetWakeupReason  = NULL,
-	.SetLight         = setLight,
-	.SetLedBrightness = NULL,
-	.GetVersion       = NULL,
-	.SetRF            = NULL,
-	.SetFan           = NULL,
-	.GetWakeupTime    = NULL,
-	.SetDisplayTime   = NULL,
-	.SetTimeMode      = NULL,
-#if defined MODEL_SPECIFIC
-	.ModelSpecific    = NULL,
-#endif
-	.Exit             = Exit
+	.Name                      = "Kathrein UFS910 1W frontpanel control utility",
+	.Type                      = Ufs910_1W,
+	.Init                      = init,
+	.Clear                     = Clear,
+	.Usage                     = usage,
+	.SetTime                   = setTime,
+	.GetTime                   = getTime,
+	.SetTimer                  = setTimer,
+	.GetTimer                  = getTimer,
+	.Shutdown                  = shutdown,
+	.Reboot                    = reboot,
+	.Sleep                     = Sleep,
+	.SetText                   = setText,
+	.SetLed                    = setLed,
+	.SetIcon                   = setIcon,
+	.SetBrightness             = setBrightness,
+	.SetPwrLed                 = setPwrLed,
+	.SetLight                  = setLight,
+	.Exit                      = Exit,
+	.SetLedBrightness          = NULL,
+	.SetRF                     = NULL,
+	.SetFan                    = NULL,
+	.private                   = NULL
 };
-
diff -Naur sh4-apps/tools/fp_control/Ufs912.c apps/tools/fp_control/Ufs912.c
--- sh4-apps/tools/fp_control/Ufs912.c	2019-02-10 00:00:07.506796197 +0100
+++ apps/tools/fp_control/Ufs912.c	2019-02-10 00:00:17.277527420 +0100
@@ -48,55 +48,6 @@
 
 typedef struct
 {
-	char *arg;
-	char *arg_long;
-	char *arg_description;
-} tArgs;
-
-tArgs vKArgs[] =
-{
-	{ "-e", "  --setTimer           ", "Args: [time date]  Format: HH:MM:SS dd-mm-YYYY" },
-	{ "", "                         ", "      No arg: Set the most recent timer from e2 or neutrino" },
-	{ "", "                         ", "      to the frontcontroller and shutdown" },
-	{ "", "                         ", "      Arg time date: Set frontcontroller wake up time to" },
-	{ "", "                         ", "      time, shutdown, and wake up at given time" },
-	{ "-d", "  --shutdown           ", "Args: None or [time date]  Format: HH:MM:SS dd-mm-YYYY" },
-	{ "", "                         ", "      No arg: Shut down immediately" },
-	{ "", "                         ", "      Arg time date: Shut down at given time/date" },
-	{ "-r", "  --reboot             ", "Args: None" },
-	{ "", "                         ", "      No arg: Reboot immediately" },
-	{ "", "                         ", "      Arg time date: Reboot at given time/date" },
-	{ "-g", "  --getTime            ", "Args: None        Display currently set frontprocessor time" },
-//	{ "-gs", " --getTimeAndSet      ", "Args: None" },
-//	{ "", "                         ", "      Set system time to current frontprocessor time" },
-//	{ "", "                         ", "      WARNING: system date will be 01-01-1970!" },
-//	{ "-gt", " --getWTime           ", "Args: None        Get the current frontcontroller wake up time" },
-//	{ "-st", " --setWakeTime        ", "Args: time date   Format: HH:MM:SS dd-mm-YYYY" },
-//	{ "", "                         ", "      Set the frontcontroller wake up time" },
-	{ "-s", "  --setTime            ", "Args: time date   Format: HH:MM:SS dd-mm-YYYY" },
-	{ "", "                         ", "      Set the frontprocessor time" },
-//	{ "-sst", "--setSystemTime      ", "Args: None        Set front processor time to system time" },
-	{ "-p", "  --sleep              ", "Args: time date   Format: HH:MM:SS dd-mm-YYYY" },
-	{ "", "                         ", "      Reboot receiver via fp at given time" },
-	{ "-t", "  --settext            ", "Args: text        Set text to frontpanel" },
-	{ "-l", "  --setLed             ", "Args: LED# 1|0    Set an LED on or off" },
-	{ "-led", "--setLedBrightness   ", "Args: int         int=brightness (0..255)" },
-	{ "-i", "  --setIcon            ", "Args: icon# 1|0   Set an icon on or off" },
-	{ "-b", "  --setBrightness      ", "Arg : 0..7        Set display brightness" },
-	{ "-w", "  --getWakeupReason    ", "Args: None        Get the wake up reason" },
-	{ "-L", "  --setLight           ", "Arg : 0|1         Set display on/off" },
-	{ "-c", "  --clear              ", "Args: None        Clear display, all icons and LEDs off" },
-	{ "-v", "  --version            ", "Args: None        Get version info from frontprocessor" },
-//	{ "-tm", " --time_mode          ", "Args: 0/1         Set time mode" },
-#if defined MODEL_SPECIFIC
-//	{ "-ms", " --model_specific     ", "Args: int1 [int2] [int3] ... [int16]   (note: input in hex)" },
-//	{ "", "                         ", "                  Model specific test function" },
-#endif
-	{ NULL, NULL, NULL }
-};
-
-typedef struct
-{
 	int display;
 	int display_custom;
 	char *timeFormat;
@@ -111,6 +62,7 @@
 {
 	struct micom_ioctl_data micom;
 	micom.u.mode.compat = 1;
+
 	if (ioctl(fd, VFDSETMODE, &micom) < 0)
 	{
 		perror("setMode: ");
@@ -126,7 +78,6 @@
 {
 	/* from u-boot micom */
 	struct tm *now_tm;
-
 	now_tm = gmtime(&theGMTTime);
 	//printf("Set Time (UTC): %02d:%02d:%02d %02d-%02d-%04d\n",
 	// now_tm->tm_hour, now_tm->tm_min, now_tm->tm_sec, now_tm->tm_mday, now_tm->tm_mon+1, now_tm->tm_year+1900);
@@ -141,14 +92,14 @@
 
 static unsigned long getMicomTime(char *micomTimeString)
 {
-	unsigned int    mjd     = ((micomTimeString[1] & 0xFF) * 256) + (micomTimeString[2] & 0xFF);
-	unsigned long   epoch   = ((mjd - 40587) * 86400);
-	unsigned int    hour    = micomTimeString[3] & 0xFF;
-	unsigned int    min     = micomTimeString[4] & 0xFF;
-	unsigned int    sec     = micomTimeString[5] & 0xFF;
+	unsigned int mjd = ((micomTimeString[1] & 0xFF) * 256) + (micomTimeString[2] & 0xFF);
+	unsigned long epoch = ((mjd - 40587) * 86400);
+	unsigned int hour = micomTimeString[3] & 0xFF;
+	unsigned int min = micomTimeString[4] & 0xFF;
+	unsigned int sec = micomTimeString[5] & 0xFF;
 	epoch += (hour * 3600 + min * 60 + sec);
 	//printf( "MJD = %d epoch = %ld, time = %02d:%02d:%02d\n", mjd,
-	//  epoch, hour, min, sec );
+	// epoch, hour, min, sec );
 	return epoch;
 }
 
@@ -158,112 +109,101 @@
 {
 	tUFS912Private *private = malloc(sizeof(tUFS912Private));
 	int vFd;
-//	printf("%s\n", __func__);
+	printf("%s\n", __func__);
 	vFd = open(cVFD_DEVICE, O_RDWR);
+
 	if (vFd < 0)
 	{
 		fprintf(stderr, "Cannot open %s\n", cVFD_DEVICE);
 		perror("");
 	}
+
 	((Model_t *)context->m)->private = private;
 	memset(private, 0, sizeof(tUFS912Private));
 	checkConfig(&private->display, &private->display_custom, &private->timeFormat, &private->wakeupDecrement);
 	return vFd;
 }
-
-static int usage(Context_t *context, char *prg_name, char *cmd_name)
+#if 0
+static int usage(Context_t *context, char *prg_name)
 {
-	int i;
-
-	fprintf(stderr, "Usage:\n\n");
-	fprintf(stderr, "%s argument [optarg1] [optarg2]\n", prg_name);
-	for (i = 0; ; i++)
-	{
-		if (vKArgs[i].arg == NULL)
-		{
-			break;
-		}
-		if ((cmd_name == NULL) || (strcmp(cmd_name, vKArgs[i].arg) == 0) || (strstr(vKArgs[i].arg_long, cmd_name) != NULL))
-		{
-			fprintf(stderr, "%s   %s   %s\n", vKArgs[i].arg, vKArgs[i].arg_long, vKArgs[i].arg_description);
-		}
-	}
-	return 0;
+	fprintf(stderr, "%s: not implemented\n", __func__);
+	return -1;
 }
-
+#endif
 static int setTime(Context_t *context, time_t *theGMTTime)
-{  // -s command
+{
 	struct micom_ioctl_data vData;
-
 	setMicomTime(*theGMTTime, vData.u.time.time);
-	fprintf(stderr, "Setting Current FP Time to %d (MJD) %02d:%02d:%02d\n",
-			vData.u.standby.time[0] & 0xff, ((vData.u.standby.time[1] & 0xff) * 256+ vData.u.standby.time[2]) & 0xff,
-			vData.u.standby.time[3] & 0xff, vData.u.standby.time[4] & 0xff);
+	fprintf(stderr, "Setting Current Fp Time to = %02X%02X %d %d %d (mtime)\n",
+		vData.u.standby.time[0], vData.u.standby.time[1], vData.u.standby.time[2],
+		vData.u.standby.time[3], vData.u.standby.time[4]);
+
 	if (ioctl(context->fd, VFDSETTIME, &vData) < 0)
 	{
 		perror("settime: ");
 		return -1;
 	}
+
 	return 0;
 }
 
 static int getTime(Context_t *context, time_t *theGMTTime)
-{  // -g command
+{
 	char fp_time[8];
 
+//	fprintf(stderr, "Waiting for current time from fp\n");
 	/* front controller time */
 	if (ioctl(context->fd, VFDGETTIME, &fp_time) < 0)
 	{
 		perror("gettime: ");
 		return -1;
 	}
+
 	/* if we get the fp time */
 	if (fp_time[0] != '\0')
 	{
+		fprintf(stderr, "success reading time from fp\n");
 		/* current front controller time */
 		*theGMTTime = (time_t) getMicomTime(fp_time);
-//		fprintf(stderr, "Current Fp Time:     %02d:%02d:%02d MJD=%d (UTC)\n",
-//			fp_time[3], fp_time[4], fp_time[5], (fp_time[1] * 256) + fp_time[2]);
 	}
 	else
 	{
 		fprintf(stderr, "error reading time from fp\n");
 		*theGMTTime = 0;
 	}
+
 	return 0;
 }
 
 static int setTimer(Context_t *context, time_t *theGMTTime)
-{  // -e command
+{
 	struct micom_ioctl_data vData;
-	time_t curTime    = 0;
-	time_t curTimeFp  = 0;
+	time_t curTime = 0;
+	time_t curTimeFp = 0;
 	time_t wakeupTime = 0;
 	struct tm *ts;
 	struct tm *tsFp;
 	struct tm *tsWakeupTime;
-
-//	printf("%s ->\n", __func__);
+//	tUFS912Private *private = (tUFS912Private *)((Model_t *)context->m)->private;
+	printf("%s ->\n", __func__);
 	// Get current Frontpanel time
 	getTime(context, &curTimeFp);
 	tsFp = gmtime(&curTimeFp);
-	fprintf(stderr, "Current Fp Time   : %02d:%02d:%02d %02d-%02d-%04d (UTC)\n",
-			tsFp->tm_hour, tsFp->tm_min, tsFp->tm_sec, tsFp->tm_mday, tsFp->tm_mon + 1, tsFp->tm_year + 1900);
+	fprintf(stderr, "Current Fp Time: %02d:%02d:%02d %02d-%02d-%04d (UTC)\n",
+		tsFp->tm_hour, tsFp->tm_min, tsFp->tm_sec, tsFp->tm_mday, tsFp->tm_mon + 1, tsFp->tm_year + 1900);
 	// Get current Linux time
 	time(&curTime);
 	ts = gmtime(&curTime);
-	fprintf(stderr, "Current Linux Time: %02d:%02d:%02d %02d-%02d-%04d (UTC), offset = %d\n",
-			ts->tm_hour, ts->tm_min, ts->tm_sec, ts->tm_mday, ts->tm_mon + 1, ts->tm_year + 1900, 0);
+	fprintf(stderr, "Current Linux Time: %02d:%02d:%02d %02d-%02d-%04d (UTC)\n",
+		ts->tm_hour, ts->tm_min, ts->tm_sec, ts->tm_mday, ts->tm_mon + 1, ts->tm_year + 1900);
 	// Set current Linux time as new current Frontpanel time
 	setTime(context, &curTime);
+
 	if (theGMTTime == NULL)
-	{
 		wakeupTime = read_timers_utc(curTime);
-	}
 	else
-	{
 		wakeupTime = *theGMTTime;
-	}
+
 	if ((wakeupTime <= 0) || (wakeupTime == LONG_MAX))
 	{
 		/* clear timer */
@@ -274,61 +214,68 @@
 		// Print wakeup time
 		tsWakeupTime = gmtime(&wakeupTime);
 		fprintf(stderr, "Planned Wakeup Time: %02d:%02d:%02d %02d-%02d-%04d (UTC)\n",
-				tsWakeupTime->tm_hour, tsWakeupTime->tm_min, tsWakeupTime->tm_sec, tsWakeupTime->tm_mday, tsWakeupTime->tm_mon + 1, tsWakeupTime->tm_year + 1900);
+			tsWakeupTime->tm_hour, tsWakeupTime->tm_min, tsWakeupTime->tm_sec, tsWakeupTime->tm_mday, tsWakeupTime->tm_mon + 1, tsWakeupTime->tm_year + 1900);
 		setMicomTime(wakeupTime, vData.u.standby.time);
 		fprintf(stderr, "Setting Planned Fp Wakeup Time to = %02X%02X %d %d %d (mtime)\n",
-			vData.u.standby.time[0], vData.u.standby.time[1], vData.u.standby.time[2], 
+			vData.u.standby.time[0], vData.u.standby.time[1], vData.u.standby.time[2],
 			vData.u.standby.time[3], vData.u.standby.time[4]);
 	}
-	fprintf(stderr, "Entering Deep Standby. ... good bye ...\n");
+
+	fprintf(stderr, "Entering DeepStandby. ... good bye ...\n");
 	fflush(stdout);
 	fflush(stderr);
 	sleep(2);
+
 	if (ioctl(context->fd, VFDSTANDBY, &vData) < 0)
 	{
 		perror("standby: ");
 		return -1;
 	}
+
 	return 0;
 }
 
-static int getWTime(Context_t *context, time_t *theGMTTime)
-{  // -gw command
+static int getTimer(Context_t *context, time_t *theGMTTime)
+{
 	fprintf(stderr, "%s: not implemented\n", __func__);
 	return -1;
 }
 
 static int shutdown(Context_t *context, time_t *shutdownTimeGMT)
-{  // -d command
+{
 	time_t curTime;
 
-	/* shutdown immediately */
+	/* shutdown immediate */
 	if (*shutdownTimeGMT == -1)
-	{
 		return (setTimer(context, NULL));
-	}
+
 	while (1)
 	{
 		time(&curTime);
+
 		/*printf("curTime = %d, shutdown %d\n", curTime, *shutdownTimeGMT);*/
+
 		if (curTime >= *shutdownTimeGMT)
 		{
-			/* set most recent timer and bye bye */
+			/* set most recent e2 timer and bye bye */
 			return (setTimer(context, NULL));
 		}
+
 		usleep(100000);
 	}
+
 	return -1;
 }
 
 static int reboot(Context_t *context, time_t *rebootTimeGMT)
-{  // -r command
+{
 	time_t curTime;
 	struct micom_ioctl_data vData;
 
 	while (1)
 	{
 		time(&curTime);
+
 		if (curTime >= *rebootTimeGMT)
 		{
 			if (ioctl(context->fd, VFDREBOOT, &vData) < 0)
@@ -337,13 +284,15 @@
 				return -1;
 			}
 		}
+
 		usleep(100000);
 	}
+
 	return 0;
 }
 
 static int Sleep(Context_t *context, time_t *wakeUpGMT)
-{  // -p command
+{
 	time_t curTime;
 	int sleep = 1;
 	int vFd;
@@ -354,19 +303,23 @@
 	char output[cMAXCharsUFS912 + 1];
 	struct input_event ev[64];
 	tUFS912Private *private = (tUFS912Private *)((Model_t *)context->m)->private;
-
+//	printf("%s\n", __func__);
 	vFd = open(cEVENT_DEVICE, O_RDWR);
+
 	if (vFd < 0)
 	{
 		fprintf(stderr, "cannot open %s\n", cEVENT_DEVICE);
 		perror("");
 		return -1;
 	}
+
 	printf("%s 1\n", __func__);
+
 	while (sleep)
 	{
 		time(&curTime);
 		ts = localtime(&curTime);
+
 		if (curTime >= *wakeUpGMT)
 		{
 			sleep = 0;
@@ -378,13 +331,16 @@
 			tv.tv_sec = 0;
 			tv.tv_usec = 100000;
 			retval = select(vFd + 1, &rfds, NULL, NULL, &tv);
+
 			if (retval > 0)
 			{
 				rd = read(vFd, ev, sizeof(struct input_event) * 64);
+
 				if (rd < (int) sizeof(struct input_event))
 				{
 					continue;
 				}
+
 				for (i = 0; i < rd / sizeof(struct input_event); i++)
 				{
 					if (ev[i].type == EV_SYN)
@@ -396,248 +352,223 @@
 					else
 					{
 						if (ev[i].code == 116)
-						{
 							sleep = 0;
-						}
 					}
 				}
 			}
 		}
+
 		if (private->display)
 		{
 			strftime(output, cMAXCharsUFS912 + 1, private->timeFormat, ts);
 			setText(context, output);
 		}
 	}
+
 	return 0;
 }
 
 static int setText(Context_t *context, char *theText)
-{  // -t command
+{
 	char vHelp[128];
-
 	strncpy(vHelp, theText, cMAXCharsUFS912);
 	vHelp[cMAXCharsUFS912] = '\0';
+	/* printf("%s, %d\n", vHelp, strlen(vHelp));*/
 	write(context->fd, vHelp, strlen(vHelp));
 	return 0;
 }
 
 static int setLed(Context_t *context, int which, int on)
-{  // -l command
+{
 	struct micom_ioctl_data vData;
-
 	vData.u.led.led_nr = which;
 	vData.u.led.on = on;
 	setMode(context->fd);
+
 	if (ioctl(context->fd, VFDSETLED, &vData) < 0)
 	{
 		perror("setLed: ");
 		return -1;
 	}
+
 	return 0;
 }
 
 static int setIcon(Context_t *context, int which, int on)
-{  // -i command
+{
 	struct micom_ioctl_data vData;
-
 	vData.u.icon.icon_nr = which;
 	vData.u.icon.on = on;
 	setMode(context->fd);
+
 	if (ioctl(context->fd, VFDICONDISPLAYONOFF, &vData) < 0)
 	{
 		perror("setIcon: ");
 		return -1;
 	}
+
 	return 0;
 }
 
 static int setBrightness(Context_t *context, int brightness)
-{  // -b command
+{
 	struct micom_ioctl_data vData;
 
 	if (brightness < 0 || brightness > 7)
-	{
 		return -1;
-	}
+
 	vData.u.brightness.level = brightness;
 	setMode(context->fd);
-//	printf("%d\n", context->fd);
+	printf("%d\n", context->fd);
+
 	if (ioctl(context->fd, VFDBRIGHTNESS, &vData) < 0)
 	{
 		perror("setBrightness: ");
 		return -1;
 	}
+
 	return 0;
 }
 
 static int setLight(Context_t *context, int on)
-{  // -L command
-	struct micom_ioctl_data vData;
+{
+	if (on)
+		setBrightness(context, 7);
+	else
+		setBrightness(context, 0);
 
-	vData.u.light.onoff = on;
-//	setMode(context->fd);
-	if (ioctl(context->fd, VFDDISPLAYWRITEONOFF, &vData) < 0)
-	{
-		perror("Set light");
-		return -1;
-	}
 	return 0;
 }
 
-/* 0xc1 = rcu (from standby)
- * 0xc2 = front (from standby)
- * 0xc3 = time (timer)
- * 0xc4 = ac (power on)
+/* 0xc1 = rcu
+ * 0xc2 = front
+ * 0xc3 = time
+ * 0xc4 = ac ???
  */
 static int getWakeupReason(Context_t *context, eWakeupReason *reason)
 {
-	unsigned char mode[8];
+	char mode[8];
+	fprintf(stderr, "waiting on wakeupmode from fp ...\n");
+
 	/* front controller time */
 	if (ioctl(context->fd, VFDGETWAKEUPMODE, &mode) < 0)
 	{
 		perror("getWakeupReason: ");
 		return -1;
 	}
-	/* if we get the reason */
+
+	/* if we get the fp time */
 	if (mode[0] != '\0')
 	{
-		switch (mode[1])
-		{
-			case 0xc4:  // power on
-			{
-				*reason = 1;
-				break;
-			}
-			case 0xc1:  // from deep standby, remote
-			case 0xc2:  // from deep standby, front panel
-			{
-				*reason = 2;
-				break;
-			}
-			case 0xc3:  // timer
-			{
-				*reason = 3;
-				break;
-			}
-			default:
-			{
-				*reason = 0;
-				break;
-			}
-		}
+		fprintf(stderr, "Success reading wakeupmode from fp\n");
+		*reason = mode[1] & 0xff;
+		printf("reason = 0x%x\n", *reason);
 	}
 	else
 	{
 		fprintf(stderr, "Error reading wakeupmode from fp\n");
 		*reason = 0;
 	}
+
 	return 0;
 }
 
 static int getVersion(Context_t *context, int *version)
-{  // -v command
+{
 	char strVersion[8];
+
+//	fprintf(stderr, "Waiting for version info from fp ...\n");
 	/* front controller version */
 	if (ioctl(context->fd, VFDGETVERSION, &strVersion) < 0)
 	{
 		perror("getVersion: ");
 		return -1;
 	}
+
 	/* if we get the fp time */
 	if (strVersion[0] != '\0')
 	{
+		fprintf(stderr, "Success reading version from fp\n");
 		*version = strVersion[1] * 10 | strVersion[2];
+		printf("Version = %d\n", *version);
 	}
 	else
 	{
-		fprintf(stderr, "Error reading version info from fp\n");
+		fprintf(stderr, "Error reading version from fp\n");
 		*version = 0;
 	}
+
 	return 0;
 }
 
+static int Exit(Context_t *context)
+{
+	tUFS912Private *private = (tUFS912Private *)((Model_t *)context->m)->private;
+
+	if (context->fd > 0)
+		close(context->fd);
+
+	free(private);
+	return 1;
+}
+
 static int Clear(Context_t *context)
-{  // -c command
-	char string[17];
-	struct micom_ioctl_data vData;
+{
+	int i;
+	setText(context, "                ");
 
-	memset(string, 0x20, sizeof(string));
-	string[cMAXCharsUFS912] = '\0';
-	/* printf("%s, %d\n", vHelp, strlen(vHelp));*/
-	write(context->fd, string, strlen(string));
+	for (i = 2; i <= 5 ; i++)
+		setLed(context, i, 0);
+
+	for (i = 1; i <= 16 ; i++)
+		setIcon(context, i, 0);
 
-	vData.u.icon.icon_nr = 17;
-	vData.u.icon.on = 0;
-	setMode(context->fd);
-	if (ioctl(context->fd, VFDICONDISPLAYONOFF, &vData) < 0)
-	{
-		perror("Clear: ");
-		return -1;
-	}
 	return 0;
 }
 
 static int setLedBrightness(Context_t *context, int brightness)
-{  // -led command
+{
 	struct micom_ioctl_data vData;
 
 	if (brightness < 0 || brightness > 0xff)
-	{
 		return -1;
-	}
+
 	vData.u.brightness.level = brightness;
 	setMode(context->fd);
+	printf("%d\n", context->fd);
+
 	if (ioctl(context->fd, VFDLEDBRIGHTNESS, &vData) < 0)
 	{
-		perror("setLedBrightness: ");
+		perror("setledbrightness: ");
 		return -1;
 	}
-	return 0;
-}
 
-static int Exit(Context_t *context)
-{
-	tUFS912Private *private = (tUFS912Private *)((Model_t *)context->m)->private;
-	if (context->fd > 0)
-	{
-		close(context->fd);
-	}
-	free(private);
-	return 1;
+	return 0;
 }
 
 Model_t UFS912_model =
 {
-	.Name             = "Kathrein UFS912 frontpanel control utility",
-	.Type             = Ufs912,
-	.Init             = init,
-	.Clear            = Clear,
-	.Usage            = usage,
-	.SetTime          = setTime,
-	.GetTime          = getTime,
-	.SetTimer         = setTimer,
-	.GetWTime         = getWTime,
-	.SetWTime         = NULL,
-	.Shutdown         = shutdown,
-	.Reboot           = reboot,
-	.Sleep            = Sleep,
-	.SetText          = setText,
-	.SetLed           = setLed,
-	.SetIcon          = setIcon,
-	.SetBrightness    = setBrightness,
-	.GetWakeupReason  = getWakeupReason,
-	.SetLight         = setLight,
-	.SetLedBrightness = setLedBrightness,
-	.GetVersion       = getVersion,
-	.SetRF            = NULL,
-	.SetFan           = NULL,
-	.GetWakeupTime    = NULL,
-	.SetDisplayTime   = NULL,
-	.SetTimeMode      = NULL,
-#if defined MODEL_SPECIFIC
-	.ModelSpecific    = NULL,
-#endif
-	.Exit             = Exit
+	.Name                      = "Kathrein UFS912 frontpanel control utility",
+	.Type                      = Ufs912,
+	.Init                      = init,
+	.Clear                     = Clear,
+	.Usage                     = NULL,
+	.SetTime                   = setTime,
+	.GetTime                   = getTime,
+	.SetTimer                  = setTimer,
+	.GetTimer                  = getTimer,
+	.Shutdown                  = shutdown,
+	.Reboot                    = reboot,
+	.Sleep                     = Sleep,
+	.SetText                   = setText,
+	.SetLed                    = setLed,
+	.SetIcon                   = setIcon,
+	.SetBrightness             = setBrightness,
+	.SetPwrLed                 = NULL,
+	.GetWakeupReason           = getWakeupReason, //TODO: CHECK IF WORKING
+	.SetLight                  = setLight,
+	.Exit                      = Exit,
+	.SetLedBrightness          = setLedBrightness,
+	.GetVersion                = getVersion,
+	.private                   = NULL
 };
-
diff -Naur sh4-apps/tools/fp_control/Ufs912.h apps/tools/fp_control/Ufs912.h
--- sh4-apps/tools/fp_control/Ufs912.h	2019-02-10 00:00:07.506796197 +0100
+++ apps/tools/fp_control/Ufs912.h	2019-02-10 00:00:17.277527420 +0100
@@ -29,11 +29,6 @@
 	int on;
 };
 
-struct set_light_s
-{
-	int onoff;
-};
-
 /* time must be given as follows:
  * time[0] & time[1] = mjd ???
  * time[2] = hour
@@ -58,7 +53,6 @@
 		struct set_icon_s icon;
 		struct set_led_s led;
 		struct set_brightness_s brightness;
-		struct set_light_s light;
 		struct set_mode_s mode;
 		struct set_standby_s standby;
 		struct set_time_s time;
diff -Naur sh4-apps/tools/fp_control/Ufs922.c apps/tools/fp_control/Ufs922.c
--- sh4-apps/tools/fp_control/Ufs922.c	2019-02-10 00:00:07.507796169 +0100
+++ apps/tools/fp_control/Ufs922.c	2019-02-10 00:00:17.277527420 +0100
@@ -10,7 +10,7 @@
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
@@ -39,7 +39,7 @@
 static int Clear(Context_t *context);
 static int setIcon(Context_t *context, int which, int on);
 
-/* ****************** constants ************************ */
+/******************** constants ************************ */
 
 #define cVFD_DEVICE "/dev/vfd"
 #define cEVENT_DEVICE "/dev/input/event0"
@@ -65,6 +65,7 @@
 {
 	struct micom_ioctl_data micom;
 	micom.u.mode.compat = 1;
+
 	if (ioctl(fd, VFDSETMODE, &micom) < 0)
 	{
 		perror("setMode: ");
@@ -80,12 +81,9 @@
 {
 	/* from u-boot micom */
 	struct tm *now_tm;
-
 	now_tm = gmtime(&theGMTTime);
-
 	printf("Set Time (UTC): %02d:%02d:%02d %02d-%02d-%04d\n",
-		now_tm->tm_hour, now_tm->tm_min, now_tm->tm_sec, now_tm->tm_mday, now_tm->tm_mon+1, now_tm->tm_year+1900);
-
+	       now_tm->tm_hour, now_tm->tm_min, now_tm->tm_sec, now_tm->tm_mday, now_tm->tm_mon + 1, now_tm->tm_year + 1900);
 	double mjd = modJulianDate(now_tm);
 	int mjd_int = mjd;
 	destString[0] = (mjd_int >> 8);
@@ -97,18 +95,14 @@
 
 unsigned long getMicomTime(char *micomTimeString)
 {
-	unsigned int  mjd   = ((micomTimeString[1] & 0xFF) * 256) + (micomTimeString[2] & 0xFF);
-	unsigned long epoch = ((mjd - 40587)*86400);
-
-	unsigned int  hour  = micomTimeString[3] & 0xFF;
-	unsigned int  min   = micomTimeString[4] & 0xFF;
-	unsigned int  sec   = micomTimeString[5] & 0xFF;
-
+	unsigned int mjd = ((micomTimeString[1] & 0xFF) * 256) + (micomTimeString[2] & 0xFF);
+	unsigned long epoch = ((mjd - 40587) * 86400);
+	unsigned int hour = micomTimeString[3] & 0xFF;
+	unsigned int min = micomTimeString[4] & 0xFF;
+	unsigned int sec = micomTimeString[5] & 0xFF;
 	epoch += (hour * 3600 + min * 60 + sec);
-
 	printf("MJD = %d epoch = %ld, time = %02d:%02d:%02d\n", mjd,
-		epoch, hour, min, sec);
-
+	       epoch, hour, min, sec);
 	return epoch;
 }
 
@@ -118,24 +112,22 @@
 {
 	tUFS922Private *private = malloc(sizeof(tUFS922Private));
 	int vFd;
-
 //	printf("%s\n", __func__);
-
 	vFd = open(cVFD_DEVICE, O_RDWR);
+
 	if (vFd < 0)
 	{
 		fprintf(stderr, "cannot open %s\n", cVFD_DEVICE);
 		perror("");
 	}
+
 	((Model_t *)context->m)->private = private;
 	memset(private, 0, sizeof(tUFS922Private));
-
 	checkConfig(&private->display, &private->display_custom, &private->timeFormat, &private->wakeupDecrement);
-
 	return vFd;
 }
 
-static int usage(Context_t *context, char *prg_name, char *cmd_name)
+static int usage(Context_t *context, char *prg_name)
 {
 	fprintf(stderr, "%s: not implemented\n", __func__);
 	return -1;
@@ -146,18 +138,19 @@
 	struct micom_ioctl_data vData;
 	printf("%s\n", __func__);
 	setMicomTime(*theGMTTime, vData.u.time.time);
+
 	if (ioctl(context->fd, VFDSETTIME, &vData) < 0)
 	{
 		perror("settime: ");
 		return -1;
 	}
+
 	return 0;
 }
 
 static int getTime(Context_t *context, time_t *theGMTTime)
 {
 	char fp_time[8];
-
 	fprintf(stderr, "Waiting on current time from fp...\n");
 
 	/* front controller time */
@@ -166,11 +159,11 @@
 		perror("gettime: ");
 		return -1;
 	}
+
 	/* if we get the fp time */
 	if (fp_time[0] != '\0')
 	{
 //		fprintf(stderr, "Success reading time from fp\n");
-
 		/* current front controller time */
 		*theGMTTime = (time_t) getMicomTime(fp_time);
 	}
@@ -179,42 +172,40 @@
 		fprintf(stderr, "Error reading time from fp\n");
 		*theGMTTime = 0;
 	}
+
 	return 0;
 }
 
 static int setTimer(Context_t *context, time_t *theGMTTime)
 {
 	struct micom_ioctl_data vData;
-	
-	time_t curTime    = 0;
-	time_t curTimeFp  = 0;
+	time_t curTime = 0;
+	time_t curTimeFp = 0;
 	time_t wakeupTime = 0;
 	struct tm *ts;
 	struct tm *tsFp;
 	struct tm *tsWakeupTime;
+//	tUFS922Private *private = (tUFS922Private *)((Model_t *)context->m)->private;
 	printf("%s ->\n", __func__);
 	// Get current Frontpanel time
 	getTime(context, &curTimeFp);
 	tsFp = gmtime(&curTimeFp);
-	fprintf(stderr, "Current Fp Time:     %02d:%02d:%02d %02d-%02d-%04d (UTC)\n",
-			tsFp->tm_hour, tsFp->tm_min, tsFp->tm_sec,
-			tsFp->tm_mday, tsFp->tm_mon + 1, tsFp->tm_year + 1900);
+	fprintf(stderr, "Current Fp Time: %02d:%02d:%02d %02d-%02d-%04d (UTC)\n",
+		tsFp->tm_hour, tsFp->tm_min, tsFp->tm_sec,
+		tsFp->tm_mday, tsFp->tm_mon + 1, tsFp->tm_year + 1900);
 	// Get current Linux time
 	time(&curTime);
 	ts = gmtime(&curTime);
-	fprintf(stderr, "Current Linux Time:  %02d:%02d:%02d %02d-%02d-%04d (UTC)\n",
-			ts->tm_hour, ts->tm_min, ts->tm_sec,
-			ts->tm_mday, ts->tm_mon + 1, ts->tm_year + 1900);
+	fprintf(stderr, "Current Linux Time: %02d:%02d:%02d %02d-%02d-%04d (UTC)\n",
+		ts->tm_hour, ts->tm_min, ts->tm_sec,
+		ts->tm_mday, ts->tm_mon + 1, ts->tm_year + 1900);
 	// Set current Linux time as new current Frontpanel time
 	setTime(context, &curTime);
+
 	if (theGMTTime == NULL)
-	{
 		wakeupTime = read_timers_utc(curTime);
-	}
 	else
-	{
 		wakeupTime = *theGMTTime;
-	}
 
 	if ((wakeupTime <= 0) || (wakeupTime == LONG_MAX))
 	{
@@ -224,30 +215,31 @@
 	else
 	{
 		// Print wakeup time
-		tsWakeupTime = gmtime (&wakeupTime);
+		tsWakeupTime = gmtime(&wakeupTime);
 		fprintf(stderr, "Planned Wakeup Time: %02d:%02d:%02d %02d-%02d-%04d (UTC)\n",
 			tsWakeupTime->tm_hour, tsWakeupTime->tm_min, tsWakeupTime->tm_sec,
 			tsWakeupTime->tm_mday, tsWakeupTime->tm_mon + 1, tsWakeupTime->tm_year + 1900);
-
 		setMicomTime(wakeupTime, vData.u.standby.time);
 		fprintf(stderr, "Setting Planned Fp Wakeup Time to = %02X%02X %d %d %d (mtime)\n",
 			vData.u.standby.time[0], vData.u.standby.time[1], vData.u.standby.time[2],
-			vData.u.standby.time[3], vData.u.standby.time[4] );
+			vData.u.standby.time[3], vData.u.standby.time[4]);
 	}
 
 	fprintf(stderr, "Entering DeepStandby. Goodbye...\n");
 	fflush(stdout);
 	fflush(stderr);
 	sleep(2);
+
 	if (ioctl(context->fd, VFDSTANDBY, &vData) < 0)
 	{
 		perror("standby: ");
 		return -1;
 	}
+
 	return 0;
 }
 
-static int getWTime(Context_t *context, time_t *theGMTTime)
+static int getTimer(Context_t *context, time_t *theGMTTime)
 {
 	fprintf(stderr, "%s: not implemented\n", __func__);
 	return -1;
@@ -255,26 +247,27 @@
 
 static int shutdown(Context_t *context, time_t *shutdownTimeGMT)
 {
-	time_t	curTime;
+	time_t curTime;
 
 	/* shutdown immediately */
 	if (*shutdownTimeGMT == -1)
-	{
 		return (setTimer(context, NULL));
 
-	}
 	while (1)
 	{
 		time(&curTime);
+
 		/*printf("curTime = %d, shutdown %d\n", curTime, *shutdownTimeGMT);*/
-	
+
 		if (curTime >= *shutdownTimeGMT)
 		{
 			/* set most recent e2 timer and bye bye */
 			return (setTimer(context, NULL));
 		}
+
 		usleep(100000);
 	}
+
 	return -1;
 }
 
@@ -286,6 +279,7 @@
 	while (1)
 	{
 		time(&curTime);
+
 		if (curTime >= *rebootTimeGMT)
 		{
 			if (ioctl(context->fd, VFDREBOOT, &vData) < 0)
@@ -294,8 +288,10 @@
 				return -1;
 			}
 		}
+
 		usleep(100000);
 	}
+
 	return 0;
 }
 
@@ -320,12 +316,14 @@
 		perror("");
 		return -1;
 	}
-	
+
 	printf("%s 1\n", __func__);
+
 	while (sleep)
 	{
 		time(&curTime);
 		ts = localtime(&curTime);
+
 		if (curTime >= *wakeUpGMT)
 		{
 			sleep = 0;
@@ -337,6 +335,7 @@
 			tv.tv_sec = 0;
 			tv.tv_usec = 100000;
 			retval = select(vFd + 1, &rfds, NULL, NULL, &tv);
+
 			if (retval > 0)
 			{
 				rd = read(vFd, ev, sizeof(struct input_event) * 64);
@@ -345,6 +344,7 @@
 				{
 					continue;
 				}
+
 				for (i = 0; i < rd / sizeof(struct input_event); i++)
 				{
 					if (ev[i].type == EV_SYN)
@@ -356,19 +356,19 @@
 					else
 					{
 						if (ev[i].code == 116)
-						{
 							sleep = 0;
-						}
 					}
 				}
 			}
 		}
+
 		if (private->display)
 		{
 			strftime(output, cMAXCharsUFS922 + 1, private->timeFormat, ts);
 			setText(context, output);
 		}
 	}
+
 	return 0;
 }
 
@@ -388,11 +388,13 @@
 	vData.u.led.led_nr = which;
 	vData.u.led.on = on;
 	setMode(context->fd);
+
 	if (ioctl(context->fd, VFDSETLED, &vData) < 0)
 	{
 		perror("setLed: ");
 		return -1;
 	}
+
 	return 0;
 }
 
@@ -402,57 +404,65 @@
 	vData.u.icon.icon_nr = which;
 	vData.u.icon.on = on;
 	setMode(context->fd);
+
 	if (ioctl(context->fd, VFDICONDISPLAYONOFF, &vData) < 0)
 	{
 		perror("setIcon: ");
 		return -1;
 	}
+
 	return 0;
 }
 
 static int setBrightness(Context_t *context, int brightness)
 {
 	struct micom_ioctl_data vData;
+
 	if (brightness < 0 || brightness > 7)
-	{
 		return -1;
-	}
+
 	vData.u.brightness.level = brightness;
 	printf("%d\n", context->fd);
 	setMode(context->fd);
+
 	if (ioctl(context->fd, VFDBRIGHTNESS, &vData) < 0)
 	{
 		perror("setBrightness: ");
 		return -1;
 	}
+
 	return 0;
 }
 
+static int setPwrLed(Context_t *context, int brightness)
+{
+	fprintf(stderr, "%s: not implemented\n", __func__);
+	return -1;
+}
+
 static int setLight(Context_t *context, int on)
 {
 	if (on)
-	{
 		setBrightness(context, 7);
-	}
 	else
-	{
 		setBrightness(context, 0);
-	}
+
 	return 0;
 }
 
 /* FIXME: not sure if this really works for ufs922 ->must be checked */
-#if 0
 static int getWakeupReason(Context_t *context, int *reason)
 {
 	char mode[8];
 	fprintf(stderr, "Waiting for wakeupmode from fp...\n");
+
 	/* front controller time */
 	if (ioctl(context->fd, VFDGETWAKEUPMODE, &mode) < 0)
 	{
 		perror("getWakeupReason: ");
 		return -1;
 	}
+
 	/* if we get the fp time */
 	if (mode[0] != '\0')
 	{
@@ -465,21 +475,23 @@
 		fprintf(stderr, "error reading wakeupmode from fp\n");
 		*reason = 0;
 	}
+
 	return 0;
 }
-#endif
 
 /* FIXME: not sure if this really works for ufs922 ->must be checked */
 static int getVersion(Context_t *context, int *version)
 {
-	char    strVersion[8];
+	char strVersion[8];
 	fprintf(stderr, "Waiting on version from fp...\n");
+
 	/* front controller version info */
 	if (ioctl(context->fd, VFDGETVERSION, &strVersion) < 0)
 	{
 		perror("getVersion: ");
 		return -1;
 	}
+
 	/* if we get the fp time */
 	if (strVersion[0] != '\0')
 	{
@@ -492,6 +504,7 @@
 		fprintf(stderr, "error reading version from fp\n");
 		*version = 0;
 	}
+
 	return 0;
 }
 
@@ -500,9 +513,7 @@
 	tUFS922Private *private = (tUFS922Private *)((Model_t *)context->m)->private;
 
 	if (context->fd > 0)
-	{
 		close(context->fd);
-	}
 
 	free(private);
 	exit(1);
@@ -513,67 +524,61 @@
 	int i;
 	setText(context, "                ");
 	setBrightness(context, 7);
+
 	for (i = 1; i <= 6 ; i++)
-	{
 		setLed(context, i, 0);
-	}
+
 	for (i = 1; i <= 16 ; i++)
-	{
 		setIcon(context, i, 0);
-	}
+
 	return 0;
 }
 
 static int setLedBrightness(Context_t *context, int brightness)
 {
 	struct micom_ioctl_data vData;
+
 	if (brightness < 0 || brightness > 0xff)
-	{
 		return -1;
-	}
 
 	vData.u.brightness.level = brightness;
 	setMode(context->fd);
 	printf("%d\n", context->fd);
+
 	if (ioctl(context->fd, VFDLEDBRIGHTNESS, &vData) < 0)
 	{
 		perror("setledbrightness: ");
 		return -1;
 	}
+
 	return 0;
 }
 
 Model_t UFS922_model =
 {
-	.Name             = "Kathrein UFS922 frontpanel control utility",
-	.Type             = Ufs922,
-	.Init             = init,
-	.Clear            = Clear,
-	.Usage            = usage,
-	.SetTime          = setTime,
-	.GetTime          = getTime,
-	.SetTimer         = setTimer,
-	.GetWTime         = getWTime,
-	.SetWTime         = NULL,
-	.Shutdown         = shutdown,
-	.Reboot           = reboot,
-	.Sleep            = Sleep,
-	.SetText          = setText,
-	.SetLed           = setLed,
-	.SetIcon          = setIcon,
-	.SetBrightness    = setBrightness,
-	.GetWakeupReason  = NULL,
-//	.GetWakeupReason  = getWakeupReason,  //TODO: CHECK IF WORKING
-	.SetLight         = setLight,
-	.SetLedBrightness = setLedBrightness,
-	.GetVersion       = getVersion,
-	.SetRF            = NULL,
-	.SetFan           = NULL,
-	.GetWakeupTime    = NULL,
-	.SetDisplayTime   = NULL,
-	.SetTimeMode      = NULL,
-#if defined MODEL_SPECIFIC
-	.ModelSpecific    = NULL,
-#endif
-	.Exit             = Exit
+	.Name                      = "Kathrein UFS922 frontpanel control utility",
+	.Type                      = Ufs922,
+	.Init                      = init,
+	.Clear                     = Clear,
+	.Usage                     = usage,
+	.SetTime                   = setTime,
+	.GetTime                   = getTime,
+	.SetTimer                  = setTimer,
+	.GetTimer                  = getTimer,
+	.Shutdown                  = shutdown,
+	.Reboot                    = reboot,
+	.Sleep                     = Sleep,
+	.SetText                   = setText,
+	.SetLed                    = setLed,
+	.SetIcon                   = setIcon,
+	.SetBrightness             = setBrightness,
+	.SetPwrLed                 = setPwrLed,
+//	.GetWakeupReason           = getWakeupReason,  //TODO: CHECK IF WORKING
+	.SetLight                  = setLight,
+	.Exit                      = Exit,
+	.SetLedBrightness          = setLedBrightness,
+	.GetVersion                = getVersion,
+	.SetRF                     = NULL,
+	.SetFan                    = NULL,
+	.private                   = NULL
 };
diff -Naur sh4-apps/tools/fp_control/Vip2.c apps/tools/fp_control/Vip2.c
--- sh4-apps/tools/fp_control/Vip2.c	2019-02-10 00:00:07.507796169 +0100
+++ apps/tools/fp_control/Vip2.c	2019-02-10 00:00:17.277527420 +0100
@@ -19,7 +19,7 @@
  *
  */
 
-/* ******************* includes ************************ */
+/******************** includes ************************ */
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -36,7 +36,7 @@
 
 static int setText(Context_t *context, char *theText);
 
-/* ******************* constants ************************ */
+/******************** constants ************************ */
 
 #define cVFD_DEVICE "/dev/vfd"
 
@@ -65,8 +65,7 @@
 	struct tm *now_tm;
 	now_tm = gmtime(&theGMTTime);
 	printf("Set Time (UTC): %02d:%02d:%02d %02d-%02d-%04d\n",
-		now_tm->tm_hour, now_tm->tm_min, now_tm->tm_sec, now_tm->tm_mday, now_tm->tm_mon+1, now_tm->tm_year+1900);
-
+	       now_tm->tm_hour, now_tm->tm_min, now_tm->tm_sec, now_tm->tm_mday, now_tm->tm_mon + 1, now_tm->tm_year + 1900);
 	double mjd = modJulianDate(now_tm);
 	int mjd_int = mjd;
 	destString[0] = (mjd_int >> 8);
@@ -78,17 +77,14 @@
 
 unsigned long getAotomTime(char *aotomTimeString)
 {
-	unsigned int 	mjd 	= ((aotomTimeString[1] & 0xFF) * 256) + (aotomTimeString[2] & 0xFF);
-	unsigned long 	epoch 	= ((mjd - 40587)*86400);
-
-	unsigned int 	hour 	= aotomTimeString[3] & 0xFF;
-	unsigned int 	min 	= aotomTimeString[4] & 0xFF;
-	unsigned int 	sec 	= aotomTimeString[5] & 0xFF;
-
+	unsigned int mjd = ((aotomTimeString[1] & 0xFF) * 256) + (aotomTimeString[2] & 0xFF);
+	unsigned long epoch = ((mjd - 40587) * 86400);
+	unsigned int hour = aotomTimeString[3] & 0xFF;
+	unsigned int min = aotomTimeString[4] & 0xFF;
+	unsigned int sec = aotomTimeString[5] & 0xFF;
 	epoch += (hour * 3600 + min * 60 + sec);
 	printf("MJD = %d epoch = %ld, time = %02d:%02d:%02d\n", mjd,
-		epoch, hour, min, sec);
-
+	       epoch, hour, min, sec);
 	return epoch;
 }
 
@@ -98,24 +94,22 @@
 {
 	tVIP2Private *private = malloc(sizeof(tVIP2Private));
 	int vFd;
-
 //	printf("%s\n", __func__);
-
 	vFd = open(cVFD_DEVICE, O_RDWR);
+
 	if (vFd < 0)
 	{
 		fprintf(stderr, "Cannot open %s\n", cVFD_DEVICE);
 		perror("");
 	}
+
 	((Model_t *)context->m)->private = private;
 	memset(private, 0, sizeof(tVIP2Private));
-
 	checkConfig(&private->display, &private->display_custom, &private->timeFormat, &private->wakeupDecrement);
-
 	return vFd;
 }
 
-static int usage(Context_t *context, char *prg_name, char *cmd_name)
+static int usage(Context_t *context, char *prg_name)
 {
 	fprintf(stderr, "%s: not implemented\n", __func__);
 	return -1;
@@ -124,21 +118,21 @@
 static int setTime(Context_t *context, time_t *theGMTTime)
 {
 	struct aotom_ioctl_data vData;
-
 	printf("%s\n", __func__);
 	setAotomTime(*theGMTTime, vData.u.time.time);
+
 	if (ioctl(context->fd, VFDSETTIME, &vData) < 0)
 	{
 		perror("settime: ");
 		return -1;
 	}
+
 	return 0;
 }
 
 static int getTime(Context_t *context, time_t *theGMTTime)
 {
 	char fp_time[8];
-
 	fprintf(stderr, "Waiting for current time from fp...\n");
 
 	/* front controller time */
@@ -147,6 +141,7 @@
 		perror("gettime: ");
 		return -1;
 	}
+
 	/* if we get the fp time */
 	if (fp_time[0] != '\0')
 	{
@@ -159,6 +154,7 @@
 		fprintf(stderr, "error reading time from fp\n");
 		*theGMTTime = 0;
 	}
+
 	return 0;
 }
 
@@ -168,26 +164,23 @@
 	time_t curTime;
 	time_t wakeupTime;
 	struct tm *ts;
-
+//	tVIP2Private *private = (tVIP2Private *)((Model_t *)context->m)->private;
 	time(&curTime);
 	ts = localtime(&curTime);
 	fprintf(stderr, "Current Time: %02d:%02d:%02d %02d-%02d-%04d\n",
-		ts->tm_hour, ts->tm_min, ts->tm_sec, ts->tm_mday, ts->tm_mon+1, ts->tm_year+1900);
+		ts->tm_hour, ts->tm_min, ts->tm_sec, ts->tm_mday, ts->tm_mon + 1, ts->tm_year + 1900);
 
 	if (theGMTTime == NULL)
-	{
 		wakeupTime = read_timers_utc(curTime);
-	}
 	else
-	{
 		wakeupTime = *theGMTTime;
-	}
 
 	if ((wakeupTime <= 0) || (wakeupTime == LONG_MAX))
 	{
 		/* nothing to do for e2 */
 		fprintf(stderr, "no e2 timer found clearing fp wakeup time ... good bye ...\n");
 		vData.u.standby.time[0] = '\0';
+
 		if (ioctl(context->fd, VFDSTANDBY, &vData) < 0)
 		{
 			perror("standby: ");
@@ -198,22 +191,22 @@
 	{
 		unsigned long diff;
 		char fp_time[8];
-
 		fprintf(stderr, "Waiting for current time from fp ...\n");
 
 		/* front controller time */
 		if (ioctl(context->fd, VFDGETTIME, &fp_time) < 0)
 		{
 			perror("gettime: ");
-		return -1;
+			return -1;
 		}
+
 		/* difference from now to wake up */
 		diff = (unsigned long int) wakeupTime - curTime;
+
 		/* if we get the fp time */
 		if (fp_time[0] != '\0')
 		{
 //			fprintf(stderr, "success reading time from fp\n");
-
 			/* current front controller time */
 			curTime = (time_t) getAotomTime(fp_time);
 		}
@@ -222,18 +215,21 @@
 			fprintf(stderr, "Error reading time, assuming localtime.\n");
 			/* noop current time already set */
 		}
+
 		wakeupTime = curTime + diff;
 		setAotomTime(wakeupTime, vData.u.standby.time);
+
 		if (ioctl(context->fd, VFDSTANDBY, &vData) < 0)
 		{
 			perror("standby: ");
-		return -1;
+			return -1;
 		}
 	}
+
 	return 0;
 }
 
-static int getWTime(Context_t *context, time_t *theGMTTime)
+static int getTimer(Context_t *context, time_t *theGMTTime)
 {
 	fprintf(stderr, "%s: not implemented\n", __func__);
 	return -1;
@@ -241,25 +237,27 @@
 
 static int shutdown(Context_t *context, time_t *shutdownTimeGMT)
 {
-	time_t	curTime;
+	time_t curTime;
 
 	/* shutdown immediately */
 	if (*shutdownTimeGMT == -1)
-	{
 		return (setTimer(context, NULL));
-	}
 
 	while (1)
 	{
 		time(&curTime);
+
 		/*printf("curTime = %d, shutdown %d\n", curTime, *shutdownTimeGMT);*/
+
 		if (curTime >= *shutdownTimeGMT)
 		{
 			/* set most recent e2 timer and bye bye */
 			return (setTimer(context, NULL));
 		}
+
 		usleep(100000);
 	}
+
 	return -1;
 }
 
@@ -271,6 +269,7 @@
 	while (1)
 	{
 		time(&curTime);
+
 		if (curTime >= *rebootTimeGMT)
 		{
 			if (ioctl(context->fd, VFDREBOOT, &vData) < 0)
@@ -279,34 +278,37 @@
 				return -1;
 			}
 		}
+
 		usleep(100000);
 	}
+
 	return 0;
 }
 
 static int Sleep(Context_t *context, time_t *wakeUpGMT)
 {
-#if 0
-	time_t     curTime;
-	int        sleep = 1;
-	int        vFd;
-	fd_set     rfds;
-	struct     timeval tv;
-	int        retval;
-	struct tm  *ts;
-	char       output[cMAXCharsVIP2 + 1];
+	time_t curTime;
+	int sleep = 1;
+	int vFd;
+	fd_set rfds;
+	struct timeval tv;
+	int retval;
+	struct tm *ts;
+	char output[cMAXCharsVIP2 + 1];
 	tVIP2Private *private = (tVIP2Private *)((Model_t *)context->m)->private;
-
+#if 0
 //	printf("%s\n", __func__);
-
 	vFd = open(cRC_DEVICE, O_RDWR);
+
 	if (vFd < 0)
 	{
 		fprintf(stderr, "cannot open %s\n", cRC_DEVICE);
 		perror("");
 		return -1;
 	}
+
 	printf("%s 1\n", __func__);
+
 	while (sleep)
 	{
 		time(&curTime);
@@ -323,17 +325,20 @@
 			tv.tv_sec = 0;
 			tv.tv_usec = 100000;
 			retval = select(vFd + 1, &rfds, NULL, NULL, &tv);
+
 			if (retval > 0)
 			{
 				sleep = 0;
 			}
 		}
+
 		if (private->display)
 		{
 			strftime(output, cMAXCharsVIP2 + 1, private->timeFormat, ts);
 			setText(context, output);
 		}
 	}
+
 #endif
 	return 0;
 }
@@ -341,7 +346,6 @@
 static int setText(Context_t *context, char *theText)
 {
 	char vHelp[128];
-
 	strncpy(vHelp, theText, cMAXCharsVIP2);
 	vHelp[cMAXCharsVIP2] = '\0';
 	/* printf("%s, %d\n", vHelp, strlen(vHelp));*/
@@ -352,28 +356,30 @@
 static int setLed(Context_t *context, int which, int on)
 {
 	struct aotom_ioctl_data vData;
-
 	vData.u.led.led_nr = which;
 	vData.u.led.on = on;
+
 	if (ioctl(context->fd, VFDSETLED, &vData) < 0)
 	{
 		perror("setLed: ");
 		return -1;
 	}
+
 	return 0;
 }
 
 static int setIcon(Context_t *context, int which, int on)
 {
 	struct aotom_ioctl_data vData;
-
 	vData.u.icon.icon_nr = which;
 	vData.u.icon.on = on;
+
 	if (ioctl(context->fd, VFDICONDISPLAYONOFF, &vData) < 0)
 	{
 		perror("setIcon: ");
 		return -1;
 	}
+
 	return 0;
 }
 
@@ -382,29 +388,34 @@
 	struct aotom_ioctl_data vData;
 
 	if (brightness < 0 || brightness > 7)
-	{
 		return -1;
-	}
+
 	vData.u.brightness.level = brightness;
 	printf("%d\n", context->fd);
+
 	if (ioctl(context->fd, VFDBRIGHTNESS, &vData) < 0)
 	{
 		perror("setbrightness: ");
 		return -1;
 	}
+
 	return 0;
 }
 
+static int setPwrLed(Context_t *context, int brightness)
+{
+	fprintf(stderr, "%s: not implemented\n", __func__);
+	return -1;
+}
+
+
 static int setLight(Context_t *context, int on)
 {
 	if (on)
-	{
 		setBrightness(context, 7);
-	}
 	else
-	{
 		setBrightness(context, 0);
-	}
+
 	return 0;
 }
 
@@ -413,9 +424,7 @@
 	tVIP2Private *private = (tVIP2Private *)((Model_t *)context->m)->private;
 
 	if (context->fd > 0)
-	{
 		close(context->fd);
-	}
 
 	free(private);
 	exit(1);
@@ -424,45 +433,40 @@
 static int Clear(Context_t *context)
 {
 	struct aotom_ioctl_data vData;
+
 	if (ioctl(context->fd, VFDDISPLAYCLR, &vData) < 0)
 	{
 		perror("clear: ");
 		return -1;
 	}
+
 	return 0;
 }
 
 Model_t VIP2_model =
 {
-	.Name             = "Edision VIP2 frontpanel control utility",
-	.Type             = Vip2,
-	.Init             = init,
-	.Clear            = Clear,
-	.Usage            = usage,
-	.SetTime          = setTime,
-	.GetTime          = getTime,
-	.SetTimer         = setTimer,
-	.GetWTime         = getWTime,
-	.SetWTime         = NULL,
-	.Shutdown         = shutdown,
-	.Reboot           = reboot,
-	.Sleep            = Sleep,
-	.SetText          = setText,
-	.SetLed           = setLed,
-	.SetIcon          = setIcon,
-	.SetBrightness    = setBrightness,
-	.GetWakeupReason  = NULL,
-	.SetLight         = setLight,
-	.SetLedBrightness = NULL,
-	.GetVersion       = NULL,
-	.SetRF            = NULL,
-	.SetFan           = NULL,
-	.GetWakeupTime    = NULL,
-	.SetDisplayTime   = NULL,
-	.SetTimeMode      = NULL,
-#if defined MODEL_SPECIFIC
-	.ModelSpecific    = NULL,
-#endif
-	.Exit             = Exit
+	.Name                      = "Edision VIP2 frontpanel control utility",
+	.Type                      = Vip2,
+	.Init                      = init,
+	.Clear                     = Clear,
+	.Usage                     = usage,
+	.SetTime                   = setTime,
+	.GetTime                   = getTime,
+	.SetTimer                  = setTimer,
+	.GetTimer                  = getTimer,
+	.Shutdown                  = shutdown,
+	.Reboot                    = reboot,
+	.Sleep                     = Sleep,
+	.SetText                   = setText,
+	.SetLed                    = setLed,
+	.SetIcon                   = setIcon,
+	.SetBrightness             = setBrightness,
+	.SetPwrLed                 = setPwrLed,
+	.SetLight                  = setLight,
+	.Exit                      = Exit,
+	.SetLedBrightness          = NULL,
+	.GetVersion                = NULL,
+	.SetRF                     = NULL,
+	.SetFan                    = NULL,
+	.private                   = NULL
 };
-
